<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>86上山了</title>
    <link href="/2023/01/13/%E5%93%88%E5%93%88/"/>
    <url>/2023/01/13/%E5%93%88%E5%93%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>街景一直在后退，你的崩溃在窗外零碎</center><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"/video/一路向北.mp4"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>]]></content>
    
    
    <categories>
      
      <category>闲谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>多线程编程</title>
    <link href="/2023/01/12/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/01/12/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>线程是进程内部的一个执行单元。它只是简单地扩展了进程切换的概念，它从进程间的切换转变成了同一个进程内的函数间的切换。同一个进程中函数间的切换相对于进程来说所需的开销要小的多，它只需要保存少数几个寄存器、一个堆栈指针以及程序计数器等少量内容。</p><p>主要内容如下：<br>多线程编程</p><ul><li>5.1 进程和线程<ul><li>5.1.1 进程</li><li>5.1.2 线程</li><li>5.1.3 进程与线程的差别</li></ul></li><li>5.2 C++标准线程库</li><li>5.3 TCP服务器端程序的多线程编程</li><li>5.4 一个服务器端多线程网络通信的例子<ul><li>5.4.1 服务器端代码</li><li>5.4.2 客户端程序</li></ul></li></ul><div class="row">    <embed src="/pdf/windows网络编程/多线程编程.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-focfcDLd" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-focfcDLd"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "白色风车",              author: "周杰伦",              url: "/music/周杰伦 - 白色风车.flac",              pic: "/music/图片/依然范特西.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>Windows网络编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>协议软件接口</title>
    <link href="/2023/01/12/%E5%8D%8F%E8%AE%AE%E8%BD%AF%E4%BB%B6%E6%8E%A5%E5%8F%A3/"/>
    <url>/2023/01/12/%E5%8D%8F%E8%AE%AE%E8%BD%AF%E4%BB%B6%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>协议软件接口承当应用程序与操作系统协议实现之间的桥梁作用。它封装了协议实现的基本功能，开放系统调用接口以简化操作，使得应用程序可以用操作系统调用的方式方便地使用协议实现提供的数据传输功能。</p><p>主要内容如下：<br>协议软件接口</p><ul><li>4.1 协议软件接口<ul><li>4.1.1 协议软件接口的位置</li><li>4.1.2 协议软件接口的功能</li></ul></li><li>4.2 网络通信的基本方法<ul><li>4.2.1 如何访问TCP&#x2F;IP协议</li><li>4.2.2 Linux系统的I&#x2F;O模型</li><li>4.2.3 实现网络进程通信必须解决的问题</li></ul></li><li>4.3 套接字<ul><li>4.3.1 套接字编程接口的起源与发展</li><li>4.3.2 套接字的抽象概念</li><li>4.3.3 套接字接口层的位置与内容</li><li>4.3.4 套接字通信</li></ul></li><li>4.4 Winsock Socket<ul><li>4.4.1 Winsock Socket规范</li><li>4.4.2 Windows Sockets的版本</li><li>4.4.3. WinSock的组成</li></ul></li></ul><div class="row">    <embed src="/pdf/windows网络编程/协议软件接口.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-mGtDXIrL" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-mGtDXIrL"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "半兽人",              author: "周杰伦",              url: "/music/周杰伦-半兽人.flac",              pic: "/music/图片/八度空间.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>Windows网络编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SmartCanteen操作说明</title>
    <link href="/2023/01/10/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/01/10/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文是基于<a href="https://casual-qian.github.io/2023/01/08/SmartCanteen/">上一文</a>的<code>SmartCanteen</code>程序的操作说明</p><h2 id="登录和注册"><a href="#登录和注册" class="headerlink" title="登录和注册"></a>登录和注册</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>双击运行<code>SmartCanteen.jar</code>文件，如果无法运行，请解压缩后编译运行<code>LogOnFrm</code>类。<br>运行成功后将打开登录页面<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/1.png"><br>目前有4个账号已经注册，可以直接使用这些账号进行登录，也可以自行注册，其中编号为00000，名称为admin的是管理员账号，登录该账号后进入食堂工作人员的管理界面。<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/2.png"></p><p>用户名、密码输入错误会有相应的提示信息<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/3.png"></p><h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>对于第一次使用的用户可以注册一个新的账号，系统会自动检测输入的用户名是否已经存在，并提示相关信息。<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/4.png"></p><h2 id="点餐者界面"><a href="#点餐者界面" class="headerlink" title="点餐者界面"></a>点餐者界面</h2><p>输入正确的普通用户的名称和密码就能进入点餐者的主页面<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/5.png"></p><p><strong>注：如果无法成功登录，有可能是本人笔记本的数据库服务没有开启或者<code>IP</code>地址发生改变，请联系<code>qq</code>:<code>2227693837</code>,可能需要修改<code>DbUtil</code>类中<code>jdbc</code>的参数。</strong></p><h3 id="点餐"><a href="#点餐" class="headerlink" title="点餐"></a>点餐</h3><p>点击主页面导航栏的“开始点餐”选项即可进入该页面<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/6.png"></p><p>进入点餐页面后左侧表格是可选的菜品，右侧表格则是购物车。<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/7.png"></p><p>主要操作步骤如下图所示<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/8.png"></p><p><strong>改变购物车中某一菜品的数量后需要点击右侧购物车表格的其他地方，是修改的单元格处于没有被选中的状态，这样才能检测出数据修改了</strong>，然后在点击刷新按钮刷新总金额。<br>也可以选中购物车中的某一菜品点击删除按钮即可删除。</p><p>当用户账户余额不足以支付订单，系统会提示充值消息，并且提交订单不成功<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/9.png"></p><h3 id="等待顺序"><a href="#等待顺序" class="headerlink" title="等待顺序"></a>等待顺序</h3><p>点击主页面导航栏的“等待顺序”选项即可进入该页面<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/10.png"></p><p>等待顺序界面可以看到当前系统要处理的所有订单记录，处理顺序为从上到下，可以通过餐位号判断自己的顺序，但是需要不断点击刷新按钮才能刷新订单状态的显示<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/11.png"></p><h3 id="历史订单"><a href="#历史订单" class="headerlink" title="历史订单"></a>历史订单</h3><p>点击主页面导航栏的“历史订单”选项即可进入该页面<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/12.png"></p><p>左侧显示了该用户的所有订单记录，点击某一订单记录，可以在右侧表格中显示该记录中具体的菜品名称及其数量。<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/13.png"><br>当订单状态处于“未处理”，可以点击“取消订单”按钮来取消该订单</p><h3 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h3><p>点击主页面导航栏的“个人信息”选项即可进入该页面<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/14.png"></p><p>个人信息界面包含了用户的<code>id</code>、用户名、账户余额等信息，同时还可以实现充值功能<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/15.png"></p><h3 id="退出系统"><a href="#退出系统" class="headerlink" title="退出系统"></a>退出系统</h3><p>点击主页面导航栏的“退出系统”选项即可退出本系统<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/16.png"><br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/17.png"></p><h2 id="管理员界面"><a href="#管理员界面" class="headerlink" title="管理员界面"></a>管理员界面</h2><p><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/18.png"><br>需要在登录界面输入正确管理员名称和密码才能进入管理主界面<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/19.png"></p><h3 id="订单处理"><a href="#订单处理" class="headerlink" title="订单处理"></a>订单处理</h3><p>点击主页面导航栏的“订单处理”选项即可进入该页面<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/20.png"></p><p>左侧表格显示处于“配菜中” “未处理”状态的订单信息。点击某一订单记录会在右侧显示具体的菜品名称及数量信息<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/21.png"></p><p>点击“开始”或“完成”按钮可以对订单进行相应的操作</p><h3 id="历史订单-1"><a href="#历史订单-1" class="headerlink" title="历史订单"></a>历史订单</h3><p>点击主页面导航栏的“历史订单”选项即可进入该页面<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/22.png"></p><p>左侧表格显示所以订单的记录，点击某一记录就会在右侧表格显示该记录的具体的菜品名称及其数量。<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/23.png"></p><h3 id="查询分析"><a href="#查询分析" class="headerlink" title="查询分析"></a>查询分析</h3><p>点击主页面导航栏的“查询分析”选项即可进入该页面<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/24.png"></p><p>左侧表格会显示每个菜品被点过的次数（<code>0</code>次的不显示），右侧是一些数据的统计<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/25.png"></p><h3 id="退出系统-1"><a href="#退出系统-1" class="headerlink" title="退出系统"></a>退出系统</h3><p>点击主页面导航栏的“退出系统”选项即可退出本系统<br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/26.png"><br><img src="/img/Java/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/27.png"></p><p><strong>附：<a href="https://github.com/casual-qian/JavaProject/tree/main/SmartCanteen">github仓库链接</a></strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SmartCanteen</title>
    <link href="/2023/01/08/SmartCanteen/"/>
    <url>/2023/01/08/SmartCanteen/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-课程设计目的"><a href="#1-课程设计目的" class="headerlink" title="1.课程设计目的"></a>1.课程设计目的</h2><p>掌握面向对象程序设计的基本思维方式，熟悉并结合理论课程对面向对象分析、设计的基本理论和方法，实现一个简单的小规模的应用程序。最终能够熟悉并掌握一门面向对象程序设计语言</p><h2 id="2-课程设计题目描述和要求"><a href="#2-课程设计题目描述和要求" class="headerlink" title="2.课程设计题目描述和要求"></a>2.课程设计题目描述和要求</h2><p><strong>课程设计的问题描述和需求如下：</strong><br>某大学食堂希望改变当前的堂食服务模式，将以自主点餐、自主取餐、自动结算的方式进一步提升食堂运转效率，解决食堂人员成本高、用餐高峰期拥堵等问题。</p><p>新的食堂运转模式如下：<br>用餐人员进入食堂后，不用去取餐盘，也不用去窗口点餐，而是直接寻找到空闲的餐桌坐下。每个餐桌上有若干个餐位，每个餐位的桌面上都有一个二维码。用餐人员用食堂<code>APP</code>扫该二维码进行点餐。如果用餐人员未注册过账号，需要先注册。食堂<code>APP</code>上把菜品分类显示，包括猪肉类、牛肉类、羊肉类、水产类、豆制品类、蔬菜类、鸡蛋类、主食类。每个分类下显示具体的菜品名称、配料、价格。用餐人员可在<code>APP</code>中点菜，选中菜品时默认份数为<code>1</code>份，也可调整数量。选择菜品时，<code>APP</code>上实时显示已选菜品总份数和价格。点餐的过程中可以终止本次点餐。点餐完可进行结算，如果账户余额充足，则点餐成功；如果余额不足，则需要先在线充值。点餐成功后，用餐人员可坐在餐位上等待配餐完成，在食堂<code>APP</code>上可以看到他的等待排序（按点餐提交的时间，先来先服务）。</p><p>食堂工作人员的主要职责是根据点餐结果进行配餐。工作人员的工作台上有一台带触摸屏和打印机的一体机，屏上显示分配给他的所有点餐记录。每条点餐记录包括餐位号、菜品及其份数。工作人员按顺序配餐，他先点击“开始”按钮（按钮上的文字切换为“完成”），为点餐记录列表的第一条点餐记录配餐。此时用餐人员在食堂<code>APP</code>上可以看到工作人员已经开始为他配餐。工作人员配餐完币，点击“完成”按钮（按钮上的文字切换为“开始”），此时用餐人员在食堂<code>APP</code>上可以看到配餐完成，一体机也将打印出一张含有餐位号及点餐人员<code>ID</code>的单据。用餐人员自行到取餐区取餐。</p><p>食堂工作人员可以通过该系统进行查询分析，包括：各菜品的受欢迎程度、食堂各时间段的用餐人数、平均点餐配餐时间、工作人员的工作量、累计收入等。</p><h2 id="3-课程设计报告内容"><a href="#3-课程设计报告内容" class="headerlink" title="3.课程设计报告内容"></a>3.课程设计报告内容</h2><h3 id="3-1用例分析"><a href="#3-1用例分析" class="headerlink" title="3.1用例分析"></a>3.1用例分析</h3><p><strong>执行者</strong>：用餐人员、食堂工作人员<br><strong>用例</strong>：点餐、注册、充值、点餐记录、查询分析打印票据。<br><img src="/img/Java/SmartCanteen/1.png"></p><p><strong>用例描述</strong></p><table><thead><tr><th>用例名称</th><th>点餐</th></tr></thead><tbody><tr><td>执行者</td><td>用餐人员</td></tr><tr><td>前置条件</td><td>已经注册登录成功</td></tr><tr><td>功能描述</td><td>满足用餐人员选择菜品、调整数量、结算等功能，并且将点餐记录呈现在一体机的触摸屏上</td></tr><tr><td>主要步骤</td><td>1.分类显示菜品，并且显示具体的菜品名称、配料、价格<br>2.选择菜品，调整数量，默认数量为<code>1</code><br>3.若账户余额充足，则可结算，否则需进行充值<br>4.点餐成功，显示等待顺序<br>5.点餐过程中可终止点餐</td></tr><tr><td>相关用例</td><td>选择菜品、调整数量、结算、终止点餐</td></tr></tbody></table><table><thead><tr><th>用例名称</th><th>查询分析</th></tr></thead><tbody><tr><td>执行者</td><td>食堂工作者</td></tr><tr><td>前置条件</td><td>系统投入使用一段时间有记录</td></tr><tr><td>功能描述</td><td>为食堂工作人员提供查询分析功能，包括：各菜品的受欢迎程度、食堂各时间段的用餐人数、平均点餐配餐时间、工作人员的工作量、累计收入等。</td></tr><tr><td>主要步骤</td><td>1.记录各种菜品的点餐次数、点餐时间、每次点餐的配餐时间、总价价格等<br>2.根据记录的数据计算出相应的参数</td></tr><tr><td>相关用例</td><td>点餐、点餐记录、配菜</td></tr></tbody></table><table><thead><tr><th>用例名称</th><th>配菜</th></tr></thead><tbody><tr><td>执行者</td><td>食堂工作者</td></tr><tr><td>前置条件</td><td>有点餐者在系统上进行点餐，产生点餐记录</td></tr><tr><td>功能描述</td><td>对于正在进行的点餐记录进行配菜，使订单从未处理状态变为配菜中和已完成状态</td></tr><tr><td>主要步骤</td><td>1.选中订单记录列表的一条记录（先来先服务）,查看其具体的菜品名称及数量<br>2.开始配餐（点击开始按钮），选中的订单的状态变为“配菜中”<br>3.完成配菜（点击完成按钮），选中的订单的装填变为“已完成”<br>4.将菜品名称、数量、配菜等数据记录下来</td></tr><tr><td>相关用例</td><td>完成、开始、点餐记录</td></tr></tbody></table><p>其他用例描述略过</p><h3 id="3-2静态建模"><a href="#3-2静态建模" class="headerlink" title="3.2静态建模"></a>3.2静态建模</h3><p>该问题中出现的对象有用餐人员、账号、菜品、菜品名称、菜品配料、菜品价格、账户余额、食堂工作人员、触摸屏、打印机、一体机、点餐记录、餐位号、菜品份数、点餐人员<code>ID</code>。<br>其中针对本问题选择用餐人员、菜品、食堂工作人员、触摸屏、打印机、点餐记录作为类，其余均为类的属性<br>基本的类如下：<br><img src="/img/Java/SmartCanteen/2.png"></p><p>因为需要为工作人员提供查询分析的功能，多以需要一个点餐记录列表的类来记录点餐记录的数据并计算相关数据。每个菜品对象包含了菜品名称、份数、价格，由菜品组成每条点餐记录，每条点餐记录组成点餐记录列表<br><img src="/img/Java/SmartCanteen/3.png"></p><p>所有类之间的关系如下：<br><img src="/img/Java/SmartCanteen/4.png"></p><h3 id="3-3动态建模"><a href="#3-3动态建模" class="headerlink" title="3.3动态建模"></a>3.3动态建模</h3><p>点餐者活动图如下：<br><img src="/img/Java/SmartCanteen/5.png"></p><p>食堂工作人员活动图如下：<br><img src="/img/Java/SmartCanteen/6.png"></p><p>顺序图：<br><img src="/img/Java/SmartCanteen/7.png"></p><h3 id="3-4程序简要操作说明"><a href="#3-4程序简要操作说明" class="headerlink" title="3.4程序简要操作说明"></a>3.4程序简要操作说明</h3><h4 id="3-4-1登录和注册"><a href="#3-4-1登录和注册" class="headerlink" title="3.4.1登录和注册"></a>3.4.1登录和注册</h4><p>双击运行<code>SmartCanteen.jar</code>文件，如果无法运行，请解压缩后编译运行<code>LogOnFrm</code>类。<br>运行成功后将打开登录页面<br><img src="/img/Java/SmartCanteen/8.png"></p><p>目前有<code>4</code>个账号已经注册，可以直接使用这些账号进行登录，也可以自行注册，其中编号为<code>00000</code>，名称为<code>admin</code>的是管理员账号，登录该账号后进入食堂工作人员的管理界面。<br><img src="/img/Java/SmartCanteen/9.png"></p><h4 id="3-4-2点餐者界面"><a href="#3-4-2点餐者界面" class="headerlink" title="3.4.2点餐者界面"></a>3.4.2点餐者界面</h4><p>登录成功普通账号后会进入点餐者的主界面<br>如果无法成功登录，有可能是本人笔记本的数据库服务没有开启或者<code>IP</code>地址发生改变，请联系<code>qq</code>:<code>2227693837</code>,可能需要修改<code>DbUtil</code>类中<code>jdbc</code>的参数。<br><img src="/img/Java/SmartCanteen/10.png"></p><p>点击导航栏的菜单选项会进入相应的界面<br><img src="/img/Java/SmartCanteen/11.png"></p><p>下面已点餐界面为例介绍系统的点餐功能<br><img src="/img/Java/SmartCanteen/12.png"><br>改变购物车中某一菜品的数量后需要点击右侧购物车表格的其他地方，是修改的单元格处于没有被选中的状态，这样才能检测出数据修改了，然后在点击刷新按钮刷新总金额。<br>也可以选中购物车中的某一菜品点击删除按钮即可删除。</p><p>等待顺序界面可以看到当前系统要处理的所有订单记录，处理顺序为从上到下，可以通过餐位号判断自己的顺序，但是需要不断点击刷新按钮才能刷新订单状态的显示<br><img src="/img/Java/SmartCanteen/13.png"></p><p>更详细的操作步骤及一些注意事项请查看<a href="https://casual-qian.github.io/2023/01/10/SmartCanteen%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/">下一篇文章</a><br>附：<a href="https://github.com/casual-qian/JavaProject/tree/main/SmartCanteen">github仓库链接</a></p><h2 id="4-结论及总结"><a href="#4-结论及总结" class="headerlink" title="4.结论及总结"></a>4.结论及总结</h2><p>本次实验对于课程设计的需求基本上实现了，但是也有一些细节的地方没有设计好，比如说对于食堂的工作人员或许可以再细分成配菜的工作人员和数据查询分析的工作人员，打印机打印订单信息的功能也没有具体实现。还有对于订单状态实时变化的情况，不知道该如何将其状态的变化通知给点餐者，这一点没什么思路。在整体上，感觉代码量有点大，有点冗杂繁多，或许有一些更加清晰、明确的设计方案和框架能够比较简单的来实现课程设计中的需求。<br>本次实验我使用<code>Swing</code>框架来实现系统的可视化效果，因为这个实现可视化似乎比较快，但是依旧花了不少时间来学习，现在大多数人很少用这个库，并且现在也可以通过拖动具体的组件来实现窗体、组件的大小设计和位置摆放。<br>对于数据的输出，保存，取出等操作借助了<code>MySQL</code>数据库，将菜品、订单、用户等建立成为二维的基本表，使得对于数据的记录和读取都需要使用<code>sql</code>语言来进行更新或者查询，这次的课程设计也算是对于数据库理论和实践的又一次熟悉。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>图书管理系统使用说明</title>
    <link href="/2022/12/05/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2022/12/05/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文是有关<a href="https://casual-qian.github.io/2022/12/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/">上一文章</a>中图书管理系统的使用说明<br>windows下双击运行bookManager.exe文件<br>或者配置java环境后双击运行bookManager.jar文件（命令窗口运行也可以）<br><strong>注：每一项操作执行后可能需要等待几秒</strong></p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E7%99%BB%E5%BD%95.png"></p><p>现有的管理员有两个</p><table><thead><tr><th>用户名</th><th>密码</th></tr></thead><tbody><tr><td>admin</td><td>123456</td></tr><tr><td>qian</td><td>12581</td></tr></tbody></table><p>输入正确的用户名和密码点击登录按钮即可进入主界面<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E4%B8%BB%E7%95%8C%E9%9D%A2.png"></p><p><strong>如果没有成功登录，请联系QQ：2227693837，打开云服务器</strong></p><h2 id="图书类别添加"><a href="#图书类别添加" class="headerlink" title="图书类别添加"></a>图书类别添加</h2><p>在菜单栏点击“图书类别添加”即可进入该功能界面<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E7%B1%BB%E5%88%AB%E7%AE%A1%E7%90%861.png"></p><p>输入类别名称和简介点击添加按钮即可<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%B1%BB%E5%88%AB%E6%B7%BB%E5%8A%A0.png"></p><p>已存在的图书类别无法添加，图书类别简介可为空，不符合要求的会有相应的提示信息<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%B1%BB%E5%88%AB%E6%B7%BB%E5%8A%A0%E9%94%99%E8%AF%AF.png"></p><h2 id="图书类别维护"><a href="#图书类别维护" class="headerlink" title="图书类别维护"></a>图书类别维护</h2><p>在菜单栏点击“图书类别维护”即可进入该功能界面<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E7%B1%BB%E5%88%AB%E7%AE%A1%E7%90%862.png"></p><p>窗口上半部分的表格会显示已经存在的图书类别及其简介<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%B1%BB%E5%88%AB%E7%BB%B4%E6%8A%A41.png"></p><p>在搜索框输入想要查询的图书类别名称，点击搜索按钮，即可进行图书类别的模糊查询，等待几秒后，表格处会刷新搜索结果<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%B1%BB%E5%88%AB%E7%BB%B4%E6%8A%A42.png"></p><p>点击表中的一条数据，就可以在下方编辑栏进行修改或删除，修改后的图书类别为空，某一类别下有图书则不可删除该类别<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%B1%BB%E5%88%AB%E7%BB%B4%E6%8A%A43.png"></p><p>修改或删除过几秒后后，上表会刷新数据<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%B1%BB%E5%88%AB%E7%BB%B4%E6%8A%A44.png"></p><p>修改或删除不符合要求会有相应的提示信息<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%B1%BB%E5%88%AB%E7%BB%B4%E6%8A%A4%E9%94%99%E8%AF%AF.png"></p><h2 id="图书添加"><a href="#图书添加" class="headerlink" title="图书添加"></a>图书添加</h2><p>在菜单栏点击“图书添加”即可进入该功能界面<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%861.png"></p><p>输入相关信息，点击添加按钮即可添加图书，其中图书名称、作者、书号不能为空，书号不能与已经存在的书号相同，固定为5位，不足5位自动添加前导0.<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E6%B7%BB%E5%8A%A01.png"></p><p>添加的图书不符合要求会有相应的提示信息<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E6%B7%BB%E5%8A%A0%E9%94%99%E8%AF%AF.png"></p><h2 id="图书维护"><a href="#图书维护" class="headerlink" title="图书维护"></a>图书维护</h2><p>在菜单栏点击“图书维护”即可进入该功能界面<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%862.png"></p><p>窗口上半部分的表格会显示已经存在的图书及其基本信息<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%BB%B4%E6%8A%A41.png"></p><p>搜索栏输入相关信息，点击搜索按钮即可进行相关图书的模糊搜索，并且在表格中显示搜索结果<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%BB%B4%E6%8A%A42.png"></p><p>点击表中的一条数据，就可以在下方编辑栏进行修改或删除，其中书号不可编辑，图书名称和作者不能为空<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%BB%B4%E6%8A%A43.png"></p><p>修改或删除过几秒后后，上表会刷新数据<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%BB%B4%E6%8A%A44.png"></p><p>修改或删除不符合要求会有相应的提示信息<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%9B%BE%E4%B9%A6%E7%BB%B4%E6%8A%A4%E9%94%99%E8%AF%AF.png"></p><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><p>在菜单栏点击“图书维护”即可退出本程序<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E9%80%80%E5%87%BA1.png"></p><p><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E9%80%80%E5%87%BA2.png"></p><h2 id="关于本程序"><a href="#关于本程序" class="headerlink" title="关于本程序"></a>关于本程序</h2><p>在菜单栏点击“图书维护”即可进入该界面<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%A8%8B%E5%BA%8F1.png"></p><p>该界面包含了本程序的一些信息<br><img src="/img/openGauss/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E5%85%B3%E4%BA%8E%E6%9C%AC%E7%A8%8B%E5%BA%8F2.png"></p>]]></content>
    
    
    <categories>
      
      <category>openGauss</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库应用系统的开发</title>
    <link href="/2022/12/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/"/>
    <url>/2022/12/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>初步掌握数据库应用系统分析设计的基本方法；进一步提高分析与解决问题的综合能力；初步掌握数据库建模工具的使用方法</p><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>数据库使用云服务器<code>openEuler</code>操作系统上的<code>openGauss</code>数据库，主要功能及界面在<code>windows</code>下使用<code>eclipse</code>编写<code>java</code>程序实现。</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="一、系统选题需求情况"><a href="#一、系统选题需求情况" class="headerlink" title="一、系统选题需求情况"></a>一、系统选题需求情况</h3><p>完成一个图书管理系统，实现对图书信息的增删改查功能，并且该系统需要进行用户登录的过程才能够正常使用。</p><h3 id="二、系统的概念数据模型（E-R-图）设计"><a href="#二、系统的概念数据模型（E-R-图）设计" class="headerlink" title="二、系统的概念数据模型（E-R 图）设计"></a>二、系统的概念数据模型（E-R 图）设计</h3><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/ER%E5%9B%BE.png"></p><h3 id="三、系统中每张表的说明"><a href="#三、系统中每张表的说明" class="headerlink" title="三、系统中每张表的说明"></a>三、系统中每张表的说明</h3><table><thead><tr><th>基本表</th><th>属性</th></tr></thead><tbody><tr><td>用户</td><td>用户名、密码</td></tr><tr><td>图书类别</td><td>图书类别名称、图书类别简介</td></tr><tr><td>图书</td><td>书号、图书名称、作者、图书类别、图书简介</td></tr></tbody></table><p><code>users</code>中包含了管理员的登录信息，其中包含了管理员名称和密码，目前只包含了两个管理员。<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/3-1.png"></p><p><code>booktype</code>表是有关图书的类别表,其中包括图书类别名称（<code>typename</code>）和图书类别简介（<code>typedesc</code>），其中<code>typename</code>作为<code>book</code>表的外键<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/3-2.png"></p><p><code>book</code>表中保存所有图书的基本信息，包括书号（<code>id</code>），书名（<code>bookname</code>），作者（<code>author</code>），图书类别（<code>booktype</code>），图书简介（<code>bookdesc</code>）。其中<code>id</code>为主键且固定为5位字符<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/3-3.png"></p><h3 id="四、系统运行环境配置，操作说明，前端与后台数据库连接用到的关键语句说明"><a href="#四、系统运行环境配置，操作说明，前端与后台数据库连接用到的关键语句说明" class="headerlink" title="四、系统运行环境配置，操作说明，前端与后台数据库连接用到的关键语句说明"></a>四、系统运行环境配置，操作说明，前端与后台数据库连接用到的关键语句说明</h3><h4 id="1-系统运行环境配置"><a href="#1-系统运行环境配置" class="headerlink" title="1.系统运行环境配置"></a>1.系统运行环境配置</h4><p>目前仅在<code>Windows</code>下试运行过</p><p>若需要查看程序的详细组成将<code>bookManager.jar</code>文件解压即可</p><h4 id="2-操作说明"><a href="#2-操作说明" class="headerlink" title="2.操作说明"></a>2.操作说明</h4><p><code>Windows</code>操作系统下双击运行<code>bookManager.exe</code>文件<br>或者配置<code>java</code>环境后双击运行<code>bookManager.jar</code>文件（命令窗口运行也可以）</p><p>或者用编译器编译运行<code>com.bookMangager.view</code>包下的<code>LogOnfrm.java</code>文件。</p><h4 id="3-前端与后台数据库连接用到的关键语句说明"><a href="#3-前端与后台数据库连接用到的关键语句说明" class="headerlink" title="3.前端与后台数据库连接用到的关键语句说明"></a>3.前端与后台数据库连接用到的关键语句说明</h4><p>首先引入<code>openGauss</code>的驱动包，使用<code>sql</code>包中的<code>Connection</code>类获取连接<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/4-3.png"></p><h3 id="五、系统主要功能界面介绍"><a href="#五、系统主要功能界面介绍" class="headerlink" title="五、系统主要功能界面介绍"></a>五、系统主要功能界面介绍</h3><p>登录界面<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/5-1.png"></p><p>目前有两个管理员</p><table><thead><tr><th>用户名</th><th>密码</th></tr></thead><tbody><tr><td>admin</td><td>123456</td></tr><tr><td>qian</td><td>12581</td></tr></tbody></table><p>用户名和密码输入正确后会进入主界面<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/5-2.png"></p><p>点击导航栏的菜单可以进行各种操作<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/5-3.png"></p><p>点击具体的功能会进入相关的功能界面<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%80%E5%8F%91/5-4.png"></p><p>更多详细操作请参看<a href="https://casual-qian.github.io/2022/12/05/%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/">下一篇文章</a></p><h3 id="六、实验结果总结"><a href="#六、实验结果总结" class="headerlink" title="六、实验结果总结"></a>六、实验结果总结</h3><p>系统运行的效果基本符合预期的要求，对于图书、图书类别的添加和修改有这很多要求，比如图书名称及类别不能为空，不能够级联删除，书号不能超过5位等等。<br>界面的设计过于简陋，实现的功能也过于简单，因为设计的基本表只有3个，且表与表之间了联系很弱，所以对于功能也只能围绕其中两个表的增删改查来设计，没有着手与现实生活中较为复杂的情景来设计</p><h2 id="编程工作总结"><a href="#编程工作总结" class="headerlink" title="编程工作总结"></a>编程工作总结</h2><p>本次编程的学习和参考为B站上的教程视频<br>本次编程工作的首要任务是如何远程连接<code>openGauss</code>数据库，后查找资料后决定使用<code>jdbc</code>连接，引入<code>openGauss</code>的驱动包，并且注意到其连接格式与<code>mysql</code>有所不同，在种种错误都尝试后还是不能连接数据库，捣鼓了几天后终于发现云服务器中的<code>openGauss</code>数据库对应的端口号并没有开放…<br>数据库设计方面从简单的关系入手进行设计，但是发现<code>openGauss</code>数据库并不支持表格的属性自增这一功能，所以放弃了原本主键自增的设计<br>在如何呈现可视化界面的方面，由于自己决定使用<code>java</code>编写系统，所以决定使用<code>java</code>中的<code>Swing</code>工具包来实现系统的各个界面（虽然以后实际可能很少会用该工具包，但是眼下实现起来比较简单且快速，而且是个人第一次实现可视化较高的程序，还是有一定成就感的）。但是从头学习<code>Swing</code>也比较繁琐复杂，所以在<code>eclipse</code>中安装相关插件，可以实现对窗口、按钮、文本框的拖动来更加方便地设计界面。<br>在<code>sql</code>语句的编写上，因为要实现多条件查询，所以我计划将各条件分开写成多个<code>String</code>，再组合成一个<code>String</code>传参，但是却忘了组合后各<code>String</code>之间要以空格分开，导致单个<code>sql</code>语句错误，这个错误找了挺久的。<br>其实在完成该系统的实现之前，自己对<code>java</code>的熟悉程度并不是很高，因为真正的使用<code>java</code>编写程序的经验很少，但是此次过后，觉得自己对于<code>java</code>的编写熟悉程度，对于面向对象的思想理解和运用有了很大的提升，本次实验对于自己的帮助很大，有确确实实感觉到自己有学到一些东西。</p>]]></content>
    
    
    <categories>
      
      <category>openGauss</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库管理系统的维护与管理</title>
    <link href="/2022/12/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    <url>/2022/12/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>掌握<code>DBMS</code>提供的数据库用户和权限管理机制；理解存储过程概念，掌握存储过程与触发器的使用；掌握数据库备份与恢复方法。</p><h2 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h2><p><code>openEuler</code>操作系统上的<code>openGauss</code>数据库</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="1-数据库安全性"><a href="#1-数据库安全性" class="headerlink" title="1.数据库安全性"></a>1.数据库安全性</h3><h4 id="1-数据库账户的添加、删除"><a href="#1-数据库账户的添加、删除" class="headerlink" title="(1)数据库账户的添加、删除"></a>(1)数据库账户的添加、删除</h4><p>添加用户<code>Tom</code>，登录密码为<code>137570</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> Tom <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;137570&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/1-1-1.png"><br>发现密码至少需要8个字符</p><p>修改密码为<code>137570911</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> Tom <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;137570911&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/1-1-2.png"><br>又发现需要至少需要3种字符</p><p>最终修改密码为<code>casual_user@137570</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> Tom <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;casual_user@137570&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/1-1-3.png"></p><p>再创建以下三个用户<br>用户<code>Jerry</code>密码<code>Jerry@911</code><br>用户<code>XiaoMing</code> 密码<code>XiaoMing&amp;762505</code><br>用户<code>LiHua</code>密码<code>LiHua@12581</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> Jerry <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;Jerry@911&#x27;</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> XiaoMing <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;XiaoMing&amp;762505&#x27;</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> LIHua <span class="hljs-keyword">password</span> <span class="hljs-string">&#x27;LiHua@12581&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/1-1-4.png"></p><p>删除用户<code>XiaoMing</code></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">drop <span class="hljs-keyword">user</span> <span class="hljs-title">XiaoMing</span> cascade;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/1-1-5.png"></p><h4 id="2-对账户进行授予权限、收回权限"><a href="#2-对账户进行授予权限、收回权限" class="headerlink" title="(2)对账户进行授予权限、收回权限"></a>(2)对账户进行授予权限、收回权限</h4><p>将<code>student</code>表所有权限赋予用户<code>Tom</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">on</span> student <span class="hljs-keyword">to</span> Tom;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/1-2-1.png"></p><p>将<code>student</code>表的<code>s_id</code>,<code>s_name</code>,<code>s_major</code>的查询、更新权限赋予用户<code>Jerry</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> (s_id,s_name,s_major),<br><span class="hljs-keyword">update</span> (s_id,s_name,s_major) <br><span class="hljs-keyword">on</span> student <span class="hljs-keyword">to</span> Jerry;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/1-2-2.png"></p><p>将<code>student</code>表数据的查询权限赋予用户<code>LiHua</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> student <span class="hljs-keyword">to</span> LiHua;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/1-2-3.png"></p><p>收回用户<code>LiHua</code>对<code>student</code>表的所有权限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">privileges</span> <span class="hljs-keyword">from</span> LiHua;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/1-2-4.png"></p><p>收回用户<code>jerry</code>对<code>student</code>表中对<code>s_id</code>，<code>s_name</code>的更新权限</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">update</span> (s_id,s_name) <span class="hljs-keyword">on</span> student <span class="hljs-keyword">from</span> Jerry;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/1-2-5.png"></p><h3 id="2-触发器，存储过程的使用"><a href="#2-触发器，存储过程的使用" class="headerlink" title="2.触发器，存储过程的使用"></a>2.触发器，存储过程的使用</h3><h4 id="1-创建存储过程并执行"><a href="#1-创建存储过程并执行" class="headerlink" title="(1)创建存储过程并执行"></a>(1)创建存储过程并执行</h4><p>创建更新借书表<code>borrow_book</code>中的还书时间<code>r_time</code>的存储过程，名为<code>update_return_book</code>;</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> <span class="hljs-title function_">update_return_date</span><br><span class="hljs-params">(<span class="hljs-keyword">in</span> stu_id varchar(10)</span> , <span class="hljs-title function_">in</span> <span class="hljs-title function_">book_id</span> <span class="hljs-title function_">varchar</span><span class="hljs-params">(10)</span> , <span class="hljs-title function_">in</span> <span class="hljs-title function_">return_date</span> <span class="hljs-title function_">date</span>)<br><span class="hljs-title function_">as</span><br><span class="hljs-title function_">begin</span><br><span class="hljs-title function_">update</span> <span class="hljs-title function_">borrow_book</span><br><span class="hljs-title function_">set</span> <span class="hljs-title function_">r_time</span> = <span class="hljs-title function_">return_date</span><br><span class="hljs-title function_">where</span> <span class="hljs-title function_">stu_id</span> = <span class="hljs-title function_">s_id</span> <span class="hljs-title function_">and</span> <span class="hljs-title function_">book_id</span> = <span class="hljs-title function_">b_id</span>;<br><span class="hljs-keyword">end</span><span class="hljs-punctuation">;</span><br>/<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/2-1-1.png"></p><p>原先<code>borrow_book</code>表中数据如下：<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/2-1-2.png"></p><p>调用刚才创建的过程</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">call update_return_date (&#x27;<span class="hljs-number">003837</span>&#x27;,&#x27;<span class="hljs-number">3422</span>4&#x27;,&#x27;<span class="hljs-number">2022-11</span>-9&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/2-1-3.png"></p><p>再次查看该表的数据发现已经发送改变<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/2-1-4.png"></p><h4 id="2-创建触发器并测试效果"><a href="#2-创建触发器并测试效果" class="headerlink" title="(2)创建触发器并测试效果"></a>(2)创建触发器并测试效果</h4><p>创建触发器函数，功能是在还书更细还书时间的时候将相应的图书库存+1</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or replace</span> <span class="hljs-keyword">function</span> update_booknum()<br><span class="hljs-keyword">returns</span> <span class="hljs-type">trigger</span><br><span class="hljs-keyword">as</span><br>$$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">declare</span></span><br><span class="language-pgsql"><span class="hljs-keyword">begin</span></span><br><span class="language-pgsql"><span class="hljs-keyword">update</span> book <span class="hljs-keyword">set</span> b_num=b_num+<span class="hljs-number">1</span> <span class="hljs-keyword">where</span> b_id=<span class="hljs-built_in">old</span>.b_id;</span><br><span class="language-pgsql"><span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">end</span>;</span><br><span class="language-pgsql">$$</span> <span class="hljs-keyword">language</span> plpgsql;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/2-2-1.png"></p><p>创建触发器，在还书更新还书时间后调用上述触发器函数</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">create</span> trigger return_book<br>after update <span class="hljs-keyword">of</span> r_time <span class="hljs-keyword">on</span> borrow_book<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> row<br>execute <span class="hljs-keyword">procedure</span> <span class="hljs-title function_">update_booknum</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/2-2-2.png"></p><p>原先图书表<code>book</code>数据如下<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/2-2-3.png"></p><p>更新还书时间<code>r_time</code></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">update borrow_book set r_time = &#x27;<span class="hljs-number">2022-11-12</span>&#x27;<br>where b_id = &#x27;<span class="hljs-number">3422</span>4&#x27; and s_id = &#x27;<span class="hljs-number">043858</span>&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/2-2-4.png"></p><p>再次查看<code>book</code>表可以看到相应的图书库存已经发生变化<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/2-2-5.png"></p><h3 id="3-数据库备份与恢复"><a href="#3-数据库备份与恢复" class="headerlink" title="3.数据库备份与恢复"></a>3.数据库备份与恢复</h3><h4 id="1-对所创建的数据库进行备份"><a href="#1-对所创建的数据库进行备份" class="headerlink" title="(1)对所创建的数据库进行备份"></a>(1)对所创建的数据库进行备份</h4><p>创建备份目录并且启动数据库</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/home/</span>omm<span class="hljs-regexp">/physical/</span>backup<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/3-1-1.png"></p><p>对数据库进行物理备份</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">gs_basebackup -D <span class="hljs-regexp">/home/</span>omm<span class="hljs-regexp">/physical/</span>backup -p <span class="hljs-number">26000</span><br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/3-1-2.png"></p><p>查看备份好的文件<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/3-1-3.png"></p><h4 id="2-利用备份进行数据库恢复"><a href="#2-利用备份进行数据库恢复" class="headerlink" title="(2)利用备份进行数据库恢复"></a>(2)利用备份进行数据库恢复</h4><p><code>/gaussdb/data/db1</code>原文件如下<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/3-2-1.png"></p><p>模拟数据被破坏<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/3-2-2.png"></p><p>恢复数据库文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp -r <span class="hljs-regexp">/home/</span>omm<span class="hljs-regexp">/physical/</span>backup<span class="hljs-regexp">/.  /g</span>aussdb<span class="hljs-regexp">/data/</span>db1<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%BB%B4%E6%8A%A4%E4%B8%8E%E7%AE%A1%E7%90%86/3-2-3.png"><br>数据已经恢复</p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p><code>openGauss</code>创建存储过程也有所不同，<code>openGauss</code>中没有<code>delimiter</code>命令，主要创建过程如上所示。<br>在创建触发器时，没有注意到<code>openGauss</code>与<code>MySQL</code>之间的不同，尝试几次后没有成功，查阅资料得知<code>openGauss</code>需要触发器函数，在定义触发器的时候调用触发器函数才能成功调用<br>在创建用户时设置密码需要至少三种字符且至少需要8位</p>]]></content>
    
    
    <categories>
      
      <category>openGauss</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库管理系统及其应用开发环境的创建使用</title>
    <link href="/2022/12/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/12/02/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>了解数据库应用开发环境的建立与使用；掌握SQL 语言的使用；通过实践理解关系数据模型的相关概念；掌握数据库应用开发环境的使用；掌握创建、删除数据库的方法；掌握创建基本表、查看表属性、修改属性的方法；掌握向表中添加、删除以及修改数据的方法；掌握查询分析器的使用方法；掌握查询语句在单表查询中的应用；掌握复杂查询、多表查询的方法；掌握视图的使用方法；巩固数据库的基础知识。</p><h2 id="实验环境："><a href="#实验环境：" class="headerlink" title="实验环境："></a>实验环境：</h2><p><code>openEuler</code>操作系统上的<code>openGauss</code>数据库</p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><h3 id="1-创建数据库，创建并维护基本表的结构与数据"><a href="#1-创建数据库，创建并维护基本表的结构与数据" class="headerlink" title="1.创建数据库，创建并维护基本表的结构与数据"></a>1.创建数据库，创建并维护基本表的结构与数据</h3><h4 id="（1）创建数据库"><a href="#（1）创建数据库" class="headerlink" title="（1）创建数据库"></a>（1）创建数据库</h4><p>以学校图书馆借书为背景，创建相关数据库，其中包含4个基本表<br>学生（借书证号，姓名，年级，专业，性别）<br>出版社（出版社名，电子邮件，地址，电话）<br>图书（书号，书名，剩余数量，出版社名字）<br>借书（借书证号，书号，借书时间，还书时间）</p><p>创建名为<code>mydb</code>的数据库</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> mydb;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-1-1.png"></p><p>切换至<code>mydb</code>数据库</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">\c mydb<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-1-2.png"></p><h4 id="（2）创建4个基本表"><a href="#（2）创建4个基本表" class="headerlink" title="（2）创建4个基本表"></a>（2）创建4个基本表</h4><p>创建学生表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student<br>(<br>s_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key <span class="hljs-keyword">unique</span>,<br>s_name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>s_grade <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>s_major <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>s_sex <span class="hljs-type">varchar</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-2-1.png"></p><p>创建出版社表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> press<br>(<br>p_name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>p_email <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>p_address <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>p_tel <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">unique</span><br>);<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-2-2.png"></p><p>创建图书表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> book<br>(<br>b_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key <span class="hljs-keyword">unique</span>,<br>b_name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>b_num <span class="hljs-type">integer</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>,<br>p_name <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br><span class="hljs-keyword">constraint</span> book_press_fk <span class="hljs-keyword">foreign</span> key(p_name) <span class="hljs-keyword">references</span> press(p_name)<br>);<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-2-3.png"></p><p>创建借书表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> borrow_book<br>(<br>b_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>s_id <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>b_time <span class="hljs-type">date</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>r_time <span class="hljs-type">date</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-2-4.png"></p><h4 id="（3）对表的结构进行修改操作"><a href="#（3）对表的结构进行修改操作" class="headerlink" title="（3）对表的结构进行修改操作"></a>（3）对表的结构进行修改操作</h4><p><code>press</code> 表的原属性如下：<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-3-1.png"></p><p>将<code>p_tel</code>字段改成<code>p_telephone</code>,</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> press <span class="hljs-keyword">rename</span> p_tel <span class="hljs-keyword">to</span> p_telephone;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-3-2.png"></p><p>在<code>press</code>表中新增字段<code>p_postcode</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> press <span class="hljs-keyword">add</span> p_postcode <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-3-3.png"></p><p>修改后的<code>press</code>表属性如下：<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-3-4.png"></p><p><code>student</code>表原属性如下：<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-3-5.png"></p><p>删除<code>student</code>表中的<code>s_sex</code>字段</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> student <span class="hljs-keyword">drop</span> s_sex;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-3-6.png"></p><p>修改后的<code>student</code>表属性如下：<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-3-7.png"></p><h4 id="（4）创建索引及删除索引"><a href="#（4）创建索引及删除索引" class="headerlink" title="（4）创建索引及删除索引"></a>（4）创建索引及删除索引</h4><p>为<code>student</code>表的<code>s_name</code>字段创建名为<code>index_s_name</code>的索引</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> index_s_name <span class="hljs-keyword">on</span> student(s_name);<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-4-1.png"></p><p>创建<code>index_s_name</code>索引后的<code>student</code>表属性如下：<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-4-2.png"></p><p>删除刚才创建的<code>s_name_index</code>索引</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> index_s_name;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-4-3.png"></p><p>删除该索引后<code>student</code>表恢复<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-4-4.png"></p><h4 id="（5）向表中录入若干数据，对表中数据进行修改和删除操作"><a href="#（5）向表中录入若干数据，对表中数据进行修改和删除操作" class="headerlink" title="（5）向表中录入若干数据，对表中数据进行修改和删除操作"></a>（5）向表中录入若干数据，对表中数据进行修改和删除操作</h4><p>在<code>student</code>表中插入1行数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student(s_id,s_name,s_grade,s_major) <span class="hljs-keyword">values</span><br>(‘<span class="hljs-number">043858</span>’, ‘zhangsan’, <span class="hljs-number">2020</span> , ‘computer’);<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-5-1.png"></p><p>再插入4行数据</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">insert into student values<br>(‘<span class="hljs-number">878433</span>’ , ‘lisi’ , <span class="hljs-number">2019</span> , ‘computer’),<br>(‘<span class="hljs-number">234453</span>’ , ‘wangwu’ , <span class="hljs-number">2019</span>, ‘English’),<br>(‘<span class="hljs-number">0003837</span>’ , ‘zhaoliu’ , <span class="hljs-number">2022</span> , ‘psychology’),<br>(‘<span class="hljs-number">449763</span>’ , ‘sunqi’ , <span class="hljs-number">2020</span> , ‘music’);<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-5-2.png"></p><p>插入5行数据后<code>student</code>表数据如下：<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-5-3.png"></p><p><code>press</code>表</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">insert into press values<br>(&#x27;press1&#x27;,&#x27;<span class="hljs-number">124332</span>3@163.com&#x27;,&#x27;fuzhouminhou&#x27;,&#x27;<span class="hljs-number">1346336376</span>3&#x27;,&#x27;<span class="hljs-number">334543</span>&#x27;),<br>(&#x27;press2&#x27;,&#x27;<span class="hljs-number">346773</span>6@qq.com&#x27;,&#x27;fuzhougulou&#x27;,&#x27;<span class="hljs-number">1455569788</span>3&#x27;,&#x27;<span class="hljs-number">334539</span>&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-5-4.png"></p><p><code>book</code>表</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">insert into book values<br>(&#x27;<span class="hljs-number">2365</span>3&#x27;,&#x27;book1&#x27;,<span class="hljs-number">3</span>,&#x27;press1&#x27;),<br>(&#x27;<span class="hljs-number">3422</span>4&#x27;,&#x27;book2&#x27;,<span class="hljs-number">0</span>,&#x27;press2&#x27;),<br>(&#x27;<span class="hljs-number">2347</span>4&#x27;,&#x27;book3&#x27;,<span class="hljs-number">13</span>,&#x27;press1&#x27;),<br>(&#x27;<span class="hljs-number">3322</span>7&#x27;,&#x27;book4&#x27;,<span class="hljs-number">1</span> ,&#x27;press1&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-5-5.png"></p><p><code>borrow_book</code>表</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">insert into borrow_book values<br>(&#x27;<span class="hljs-number">3422</span>4&#x27;,&#x27;<span class="hljs-number">003837</span>&#x27;,&#x27;<span class="hljs-number">2022-10-29</span>&#x27;),<br>(&#x27;<span class="hljs-number">3322</span>7&#x27;,&#x27;<span class="hljs-number">449763</span>&#x27;,&#x27;<span class="hljs-number">2022-10-11</span>&#x27;,&#x27;<span class="hljs-number">2022-10-28</span>&#x27;),<br>(&#x27;<span class="hljs-number">3422</span>4&#x27;,&#x27;<span class="hljs-number">043858</span>&#x27;,&#x27;<span class="hljs-number">2022-10-22</span>&#x27;,&#x27;<span class="hljs-number">2022-11</span>-2&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-5-6.png"></p><p>将<code>student</code>表第4行元组中<code>s_id</code> <code>‘0003837’</code>改成 <code>‘003837’</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> s_id = ‘<span class="hljs-number">003837</span>’<span class="hljs-keyword">where</span> s_id = ‘<span class="hljs-number">0003837</span>’<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-5-7.png"></p><p>删除第2行元组</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> s_id = ‘<span class="hljs-number">878433</span>’;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/1-5-8.png"></p><h3 id="2-数据库查询，视图使用"><a href="#2-数据库查询，视图使用" class="headerlink" title="2.数据库查询，视图使用"></a>2.数据库查询，视图使用</h3><h4 id="（1）单表查询"><a href="#（1）单表查询" class="headerlink" title="（1）单表查询"></a>（1）单表查询</h4><p>查询所有学生的借书证号和姓名</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> s_id,s_name <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/2-1-1.png"></p><h4 id="（2）多表连接查询并排序输出"><a href="#（2）多表连接查询并排序输出" class="headerlink" title="（2）多表连接查询并排序输出"></a>（2）多表连接查询并排序输出</h4><p>连接<code>student</code>和<code>borrow</code>并查询相关信息按照借书时间降序</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">select student.s_id,s_name,<span class="hljs-keyword">b_id,b_time,r_time </span><br>from student <span class="hljs-keyword">join </span><span class="hljs-keyword">borrow_book</span><br><span class="hljs-keyword"></span>on student.s_id = <span class="hljs-keyword">borrow_book.s_id</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">order </span><span class="hljs-keyword">by </span><span class="hljs-keyword">b_time </span>desc ;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/2-2-1.png"></p><h4 id="（3）使用聚集函数的查询"><a href="#（3）使用聚集函数的查询" class="headerlink" title="（3）使用聚集函数的查询"></a>（3）使用聚集函数的查询</h4><p>查询图书种类数目</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*)  <span class="hljs-keyword">as</span> total <span class="hljs-keyword">from</span> book;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/2-3-1.png"></p><p>查询最新的借书日期</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">max</span>(<span class="hljs-params">b_time</span>) <span class="hljs-keyword">as</span> latest_date <span class="hljs-keyword">from</span> borrow_book</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/2-3-2.png"></p><h4 id="（4）分组查询"><a href="#（4）分组查询" class="headerlink" title="（4）分组查询"></a>（4）分组查询</h4><p><code>book</code>表按照出版社名字分组查询每个出版社的图书数目</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> p_name,<span class="hljs-keyword">count</span>(b_id) <span class="hljs-keyword">from</span> book <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> p_name;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/2-4-1.png"></p><h4 id="（5）嵌套查询"><a href="#（5）嵌套查询" class="headerlink" title="（5）嵌套查询"></a>（5）嵌套查询</h4><p>查询最新的借书记录的各项信息</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">select</span> * <span class="hljs-function"><span class="hljs-keyword">from</span> borrow_book </span><br><span class="hljs-function"><span class="hljs-keyword">where</span> b_time <span class="hljs-title">in</span> </span><br><span class="hljs-function">(<span class="hljs-params"><span class="hljs-keyword">select</span> max(b_time</span>) <span class="hljs-keyword">from</span> borrow_book)</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/2-5-1.png"></p><h4 id="（6）创建并使用视图查询。"><a href="#（6）创建并使用视图查询。" class="headerlink" title="（6）创建并使用视图查询。"></a>（6）创建并使用视图查询。</h4><p>为<code>student</code>、<code>book</code>、<code>borrow_book</code>三个表创建视图</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">create view <span class="hljs-keyword">borrow_view </span>(s_id,s_name,<span class="hljs-keyword">b_id,b_name,b_time,r_time) </span><br>as select student.s_id,s_name,<span class="hljs-keyword">book.b_id,b_name,b_time,r_time </span><br>from <span class="hljs-keyword">borrow_book,student,book </span><br>where student.s_id=<span class="hljs-keyword">borrow_book.s_id </span><span class="hljs-keyword">and </span><span class="hljs-keyword">book.b_id=borrow_book.b_id;</span><br></code></pre></td></tr></table></figure><p><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/2-6-1.png"></p><p>查询该视图内容<br><img src="/img/openGauss/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E5%88%9B%E5%BB%BA%E4%BD%BF%E7%94%A8/2-6-2.png"></p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><p><code>MySQL</code>的<code>sql</code>语句在<code>openGuass</code>上基本上都适用，但是也有很多不同之处，比如查询表的属性用的语句是<code>\d</code>，另外切换数据库和修改表的列的语句也不相同（目前只发现了这些）。<br>实验进行中出现一个小问题让我花了很多时间，我刚开始的时候会先把<code>sql</code>语句打在<code>word</code>上，然后再复制粘贴到<code>cloudshell</code>上，导致插入数据时一直报错，原因时<code>word</code>上的单引号复制到<code>shell</code>上并不符合<code>sql</code>语句中的单引号的规范，这说明我还不够细节。<br>创建，删除，插入，更新等基本语句都大致掌握了，但是对于复杂查询的使用有时候逻辑上没办法理顺各级查询的意思，还需要再进行一些练习。</p>]]></content>
    
    
    <categories>
      
      <category>openGauss</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>银耳椰椰——冲刺总结</title>
    <link href="/2022/11/30/%E9%93%B6%E8%80%B3%E6%A4%B0%E6%A4%B0%E2%80%94%E2%80%94%E5%86%B2%E5%88%BA%E6%80%BB%E7%BB%93/"/>
    <url>/2022/11/30/%E9%93%B6%E8%80%B3%E6%A4%B0%E6%A4%B0%E2%80%94%E2%80%94%E5%86%B2%E5%88%BA%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="冲刺计划"><a href="#冲刺计划" class="headerlink" title="冲刺计划"></a>冲刺计划</h2><p><a href="https://blog.csdn.net/loverisdust/article/details/128042092?spm=1001.2014.3001.5502">银耳椰椰</a></p><h2 id="冲刺集合"><a href="#冲刺集合" class="headerlink" title="冲刺集合"></a>冲刺集合</h2><p><a href="https://blog.csdn.net/loverisdust/article/details/128048027?spm=1001.2014.3001.5502">银耳椰椰——冲刺集合</a></p><h2 id="项目预期计划"><a href="#项目预期计划" class="headerlink" title="项目预期计划"></a>项目预期计划</h2><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%93%B6%E8%80%B3%E6%A4%B0%E6%A4%B0%E2%80%94%E2%80%94%E5%86%B2%E5%88%BA%E6%80%BB%E7%BB%93/plan.png"></p><h3 id="1-完成开发任务"><a href="#1-完成开发任务" class="headerlink" title="1. 完成开发任务"></a>1. 完成开发任务</h3><p>保证Alpha冲刺后的整个小程序主要功能可以运行，保证小程序的简洁性与易用性不与实现思路相左。</p><h3 id="2-按时完成开发任务"><a href="#2-按时完成开发任务" class="headerlink" title="2.按时完成开发任务"></a>2.按时完成开发任务</h3><p>能够按照规定的时间完成Alpha冲刺任务，不会超出时间限制，根据时间合理安排每天的工作量。</p><h3 id="3-博客的书写"><a href="#3-博客的书写" class="headerlink" title="3.博客的书写"></a>3.博客的书写</h3><p>每天根据实际情况完成每天的任务量、遇到的问题、解决方案和燃尽图的博客书写，保证博客的真实性与可参考性。</p><h3 id="4-VLOG的拍摄"><a href="#4-VLOG的拍摄" class="headerlink" title="4.VLOG的拍摄"></a>4.VLOG的拍摄</h3><p>在规定时间内完成一个兼并创意性与纪实性的VLOG制作。</p><h2 id="完成任务"><a href="#完成任务" class="headerlink" title="完成任务"></a>完成任务</h2><h3 id="1-完成开发任务-1"><a href="#1-完成开发任务-1" class="headerlink" title="1.完成开发任务"></a>1.完成开发任务</h3><p>基本实现了小程序的主要功能，每一个模块与后端的耦合成功运行，但是一些细节还需要打磨。</p><h3 id="2-按时完成开发任务-1"><a href="#2-按时完成开发任务-1" class="headerlink" title="2.按时完成开发任务"></a>2.按时完成开发任务</h3><p>按照时间完成了内容，但是每天的时间安排有一些结构性的问题，时而紧张时而松散。</p><h3 id="3-博客的书写-1"><a href="#3-博客的书写-1" class="headerlink" title="3.博客的书写"></a>3.博客的书写</h3><p>博客按时完成，内容真实，但每天的问题有针对性不强。</p><h3 id="4-VLOG的拍摄-1"><a href="#4-VLOG的拍摄-1" class="headerlink" title="4.VLOG的拍摄"></a>4.VLOG的拍摄</h3><p>VLOG的剧情设计经历了两三次的迭代，选定了最具创意性的剧本，但一些镜头还未拍摄。</p><h2 id="成员过程体会"><a href="#成员过程体会" class="headerlink" title="成员过程体会"></a>成员过程体会</h2><p>焦硕欣：<br>这十几天对我来说是不断打磨与不断完善的一段经历，我是第一次担任一个项目的组长，在无经验的情况下临危受命接手了团队项目，其实是有一定的心虚的，自己也默默做了很多看不到的工作，如了解每个组员的性格、代码能力、组织能力，发扬每个人的能动性去帮助小组完成项目的推进是一件又辛苦但又复有成就感的事情，作为组长其实还是有一些不称职的地方，没有完完全全掌握时间的分配和工作量的分配，导致一部分同学的工作量不饱和而一部分同学的工作量过饱和，这是我的分内错误，在之后的项目中我会合理安排与分配；在这次小组编程中，其实压力还是蛮大的，处理项目的问题和人与人之间的对接真的是比开发难多了。知识掌握程度不同，小组员之间的的配合，项目进度的跟进，都非常消耗精神和体力。不过还是比较顺利地完成了这十几天的任务，非常感谢组员的配合与理解。<br>黄智鑫：在这次阿尔法冲刺活动中主要的任务是进行微信小程序的前端页面的实现。刚开始是比较迷茫的，毕竟没有做过什么项目的经验，做小程序也是从零开始。阴差阳错当上了前端小组的队长，协调项目的进度，与成员的沟通能力还有待提高！另外，看微信小程序的开发文档是真的折磨！！！。总的来说这是一次非常难忘的学习经历，希望能为以后的工作打下基础。<br>蒋震岳： 在这次实践中，学习了前端的知识，以及微信小程序的开发，一开始对于小程序开发可以说无从下手，懵懵懂懂，再加上这学期选课巨多，曾一度感到压力山大，后来在同学的指导下，先后分层次学习了不同阶段的内容，慢慢的成长，虽然技术上可能不是十分熟练，但相比一开始的状态有了很大提高，对小程序开发有了初步的认识。在小程序开发中也尝试完成了一些简单的页面，同时也感谢十分给力的队友带着我学习了很多知识，多亏了队友的帮助才能完成实现了复杂的页面功能设计。<br>林涵忠： 从最开始的结对选题到需求分析和原型设计，再到最后的实现。我的收获还是挺多的，一方面是结识到了一群共同协作的伙伴，另一方面是通过自己学习相关知识并实现相应的模块功能的成就感。虽然在完成作业过程中遇到了大大小小的问题，但是通过查找相关资料和自己慢慢摸索都顺利解决。这次团队编程作业之所以能够比较顺利的完成，得益于团队间的分工明确和行动迅速，遇到困难互相帮助、共同解决。我很高兴能和我的队友们顺利完成这次团队编程作业。<br>颜杰东： 在最开始的过程中还是很焦虑的，队里所有人都没有过开发的经验，感觉有很多需要学习，感觉整个项目无从下手。好在后来我们整个组都很努力，大家一起努力的学习，经常讨论确定各种细节。在整个小程序的样子慢慢成形的过程中，我的焦虑感也不断地减少，取而代之的是完成某个模块后的成就感。在整个冲刺过程中我也学到了很多新知识，除了软工的需求分析、架构设计、软件测试等等知识在实践中的运用外，我还学会了原生微信小程序的开发设计，前后端交互。除此之外我还学了vue和Django，虽然开发时没用上，但其思想对于我整个开发的过程也很有帮助。我对github的使用也更加熟练了。<br>江梦阗： 在这些天的冲刺过程中，除了完成任务以外，更重要的是得到了宝贵的经验与成长。制定好每一天的任务是冲刺的基础，一开始我觉得这应该是比较简单的，然而由于计划不够完善，加上课程和考试影响，导致出现了有些天早早完成任务，有些日子却赶得很急，这让我第一次切身感受到一个好的计划的重要性，草草计划的话反而让自己受累。工作方面，开始我也是比较迷茫的，由于大家经验都不足，刚开始的时候整个项目都有点难以进展，不过好在组员们都很努力，大家一起学习，遇到困难一起解决，工作方面也算是渐渐得心应手。随着小程序的渐渐完善，功能不断增加，也发现了不少bug，不过都被大家齐心协力被逐个排除，可以感受到的是，整个组的气氛都渐渐好起来了，能够看到自己参与开发的小程序慢慢接近完成，大家都很开心。冲刺过程中，学到了许多知识，收获了软件开发的经验，软工的知识被实践与应用，更重要的是，收获了团队协作的宝贵体验，相比与前两次的团队作业，因为任务更多更难，互帮互助更加频繁，收获也是更加明显，是非常非常难忘的回忆。这次冲刺任务能够顺利完成，实在是相当感谢队友们的配合与帮助。<br>曾为庆： 这是第一次参与软件开发，对大部分内容都不是很了解，一开始也不知道从什么方面入手，学习的进度比较缓慢，但是好在最后还是做出来了，在和写前端的同学沟通交流过程中逐渐完善代码，最后顺利交接，期间也有遇到各式各样的问题，在大伙的努力下都一样解决，这次的小组开发是一次宝贵的经验。<br>郑燕燕： 这是我第一次参与团队开发，也是第一次接触后端开发，对于前端后端是如何交互的很摸不着头脑，所以一开始我很迷茫，并不知道自己要做什么，起初我们讨论后端用Django作为框架，所以我就先去学习了Django框架，学习了两三天后，经过团队讨论我们改变了用Django框架的想法，决定使用微信开发者工具里的云开发。所以我就转道去学习了云开发基础，尝试着写云函数，把数据库里的数据返回给前端，因为我不知道内部逻辑细节，有时候就很怀疑，自己写的是对的吗?因为不确定，所以我经常和后端的组员们讨论。大家也把比较简单的部分分给我完成。感谢我的组员们。通过这次团队合作开发，我对云开发有了一定的了解，积累了一些开发小程序的知识，这次合作让我体会到了交流的重要性以及大家互相配合为了同一个目标不懈努力的那股冲劲和精神。我会把这种体会和精神运用到今后的学习与工作中，最后，银耳椰椰队真的很棒！！<br>王俊辉： 因为我在开发方面完全是小白，而且对编程语言的掌握程度也落后于其他组员，所以刚刚分配完开发任务的前几天都是在加紧学习语法和相关编程和开发知识。因为开发平台是微信开发者工具，所以开发过程中的大部分时间都用于学习和了解微信开发者文档。因为微信开发者工具有自己独特的语法，所以在刚开始的时候有许多让人捉摸不透的地方，大部分情况下都只能根据文档里的样例依葫芦画瓢。然后就是在各大社区或网站上公开的开源项目在很大程度上帮助了我完成开发任务，在此衷心地感想那些愿意分享资源和知识的热心人。<br>陈龙乾： 项目刚开始时原本决定用Django框架写后端，当时有些慌，因为自己连python的基础都不是很好，前后端交互的机制都不是很清楚，以至于在一天里看了各种资料，python基础、Django框架开发、js、服务器搭建、前后端怎么交互的……顿时感觉压力有点大，后面转入小程序云开发后压力减小了，但是时间也不多了。本次冲刺我在需求的了解和我们要实现的功能的运行机制上一直不是很明确，可能是因为缺少与前端成员的沟通以及自己的思维有时候跟不上。不过好在有小组成员的帮助，自己也完成了一些任务。</p><h2 id="组员贡献量"><a href="#组员贡献量" class="headerlink" title="组员贡献量"></a>组员贡献量</h2><table><thead><tr><th>成员</th><th>贡献量(%)</th></tr></thead><tbody><tr><td>焦硕欣</td><td>10</td></tr><tr><td>黄智鑫</td><td>12</td></tr><tr><td>蒋震岳</td><td>8</td></tr><tr><td>林涵忠</td><td>9</td></tr><tr><td>颜杰东</td><td>11.5</td></tr><tr><td>江梦阗</td><td>9.5</td></tr><tr><td>曾为庆</td><td>10</td></tr><tr><td>郑燕燕</td><td>10</td></tr><tr><td>王俊辉</td><td>10</td></tr><tr><td>陈龙乾</td><td>10</td></tr></tbody></table><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p><a href="https://github.com/hzxdsg/yixi_Frond-end">前端仓库</a><br><a href="https://github.com/zsshf/houduan">后端仓库</a></p>]]></content>
    
    
    <categories>
      
      <category>软件工程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>存储过程（二）</title>
    <link href="/2022/11/18/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/11/18/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>存储过程是一组为了完成某特定功能的<code>SQL</code>语句集，一段存放在数据库中的代码，由声明式的<code>SQL</code>语句(例如<code>select update</code>)和过程式的<code>SQL</code>语句(如<code>if else then</code>)组成<br>存储过程编译后直接存储在数据库中，用户可以通过<code>call</code>语句来调用及执行它。<br>系统无须重新编译程序，可提高执行效率。</p><h2 id="建立和调用存储过程（不带输出参数的存储过程）"><a href="#建立和调用存储过程（不带输出参数的存储过程）" class="headerlink" title="建立和调用存储过程（不带输出参数的存储过程）"></a>建立和调用存储过程（不带输出参数的存储过程）</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：<br>该实验是针对数据表<code>jdxx</code>，该数据表有四个字段，分别是省份(<code>sf</code>)、城市(<code>cs</code>)、区县(<code>qxmc</code>)、街道(<code>name</code>)。<br>例如，查询天心区(<code>qxmc</code>)的所有字段的值结果如图所示<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/1-1.png"></p><h3 id="任务要求"><a href="#任务要求" class="headerlink" title="任务要求"></a>任务要求</h3><h4 id="建立存储过程"><a href="#建立存储过程" class="headerlink" title="建立存储过程"></a>建立存储过程</h4><p><code>dqxx(in city varchar(10),in district varchar(10))</code><br>输入城市<code>city</code>和区县<code>district</code>的名称，显示乡<code>x</code>、镇<code>z</code>和街道<code>jd</code>、其他的个数<br><strong>提示</strong>：即<code>name字</code>段含有乡、镇、街道及不包含上述选项的个数</p><h4 id="调用过程"><a href="#调用过程" class="headerlink" title="调用过程"></a>调用过程</h4><p>以长沙市和开福区为参数，调用<code>dqxx</code>过程<br>以厦门市和同安区为参数，调用<code>dqxx</code>过程</p><p>例如，以长沙市和岳麓区为参数，调用过程显示结果如下</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">乡 街道 镇    其他<br>1   <span class="hljs-number"> 9 </span>  <span class="hljs-number"> 1 </span>   0<br></code></pre></td></tr></table></figure><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><h4 id="建立存储过程-1"><a href="#建立存储过程-1" class="headerlink" title="建立存储过程"></a>建立存储过程</h4><p>命令格式：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title function_">sp_name</span> <span class="hljs-params">( [proc_parameter] )</span><br><span class="hljs-title function_">BEGIN</span>    <br>过程体<br><span class="hljs-title function_">END</span><br></code></pre></td></tr></table></figure><h4 id="设置语句结束符"><a href="#设置语句结束符" class="headerlink" title="设置语句结束符"></a>设置语句结束符</h4><p>注意：<br><code>DELIMITER //</code><br>在过程体前面使用<code>DELIMITER</code> 符号命令将其他符号（不是分号）作为语句结束符,从而使服务器可以完整地处理过程体中所有的<code>sql</code>语句。<br><code>DELIMITER ;</code><br>在过程结束后将语句结束符变为<code>;</code></p><h4 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h4><p><code>([in|out|inout proc_name type][,in|out|inout proc_name type])</code><br>过程可以没有参数或多个参数，多个参数之间用逗号分隔<br><code>IN</code>输入参数，使数据可以传递给存储过程<br><code>OUT</code>输出参数，用于需要返回结果<br><code>INOUT</code>输入输出参数 既可以充当输入参数也可以充当输出参数</p><h4 id="声明局部变量"><a href="#声明局部变量" class="headerlink" title="声明局部变量"></a>声明局部变量</h4><p>D<code>ECLARE 局部变量名 类型 [default 默认值]</code><br>过程体中使用的局部变量，必须在存储过程的开头处声明</p><h4 id="显示表达式的值"><a href="#显示表达式的值" class="headerlink" title="显示表达式的值"></a>显示表达式的值</h4><p><code>SELECT 表达式 [as 列名]</code><br>计算并显示表达式的值</p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> use province;<br> #代码开始<br> #定义过程<br><br><span class="hljs-keyword">delimiter</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> dqxx(<span class="hljs-keyword">in</span> city <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>),<span class="hljs-keyword">in</span> district <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>))</span><br><span class="language-pgsql"><span class="hljs-keyword">BEGIN</span></span><br><span class="language-pgsql"><span class="hljs-keyword">declare</span> x <span class="hljs-type">int</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">declare</span> jd <span class="hljs-type">int</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">declare</span> z <span class="hljs-type">int</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">declare</span> qt <span class="hljs-type">int</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">select</span> count(<span class="hljs-type">name</span>)  <span class="hljs-keyword">from</span> jdxx  <span class="hljs-keyword">where</span> cs=city <span class="hljs-keyword">and</span> qxmc=district <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%乡&#x27;</span> <span class="hljs-keyword">into</span> x;</span><br><span class="language-pgsql"><span class="hljs-keyword">select</span> count(<span class="hljs-type">name</span>)  <span class="hljs-keyword">from</span> jdxx  <span class="hljs-keyword">where</span> cs=city <span class="hljs-keyword">and</span> qxmc=district <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%街道&#x27;</span> <span class="hljs-keyword">into</span> jd;</span><br><span class="language-pgsql"><span class="hljs-keyword">select</span> count(<span class="hljs-type">name</span>)  <span class="hljs-keyword">from</span> jdxx  <span class="hljs-keyword">where</span> cs=city <span class="hljs-keyword">and</span> qxmc=district <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%镇&#x27;</span> <span class="hljs-keyword">into</span> z;</span><br><span class="language-pgsql"><span class="hljs-keyword">select</span> count(<span class="hljs-type">name</span>)  <span class="hljs-keyword">from</span> jdxx  <span class="hljs-keyword">where</span> cs=city <span class="hljs-keyword">and</span> qxmc=district <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%镇&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%街道&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%乡&#x27;</span><span class="hljs-keyword">into</span> qt;</span><br><span class="language-pgsql"><span class="hljs-keyword">select</span> x <span class="hljs-keyword">as</span> &quot;乡&quot;,jd <span class="hljs-keyword">as</span> &quot;街道&quot;,z <span class="hljs-keyword">as</span> &quot;镇&quot;,qt <span class="hljs-keyword">as</span> &quot;其他&quot;;</span><br><span class="language-pgsql"><span class="hljs-keyword">end</span> $$</span><br><span class="hljs-keyword">delimiter</span> ;<br><br> #调用过程<br><span class="hljs-keyword">call</span> dqxx(<span class="hljs-string">&#x27;长沙市&#x27;</span>,<span class="hljs-string">&#x27;开福区&#x27;</span>);<br><span class="hljs-keyword">call</span> dqxx(&quot;厦门市&quot;,&quot;同安区&quot;);<br> #代码结束<br></code></pre></td></tr></table></figure><h2 id="建立和调用存储过程（带输出参数）"><a href="#建立和调用存储过程（带输出参数）" class="headerlink" title="建立和调用存储过程（带输出参数）"></a>建立和调用存储过程（带输出参数）</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：<br>销售数据库有工作人员、销售单数据表<br>工作人员<code>gzry</code>数据表有雇员号<code>gyh</code>、姓名<code>gyxm</code>、出生日期<code>csrq</code>、学历<code>xl</code>、工资<code>gz</code>、部门<code>bm</code>、电话<code>dh</code>字段<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/2-1.png"></p><p>销售单<code>xsd</code>数据表有销售单号xsdh、会员号<code>hyh</code>、雇员号<code>gyh</code>、销售日期<code>xsrq</code>、应付款<code>yfk</code>、实际付款<code>sjfk</code>字段<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/2-2.png"></p><h3 id="任务要求-1"><a href="#任务要求-1" class="headerlink" title="任务要求"></a>任务要求</h3><h4 id="建立存储过程-2"><a href="#建立存储过程-2" class="headerlink" title="建立存储过程"></a>建立存储过程</h4><p><code>ygyj(in nf int,in yf int,in xm varchar(10) out pj  varchar(10))</code></p><p>输入年份<code>nf</code>和月份<code>yf</code>和姓名<code>xm</code> ，输出对该工作人员的评价<code>pj</code>。<br>若该员工在指定年份和月份的销售业绩（销售单<code>xsd</code>的实际付款<code>sjfk</code>的合计）大于等于<code>10000</code>元，则返回优秀，大于等于<code>5000</code>元，则返回达标，大于<code>0</code>小于<code>5000</code>元返回不达标，若没有销售单则返回无业绩。</p><h4 id="调用过程-1"><a href="#调用过程-1" class="headerlink" title="调用过程"></a>调用过程</h4><p>以<code>2015</code>、<code>7</code>和<code>王雅静</code>为参数，调用<code>ygyj</code>过程，将结果存入<code>@yj1</code><br>以<code>2015</code>、<code>6</code>和<code>廖秉娴</code>为参数，调用<code>ygyj</code>过程，将结果存入<code>@yj2</code><br>以<code>2015</code>、<code>7</code>和<code>赵敏</code>为参数，调用<code>ygyj</code>过程，将结果存入<code>@yj3</code><br>以<code>2015</code>、<code>7</code>和章伟为参数，调用<code>ygyj</code>过程，将结果存入<code>@yj4</code></p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><h4 id="参数列表-1"><a href="#参数列表-1" class="headerlink" title="参数列表"></a>参数列表</h4><p><code>([in|out|inout proc_name type][,in|out|inout proc_name type])</code><br>过程可以没有参数或多个参数，多个参数之间用逗号分隔<br><code>IN</code>输入参数，使数据可以传递给存储过程<br><code>OUT</code>输出参数，用于需要返回结果<br><code>INOUT</code>输入输出参数 既可以充当输入参数也可以充当输出参数</p><h4 id="调用存储过程"><a href="#调用存储过程" class="headerlink" title="调用存储过程"></a>调用存储过程</h4><p><code>CALL 存储过程（参数列表）</code><br>当有<code>out</code>参数时，可以用全局变量接收结果<br>全局变量以<code>@</code>开头，在<code>mysql</code>会话中一直有效</p><h4 id="case多分支语句"><a href="#case多分支语句" class="headerlink" title="case多分支语句"></a>case多分支语句</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">CASE</span><br><span class="hljs-keyword">WHEN</span>   &lt;条件<span class="hljs-number">1</span>&gt; <span class="hljs-keyword">THEN</span>  &lt;语句<span class="hljs-number">1</span>&gt;<br><span class="hljs-keyword">WHEN</span>   &lt;条件<span class="hljs-number">2</span>&gt;   <span class="hljs-keyword">THEN</span> &lt;语句<span class="hljs-number">2</span>&gt;<br>……<br>[<span class="hljs-keyword">Else</span>  &lt;其他语句&gt;]<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span> <br></code></pre></td></tr></table></figure><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs sql"> use sale;<br> #代码开始<br> #定义过程<br> <br>delimiter $$<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> ygyj(<span class="hljs-keyword">in</span> nf <span class="hljs-type">int</span>,<span class="hljs-keyword">in</span> yf <span class="hljs-type">int</span>,<span class="hljs-keyword">in</span> xm <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) ,<span class="hljs-keyword">out</span> pj  <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>))<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> yj <span class="hljs-type">int</span>;<br><span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(sjfk) <span class="hljs-keyword">from</span> xsd,gzry <span class="hljs-keyword">where</span> xsd.gyh<span class="hljs-operator">=</span>gzry.gyh <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>(xsrq)<span class="hljs-operator">=</span>nf <span class="hljs-keyword">and</span> <span class="hljs-keyword">month</span>(xsrq)<span class="hljs-operator">=</span>yf <span class="hljs-keyword">and</span> gzry.gyxm<span class="hljs-operator">=</span>xm) <span class="hljs-keyword">into</span> yj;<br><span class="hljs-keyword">set</span> pj<span class="hljs-operator">=</span><span class="hljs-keyword">case</span> <br><span class="hljs-keyword">when</span> yj<span class="hljs-operator">&gt;=</span><span class="hljs-number">10000</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;优秀&#x27;</span><br><span class="hljs-keyword">when</span> yj<span class="hljs-operator">&lt;</span><span class="hljs-number">5000</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;不达标&#x27;</span><br><span class="hljs-keyword">when</span> (yj<span class="hljs-operator">&gt;=</span><span class="hljs-number">5000</span> <span class="hljs-keyword">and</span> yj<span class="hljs-operator">&lt;</span><span class="hljs-number">10000</span>) <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;达标&#x27;</span><br><span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;无业绩&#x27;</span><br><span class="hljs-keyword">end</span>;<br><span class="hljs-keyword">end</span> $$<br>delimiter ;<br><br>#<span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(sjfk) <span class="hljs-keyword">from</span> xsd,gzry <span class="hljs-keyword">where</span> xsd.gyh<span class="hljs-operator">=</span>gzry.gyh <span class="hljs-keyword">and</span> <span class="hljs-keyword">year</span>(xsrq)<span class="hljs-operator">=</span><span class="hljs-number">2015</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">month</span>(xsrq)<span class="hljs-operator">=</span><span class="hljs-number">7</span> <span class="hljs-keyword">and</span> xsd.gyh<span class="hljs-operator">=</span><span class="hljs-string">&#x27;009&#x27;</span>; <br><br> #调用过程<br><span class="hljs-keyword">call</span> ygyj(<span class="hljs-number">2015</span>,<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;王雅静&#x27;</span>,<span class="hljs-variable">@yj1</span>);<br><span class="hljs-keyword">call</span> ygyj(<span class="hljs-number">2015</span>,<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;廖秉娴&#x27;</span>,<span class="hljs-variable">@yj2</span>);<br><span class="hljs-keyword">call</span> ygyj(<span class="hljs-number">2015</span>,<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;赵敏&#x27;</span>,<span class="hljs-variable">@yj3</span>);<br><span class="hljs-keyword">call</span> ygyj(<span class="hljs-number">2015</span>,<span class="hljs-number">7</span>,<span class="hljs-string">&#x27;章伟&#x27;</span>,<span class="hljs-variable">@yj4</span>);<br><br> #代码结束<br> <span class="hljs-keyword">select</span> <span class="hljs-variable">@yj1</span>,<span class="hljs-variable">@yj2</span>,<span class="hljs-variable">@yj3</span>,<span class="hljs-variable">@yj4</span>;<br></code></pre></td></tr></table></figure><h2 id="建立和调用存储函数"><a href="#建立和调用存储函数" class="headerlink" title="建立和调用存储函数"></a>建立和调用存储函数</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：<br>销售数据库有顾客、销售单数据表<br>顾客<code>gk</code>数据表有会员号<code>hyh</code>、姓名<code>name</code>、性别<code>sex</code>、电话<code>tel</code>、部门<code>dept</code>字段<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/3-1.png"></p><p>销售单<code>xsd</code>数据表有销售单号<code>xsdh</code>、会员号<code>hyh</code>、雇员号<code>gyh</code>、销售日期<code>xsrq</code>、应付款<code>yfk</code>、实际付款<code>sjfk</code>字段<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/3-2.png"></p><h3 id="任务要求-2"><a href="#任务要求-2" class="headerlink" title="任务要求"></a>任务要求</h3><h4 id="建立存储过程-3"><a href="#建立存储过程-3" class="headerlink" title="建立存储过程"></a>建立存储过程</h4><p><code>gkjb(nf int, xm varchar(10) )</code><br>输入年份<code>nf</code>和月份<code>yf</code>和姓名<code>xm</code> ，返回该会员的等级。<br>若该顾客在指定年份的消费金额（销售单<code>xsd</code>的实际付款<code>sjfk</code>的合计）大于等于<code>10000</code>元，则返回超级<code>vip</code>，大于等于<code>5000</code>元，则返回<code>vip</code>，大于<code>0</code>小于<code>5000</code>元返回一般会员，若没有销售数据则返回非会员。</p><h4 id="调用过程-2"><a href="#调用过程-2" class="headerlink" title="调用过程"></a>调用过程</h4><p>通过<code>select</code>查询所有顾客数据表的姓名和<code>2015</code>年的顾客级别，结果如下所示<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/3-3.png"></p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><h4 id="存储函数定义"><a href="#存储函数定义" class="headerlink" title="存储函数定义"></a>存储函数定义</h4><p>存储函数由<code>sql</code>语句和过程语句组成的代码片段<br>可以定义输入参数（无需使用<code>in</code>)，没有输出参数。<br>在<code>begin</code>前通过<code>returns</code> &lt;数据类型&gt;语句指定返回值类型<br>在函数体中通过<code>return</code>返回值</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">CREATE <span class="hljs-keyword">FUNCTION</span> <span class="hljs-title">func_name</span> ( [func_parameter] )<br>Returns &lt;返回参数类型&gt;<br>BEGIN    <br>函数体<br><span class="hljs-keyword">return</span> <span class="hljs-type">返回值</span><br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p>如果开启了 <code>bin-log</code>, 必须在<code>begin</code>之前指定一个参数<code>DETERMINISTIC</code></p><h4 id="调用存储函数"><a href="#调用存储函数" class="headerlink" title="调用存储函数"></a>调用存储函数</h4><p><code>select  存储函数（参数列表）[as 列名]</code><br>可通过<code>select</code>语句调用并显示函数</p><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">use sale;<br>#代码开始<br>#函数定义<br><span class="hljs-keyword">delimiter</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> gkjb(nf <span class="hljs-type">int</span>,nm <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>))</span><br><span class="language-pgsql"><span class="hljs-keyword">Returns</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)</span><br><span class="language-pgsql"><span class="hljs-keyword">begin</span></span><br><span class="language-pgsql">    <span class="hljs-keyword">declare</span> dj <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>);</span><br><span class="language-pgsql">    <span class="hljs-keyword">declare</span> total <span class="hljs-type">int</span>;</span><br><span class="language-pgsql">    <span class="hljs-keyword">set</span> total=<span class="hljs-number">0</span>;</span><br><span class="language-pgsql">    <span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> sum(sjfk) <span class="hljs-keyword">from</span> xsd,gk <span class="hljs-keyword">where</span> gk.name=nm <span class="hljs-keyword">and</span> gk.hyh=xsd.hyh <span class="hljs-keyword">and</span> nf=year(xsrq)) <span class="hljs-keyword">into</span> total;</span><br><span class="language-pgsql"><span class="hljs-keyword">set</span> dj = <span class="hljs-keyword">case</span></span><br><span class="language-pgsql"><span class="hljs-keyword">when</span> total&gt;=<span class="hljs-number">10000</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;超级vip&#x27;</span>  </span><br><span class="language-pgsql"><span class="hljs-keyword">when</span> total&lt;<span class="hljs-number">10000</span> <span class="hljs-keyword">and</span> total&gt;=<span class="hljs-number">5000</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;vip&#x27;</span> </span><br><span class="language-pgsql"><span class="hljs-keyword">when</span> total&lt;<span class="hljs-number">5000</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;一般会员&#x27;</span></span><br><span class="language-pgsql"><span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;非会员&#x27;</span></span><br><span class="language-pgsql"><span class="hljs-keyword">end</span>;   </span><br><span class="language-pgsql"></span><br><span class="language-pgsql">    <span class="hljs-keyword">return</span> dj;</span><br><span class="language-pgsql"><span class="hljs-keyword">end</span> $$</span><br><span class="hljs-keyword">delimiter</span> ;<br><br>#调用函数<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> <span class="hljs-type">name</span> <span class="hljs-keyword">as</span> 姓名 ,gkjb(<span class="hljs-number">2015</span>,<span class="hljs-type">name</span>) <span class="hljs-keyword">as</span> 等级 <span class="hljs-keyword">from</span> gk ;<br><br> #代码结束<br></code></pre></td></tr></table></figure><h2 id="修改多个数据表的存储过程"><a href="#修改多个数据表的存储过程" class="headerlink" title="修改多个数据表的存储过程"></a>修改多个数据表的存储过程</h2><h3 id="任务描述-3"><a href="#任务描述-3" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：<br>图书管理数据库有读者<code>reader</code>图书<code>book</code>借阅数据表<br>读者表<code>reader</code>有读者证号<code>dzzh</code>、姓名<code>xm</code>、性别<code>xb</code>、身份<code>sf</code>、电话号码<code>dhhm</code>字段<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/4-1.PNG"></p><p>图书表<code>book</code>有条形码<code>txm</code>、书名<code>sm</code>、分类号<code>flh</code>,作者<code>zz</code>,出版社<code>cbs</code>,出版日期<code>cbrq</code>,售价<code>sj</code>,典藏类别<code>dclb</code>,在库<code>zk</code>,币种<code>bz</code>字段<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/4-2.PNG"></p><p>借阅表<code>borrow</code>有借阅编号<code>jyid</code>、读者证号<code>dzzh</code>、条形码<code>txm</code>、借阅日期<code>jyrq</code>、还书日期<code>hsrq</code>五个字段。<br>当读者借阅图书时，在借阅数据表中添加一条记录，还书日期设置为<code>NULL</code>,图书的在库<code>zk</code>字段被设置为<code>0</code><br>当读者归还图书时，将其对应借阅记录的还书日期设置为指定日期，并修改图书的在库<code>zk</code>字段为<code>1</code>.<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/4-3.PNG"></p><h3 id="任务要求-3"><a href="#任务要求-3" class="headerlink" title="任务要求"></a>任务要求</h3><h4 id="建立存储过程-4"><a href="#建立存储过程-4" class="headerlink" title="建立存储过程"></a>建立存储过程</h4><p><code>hs(in sh varchar(8), in dzbh varchar(3) ,in rq date,out zt varchar(12) )</code><br>输入图书条形码<code>sh</code>、读者证编号<code>dzbh</code>和还书日期<code>rq</code>，办理还书。<br>检查借阅数据表是否有此记录（条形码<code>txm</code>为<code>sh</code>读者<code>dzzh</code>为<code>dzbh</code>，且还书日期<code>hsrq</code>是否为<code>null</code>，若没有则<code>zt</code>返回”没有该借阅”,否则在借阅表将该借阅记录的还书日期改为<code>rq</code>。<br>并将图书数据表该图书的在库<code>zk</code>改为<code>1</code>,<code>zt</code>返回”成功还书”.</p><h4 id="调用过程-3"><a href="#调用过程-3" class="headerlink" title="调用过程"></a>调用过程</h4><p>分别以下列参数调用过程，并将结果返回<code>@zt1</code>、<code>@zt2</code><br>书号<code>P0000001</code>和读者证号<code>001</code>,还书日期<code>2022-5-1</code><br>书号<code>P0000001</code>和读者证号<code>002</code>,还书日期<code>2022-5-1</code></p><h3 id="我的代码-3"><a href="#我的代码-3" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> use library;<br> #代码开始<br> #定义过程<br><span class="hljs-keyword">delimiter</span> $$<span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> hs(<span class="hljs-keyword">in</span> sh <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>), <span class="hljs-keyword">in</span> dzbh <span class="hljs-type">varchar</span>(<span class="hljs-number">3</span>) ,<span class="hljs-keyword">in</span> rq <span class="hljs-type">date</span>,<span class="hljs-keyword">out</span> zt <span class="hljs-type">varchar</span>(<span class="hljs-number">12</span>) )</span><br><span class="language-pgsql"><span class="hljs-keyword">begin</span></span><br><span class="language-pgsql"><span class="hljs-keyword">declare</span> flag <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>);</span><br><span class="language-pgsql"><span class="hljs-keyword">declare</span> flag2 <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>);</span><br><span class="language-pgsql"><span class="hljs-keyword">set</span> flag=<span class="hljs-string">&#x27;111&#x27;</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">set</span> flag2=<span class="hljs-string">&#x27;111&#x27;</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">select</span> hsrq <span class="hljs-keyword">from</span> borrow <span class="hljs-keyword">where</span> txm=sh <span class="hljs-keyword">and</span> dzzh=dzbh <span class="hljs-keyword">and</span> hsrq <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">into</span> flag;</span><br><span class="language-pgsql"><span class="hljs-keyword">if</span> flag <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">set</span> zt=<span class="hljs-string">&#x27;还书成功&#x27;</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">else</span> <span class="hljs-keyword">set</span> zt=<span class="hljs-string">&#x27;没有该借阅&#x27;</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">if</span> flag <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">update</span> book <span class="hljs-keyword">set</span> zk=<span class="hljs-number">1</span> <span class="hljs-keyword">where</span> txm=sh;</span><br><span class="language-pgsql"><span class="hljs-keyword">else</span> <span class="hljs-keyword">set</span> flag2=<span class="hljs-string">&#x27;111&#x27;</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">if</span> flag <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">update</span> borrow <span class="hljs-keyword">set</span> hsrq=rq <span class="hljs-keyword">where</span> txm=sh <span class="hljs-keyword">and</span> dzzh=dzbh;</span><br><span class="language-pgsql"><span class="hljs-keyword">else</span> <span class="hljs-keyword">set</span> flag2=<span class="hljs-string">&#x27;111&#x27;</span>;</span><br><span class="language-pgsql"><span class="hljs-keyword">end</span> <span class="hljs-keyword">if</span>;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-keyword">end</span> $$</span><br><span class="hljs-keyword">delimiter</span> ;<br> #调用过程<br><span class="hljs-keyword">call</span> hs(<span class="hljs-string">&#x27;P0000001&#x27;</span>,<span class="hljs-number">001</span>,<span class="hljs-number">2022</span><span class="hljs-number">-5</span><span class="hljs-number">-1</span>,@zt1);<br><span class="hljs-keyword">call</span> hs(<span class="hljs-string">&#x27;P0000001&#x27;</span>,<span class="hljs-number">002</span>,<span class="hljs-string">&#x27;2022-5-1&#x27;</span>,@zt2);<br><br> #代码结束<br> <span class="hljs-keyword">select</span> @zt1,@zt2;<br> <span class="hljs-keyword">select</span> txm,sm,zk <span class="hljs-keyword">from</span> book;<br> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> borrow;<br></code></pre></td></tr></table></figure><h2 id="使用游标的存储过程"><a href="#使用游标的存储过程" class="headerlink" title="使用游标的存储过程"></a>使用游标的存储过程</h2><h3 id="任务描述-4"><a href="#任务描述-4" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：<br><code>jdxx</code>数据表有四个字段，分别是省份(<code>sf</code>)、城市(<code>cs</code>)、区县(<code>qxmc</code>)、街道(<code>name</code>)。<br>例如，查询天心区(<code>qxmc</code>)的所有字段的值结果如图所示<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/5-1.png"></p><h3 id="任务要求-4"><a href="#任务要求-4" class="headerlink" title="任务要求"></a>任务要求</h3><h4 id="建立存储过程-5"><a href="#建立存储过程-5" class="headerlink" title="建立存储过程"></a>建立存储过程</h4><p><code>tjdq(in sf varchar(10))</code><br>输入省份的名称，将该省份所有城市的所有地区的<br>乡<code>x</code>、镇<code>z</code>和街道<code>jd</code>和其他的个数插入到数据表<code>dqtj</code>中。<br><code>dqtj</code>数据表已经建立在数据库中，有城市(<code>cs</code>)，区县名称(<code>qxmc</code>)、县（<code>x</code>)、街道（<code>jd</code>)、镇(<code>z</code>)、其他(<code>qt</code>)六个字段。分别存储指定省份的城市、区县名称和县、街道、镇、其他的个数。<br>以湖南省为参数，调用<code>tjdq</code>过程后<br><code>dqtj</code>数据表部分数据如图所示<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/5-2.png"></p><h4 id="调用过程-4"><a href="#调用过程-4" class="headerlink" title="调用过程"></a>调用过程</h4><p>以安徽省为参数，调用过程</p><p><strong>提示</strong>：该过程先要删除dqtj数据表的所有数据<br>然后将指定省份的城市和区县的唯一信息值存入游标<br>然后将游标的各条信息依次取出循环，根据游标中的城市和区县名称，在jdxx数据表查出对应的乡、街道、镇和其他的个数，然后插入到dqtj数据表。</p><h3 id="相关知识-3"><a href="#相关知识-3" class="headerlink" title="相关知识"></a>相关知识</h3><h4 id="声明游标"><a href="#声明游标" class="headerlink" title="声明游标"></a>声明游标</h4><p>命令格式：<br><code>DECLARE   游标名  CURSOR FOR   select语句</code></p><h4 id="打开和关闭游标"><a href="#打开和关闭游标" class="headerlink" title="打开和关闭游标"></a>打开和关闭游标</h4><p>命令格式：<br><code>open 游标名 </code><br><code>close 游标名 </code> </p><h4 id="读取游标信息"><a href="#读取游标信息" class="headerlink" title="读取游标信息"></a>读取游标信息</h4><p>命令格式：<br><code>FETCH  游标名  INTO var1,var2[,…]  </code><br>将游标声明时的查询结果逐条存放在变量中<br>每执行一次<code>fetch</code>将指针指向下一条结果<br>变量必须在声明游标前定义</p><h4 id="遍历游标"><a href="#遍历游标" class="headerlink" title="遍历游标"></a>遍历游标</h4><p><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/5-3.png"></p><h3 id="我的代码-4"><a href="#我的代码-4" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> use province;<br> #代码开始<br><span class="hljs-keyword">DELIMITER</span> ||<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> tjdq(<span class="hljs-keyword">in</span> sm <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>))<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">declare</span> flag <span class="hljs-type">int</span> <span class="hljs-keyword">default</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">declare</span> city <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">declare</span> qx <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">declare</span> jd <span class="hljs-type">int</span>;<br><span class="hljs-keyword">declare</span> x <span class="hljs-type">int</span>;<br><span class="hljs-keyword">declare</span> z <span class="hljs-type">int</span>;<br><span class="hljs-keyword">declare</span> qt <span class="hljs-type">int</span>;<br><span class="hljs-keyword">DECLARE</span> dq <span class="hljs-keyword">CURSOR</span> <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">distinct</span> cs,qxmc <span class="hljs-keyword">from</span> jdxx <span class="hljs-keyword">where</span> sf=sm;<br><span class="hljs-keyword">declare</span> <span class="hljs-keyword">continue</span> <span class="hljs-keyword">handler</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">found</span> <span class="hljs-keyword">set</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> dqtj;<br><span class="hljs-keyword">OPEN</span> dq;<br><span class="hljs-keyword">FETCH</span> dq <span class="hljs-keyword">INTO</span> city,qx;<br><span class="hljs-keyword">while</span> flag=<span class="hljs-number">1</span> <span class="hljs-keyword">do</span><br><span class="hljs-keyword">select</span>   count(*) <span class="hljs-keyword">from</span> jdxx <span class="hljs-keyword">where</span> cs=city <span class="hljs-keyword">and</span> qxmc=qx <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> &quot;%街道&quot;  <span class="hljs-keyword">into</span> jd;<br><span class="hljs-keyword">select</span>   count(*) <span class="hljs-keyword">from</span> jdxx <span class="hljs-keyword">where</span> cs=city <span class="hljs-keyword">and</span> qxmc=qx <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> &quot;%乡&quot;  <span class="hljs-keyword">into</span> x;<br><span class="hljs-keyword">select</span>   count(*) <span class="hljs-keyword">from</span> jdxx <span class="hljs-keyword">where</span> cs=city <span class="hljs-keyword">and</span> qxmc=qx <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> &quot;%镇&quot;  <span class="hljs-keyword">into</span> z;   <br><span class="hljs-keyword">select</span>   count(*) <span class="hljs-keyword">from</span> jdxx <span class="hljs-keyword">where</span> cs=city <span class="hljs-keyword">and</span> qxmc=qx <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> &quot;%镇&quot;  <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> &quot;%街道&quot; <span class="hljs-keyword">and</span> <span class="hljs-type">name</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> &quot;%乡&quot; <span class="hljs-keyword">into</span> qt;     <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dqtj <span class="hljs-keyword">values</span>(city,qx,x,jd,z,qt);<br><span class="hljs-keyword">FETCH</span> dq <span class="hljs-keyword">INTO</span> city,qx;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">while</span>;<br><span class="hljs-keyword">CLOSE</span> dq;<br><span class="hljs-keyword">END</span><br>||<br><span class="hljs-keyword">DELIMITER</span> ;<br><span class="hljs-keyword">call</span> tjdq(&quot;安徽省&quot;);<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> dqtj; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安全性控制</title>
    <link href="/2022/11/18/%E5%AE%89%E5%85%A8%E6%80%A7%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/11/18/%E5%AE%89%E5%85%A8%E6%80%A7%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>安全性一般要从全方位、多层次考虑具体的安全措施，比如不仅要考虑<code>MySQL</code>的安全性，还要考虑服务器主机的安全性(如防<code>eavesdropping</code>, <code>altering</code>, <code>playback</code>, 以及<code>DoS</code>攻击等）。本实训仅考察<code>MySQL</code>安全性中的一部分：存取控制。</p><p><code>MySQL</code>采用自主存取控制策略，主要机制有：用户，数据对象，权限，角色，授权，收回权限等。</p><p><code>MySQL</code>还支持加密连接(<code>SSL</code>和<code>RSA</code>),以及支持第三方安全插件。</p><h2 id="用户和权限"><a href="#用户和权限" class="headerlink" title="用户和权限"></a>用户和权限</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：<br>在金融应用场景数据库环境中，创建用户，并给用户授予指定的权限。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：</p><ol><li><code>MySQL</code>的安全控制机制</li><li><code>create user</code>语句的使用</li><li><code>grant</code>和<code>revoke</code>语句的使用。</li></ol><h4 id="MySQL的安全控制机制"><a href="#MySQL的安全控制机制" class="headerlink" title="MySQL的安全控制机制"></a>MySQL的安全控制机制</h4><p>与大多数商用<code>DBMS</code>一样，<code>MySQL</code>采用自主存取控制(<code>DAC</code>)机制进行安全性管理。通过用户，数据对象，权限，授权，收回权限等要素进行存取控制。另外，为了方便批量授权给同一类用户，引入了角色。</p><h4 id="用户-User"><a href="#用户-User" class="headerlink" title="用户(User)"></a>用户(User)</h4><p><code>MySQL</code>创建用户的语句：<br><code>create user 用户名 identified by 用户登录密码；</code></p><p>通常用户名可包含域名，限定用户在该域名内登录再有效。例：<br><code>CREATE USER &#39;jeffrey&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password&#39;;</code><br>该语句创建用户<code>jeffrey</code>,密码为<code>&#39;password&#39;</code>，仅限在<code>MySQL</code>服务器本机上登录才有效。用户名与域合起来，被称为账户(<code>account</code>)。<br>注意不要写成：<code>&#39;jeffrey@localhost&#39;</code>，它代表账户：<br><code>&#39;jeffrey@localhost&#39;@&#39;%&#39;</code><br>意即用户名为<code>jefrrey@localhost</code>，在任何机器上登录都有效。两者的含义完全不同。</p><p>省略域名，即默认为’<code>%</code>‘,表示用户可远程登录。在本实训中，可以省略域，这时，用户名可以不加引号。</p><p><code>drop user</code>语句可删除用户。用户被删除时，该用户拥有的权限自动被收回。<br><code>alter user</code>语句可重置用户密码：<br><code>ALTER USER user IDENTIFIED BY &#39;new_password&#39;;</code></p><p><code>MySQL</code>在安装时，初始用户名为<code>root</code>，此为系统管理员用户，其余用户均由<code>root</code>创建，并授权。经授权的用户也可以创建用户。</p><p>在生产环境中，除了管理员，其它人应当使用由管理员创建的账户，不得使用<code>root</code>帐户。出于安全考虑，一般<code>root</code>用户也仅限在服务器本地登录，不轻易开放远程登录。</p><h4 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h4><p><code>MySQL</code>常用的权限有：</p><ul><li><code>all</code>: 所有权限(<code>grant option</code>除外)</li><li><code>alter</code>: <code>alter table</code>权限</li><li><code>alter routine</code>: <code>alter</code> 存储过程</li><li><code>create</code>: <code>create database/table</code></li><li><code>create role</code>: <code>create role</code></li><li><code>create foutine</code>: <code>create</code> 存储过程和函数</li><li><code>create user</code>： <code>create/alter/rename/drop user</code></li><li><code>create view</code>: <code>create view</code></li><li><code>delete</code>: <code>delete</code>语句</li><li><code>drop</code>: <code>drop database/table</code></li><li><code>drop role</code>: <code>drop role</code></li><li><code>execute</code>: 调用存储过程或函数</li><li><code>index</code>：<code>create/drop index</code></li><li><code>insert</code>: <code>insert</code>语句</li><li><code>select</code>: <code>select</code>语句</li><li><code>trigger</code>: 触发器相关操作</li><li><code>update</code>: <code>update</code>语句 等。 <code>select</code>,<code>update</code>,<code>insert</code>,<code>delete</code>还可以用在列上，如<code>select(c_id)</code>,<code>update(b_balance)</code>等。</li></ul><h4 id="角色-Role"><a href="#角色-Role" class="headerlink" title="角色(Role)"></a>角色(Role)</h4><p>角色是权限的集合。如果有一组人(承担相同职责的小组,或者説小组成员扮演相同的角色)应该被授予一组相同的权限，不妨创建一个角色，将那组权限授予该角色，然后再将角色授予该组的每个成员。这比一个个地给每个组员授予一批权限要方便得多。</p><p>创建角色的语句：<br><code>CREATE ROLE [IF NOT EXISTS] role [, role ] ...</code><br>一次可以创建多个角色。</p><p>删除角色：<br><code>DROP ROLE [IF EXISTS] role [, role ] ...</code><br>角色被删除后，拥有该角色的用户立即失去角色定义的权限组合。不过，如果用户同时拥有多个角色，两个角色代表的权限集合如果有交集，则该用户仍拥有交集代表的权限。</p><h4 id="GRANT授权语句"><a href="#GRANT授权语句" class="headerlink" title="GRANT授权语句"></a>GRANT授权语句</h4><p>以下语句授予权限给用户或角色：<br><code>grant 权限[,权限] ... on 数据库对象 to user|role,[user|role]... [with grant option]</code><br>可以同时将多个权限授予多个用户或角色。<br><code>with grant option</code>表示被授权用户可以传播权限，即授权该用户将其拥有的权限（之前获得的权限，通过本语句获得的权限，以及今后获得的权限）再授予其它用户。</p><p>以下语句授予角色所代表的权限集给用户或角色：<br><code>GRANT role [, role] ... TO user_or_role [, user_or_role] ... [WITH ADMIN OPTION]</code></p><p>总之，<code>GRANT</code>语句可以将权限或角色（权限集合）授予用户或角色。但是不能将权限和角色混合授予用户(或角色)。不过，你可以分开用两条不同的<code>GRANT</code>语句来实现：直接授权语句有关键词<code>ON</code>，间接授权(角色代表的权限集合)语句不带<code>ON</code>关键词。</p><h4 id="REVOKE收回权限语句"><a href="#REVOKE收回权限语句" class="headerlink" title="REVOKE收回权限语句"></a>REVOKE收回权限语句</h4><p>以下语句将对象的权限从用户或角色手中收回：<br><code>revoke 权限[,权限]... on 数据库对象 from user|role[,user|role]...</code> </p><p>下列语句把<code>role</code>所代表的权限集合从用户或角色中收回：<br><code>REVOKE role [, role ] ... FROM user_or_role [, user_or_role ] ...</code></p><p>如果用户本身拥有多个角色所代表的权限集合，而这些集合存在交集，收回其中部分角色代表的权限集后，用户可能仍拥有那个角色所代表的部分权限(交集代表的那部分权限)。</p><h4 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h4><p>在右侧代码文件编辑器填写语句，完成以下创建用户和授权操作：<br>(1) 创建用户<code>tom</code>和<code>jerry</code>，初始密码均为<code>&#39;123456&#39;</code>；<br>(2) 授予用户<code>tom</code>查询客户的姓名，邮箱和电话的权限,且<code>tom</code>可转授权限；<br>(3) 授予用户<code>jerry</code>修改银行卡余额的权限；<br>(4) 收回用户<code>Cindy</code>查询银行卡信息的权限。</p><p>说明：</p><ul><li>本实训的运行环境是之前查询实训中曾经使用过的金融场景数据库。</li><li>除<code>root</code>用户外，已预设了一个名为<code>Cindy</code>的用户，<code>Cindy</code>已被<code>root</code>授予了一定权限。</li><li>由于<code>MySQL</code>的用户密码采用加密存储，不可识别，评测程序不会也无法比较密码是否按要求设置，实际上密码可以任意设置。如果你想用创建的用户在命令行登录到<code>MySQL</code>检验的话，自己记得所设密码即可。</li><li>命令行窗口与评测用的是不同的<code>MySQL</code>实例，你需要自己还原数据库<code>(/data/workspace/myshixun/src/test1/finance1.sql)</code></li></ul><p>附上相关表结构：<br>表1 <code>client</code>(客户表)</p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>c_id</td><td>INTEGER</td><td>PRIMARY</td><td>KEY</td></tr><tr><td>c_name</td><td>VARCHAR(100)</td><td>NOT</td><td>NULL</td></tr><tr><td>c_mail</td><td>CHAR(30)</td><td>UNIQUE</td><td>客户邮箱</td></tr><tr><td>c_id_card</td><td>CHAR(20)</td><td>UNIQUE NOT NULL</td><td>客户身份证</td></tr><tr><td>c_phone</td><td>CHAR(20)</td><td>UNIQUE NOT NULL</td><td>客户手机号</td></tr><tr><td>c_password</td><td>CHAR(20)</td><td>NOT NULL</td><td>客户登录密码</td></tr></tbody></table><p>表2 <code>bank_card</code>(银行卡)</p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>约束</th><th>说明</th></tr></thead><tbody><tr><td>b_number</td><td>CHAR(30)</td><td>PRIMARY KEY</td><td>银行卡号</td></tr><tr><td>b_type</td><td>CHAR(20)</td><td>无</td><td>银行卡类型(储蓄卡&#x2F;信用卡)</td></tr><tr><td>b_c_id</td><td>INTEGER</td><td>NOT NULL FOREIGN KEY</td><td>所属客户编号,引用自client表的c_id字段。</td></tr><tr><td>b_balance</td><td>NUMERIC(10,2)</td><td>NOT NULL</td><td>余额,信用卡余额系指已透支的金额</td></tr></tbody></table><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>评测程序将运行脚本，然后检查所有用户及其权限，当所有用户及其权限都正确时，即可通关。 </p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 请填写语句，完成以下功能：<br>#(<span class="hljs-number">1</span>) 创建用户tom和jerry，初始密码均为<span class="hljs-string">&#x27;123456&#x27;</span>；<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;tom&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> jerry@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br>#(<span class="hljs-number">2</span>) 授予用户tom查询客户的姓名，邮箱和电话的权限,且tom可转授权限；<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>(c_mail, c_name, c_phone) <span class="hljs-keyword">ON</span> finance.client <span class="hljs-keyword">to</span> tom@<span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> <span class="hljs-keyword">option</span>;<br><br>#(<span class="hljs-number">3</span>) 授予用户jerry修改银行卡余额的权限；<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">update</span>(b_balance) <span class="hljs-keyword">on</span> finance.bank_card <span class="hljs-keyword">to</span> jerry@<span class="hljs-string">&#x27;%&#x27;</span>;<br><br>#(<span class="hljs-number">4</span>) 收回用户Cindy查询银行卡信息的权限。<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> finance.bank_card <span class="hljs-keyword">from</span> Cindy@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="用户、角色与权限"><a href="#用户、角色与权限" class="headerlink" title="用户、角色与权限"></a>用户、角色与权限</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：<br>创建角色，授予角色一组权限，并将角色代表的权限授予指定的一组用户。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：</p><ol><li>创建角色；</li><li>通过角色授权。</li></ol><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧代码文件编辑器填写语句，完成以下创建用户和授权操作：<br>(1) 创建角色<code>client_manager</code>和<code>fund_manager</code>；<br>(2) 授予<code>client_manage</code>r对<code>client</code>表拥有<code>select</code>,<code>insert</code>,<code>update</code>的权限；<br>(3) 授予<code>client_manager</code>对<code>bank_card</code>表拥有查询除银行卡余额外的<code>select</code>权限；<br>(4) 授予<code>fund_manager</code>对<code>fund</code>表的<code>select,</code>insert<code>,</code>update<code>权限； (5) 将</code>client_manager<code>的权限授予用户</code>tom<code>和</code>jerry<code>； (6) 将</code>fund_manager<code>权限授予用户</code>Cindy&#96;.</p><p>说明：<br>在本关开始前，用户<code>Cindy</code>,<code>tom</code>,<code>jerry</code>的所有权限都已提前被<code>revoke</code>。</p><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>评测程序将运行脚本，然后检查所有用户、角色及其权限，当所有用户、角色及其权限都正确时，即可通关。</p><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"># 请填写语句，完成以下功能：<br># (<span class="hljs-number">1</span>) 创建角色client_manager和fund_manager<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">role</span> client_manager,fund_manager;<br><br># (<span class="hljs-number">2</span>) 授予client_manager对client表拥有<span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span>的权限；<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span> <span class="hljs-keyword">on</span> finance.client <span class="hljs-keyword">to</span> client_manager;<br><br># (<span class="hljs-number">3</span>) 授予client_manager对bank_card表拥有查询除银行卡余额外的<span class="hljs-keyword">select</span>权限；<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>(b_number,b_type,b_c_id) <span class="hljs-keyword">on</span> finance.bank_card <span class="hljs-keyword">to</span> client_manager;<br><br># (<span class="hljs-number">4</span>) 授予fund_manager对fund表的<span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span>权限；<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span>,<span class="hljs-keyword">insert</span>,<span class="hljs-keyword">update</span> <span class="hljs-keyword">on</span> finance.fund <span class="hljs-keyword">to</span> fund_manager;<br><br># (<span class="hljs-number">5</span>) 将client_manager的权限授予用户tom和jerry；<br><span class="hljs-keyword">grant</span> client_manager <span class="hljs-keyword">to</span> tom,jerry;<br><br># (<span class="hljs-number">6</span>) 将fund_manager权限授予用户Cindy.<br><span class="hljs-keyword">grant</span> fund_manager <span class="hljs-keyword">to</span> Cindy;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>授权与撤销授权</title>
    <link href="/2022/11/16/%E6%8E%88%E6%9D%83%E4%B8%8E%E6%92%A4%E9%94%80%E6%8E%88%E6%9D%83/"/>
    <url>/2022/11/16/%E6%8E%88%E6%9D%83%E4%B8%8E%E6%92%A4%E9%94%80%E6%8E%88%E6%9D%83/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在稍微大一点的公司里面都是有着明显的权限管理，特别是操作数据库这样重要的东西，万一你要是一不小心删库跑路了，就麻烦了。</p><p>所以在公司里面一般一个项目都会创建一个专门的用户，并指定其权限只能对某一个数据库进行操作，下面本实训我们就一起来学习如何对用户进行权限的控制。</p><h2 id="数据库授权"><a href="#数据库授权" class="headerlink" title="数据库授权"></a>数据库授权</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：新建数据库登录用户，并给用户设置权限。</p><p>相关知识<br>为了完成本关任务，你需要掌握：</p><ol><li>用户管理；</li><li>数据库授权方式。</li></ol><h4 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h4><p>一般安装了 <code>MySQL</code> 之后都只有一个超级管理权限的用户<code>root</code>，且<code>root</code>限制只能在数据库本机上使用，实际上 <code>MySQL</code> 是支持多用户登录的，下面我们一起来学习对用户的管理。</p><p>首先我们通过 <code>MySQL</code> 默认的<code>mysql</code>数据库中<code>user</code>表查询一下用户情况：<br><img src="/img/MySQL/%E6%8E%88%E6%9D%83%E4%B8%8E%E6%92%A4%E9%94%80%E6%8E%88%E6%9D%83/1-1.png"></p><p>可以看到只有<code>root</code>用户，下面我们来看看如何新建用户以及对用户的一些常用操作：<br>&#96; 创建用户</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;允许登录的主机地址&#x27;</span> identified <span class="hljs-keyword">by</span> 密码;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">#创建指定ip为 192.168.1.1 的lyn用户登录<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;lyn&#x27;</span>@<span class="hljs-string">&#x27;192.168.1.1&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>#创建指定ip为 192.168.1 开头的lyn用户登录<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;lyn&#x27;</span>@<span class="hljs-string">&#x27;192.168.1.%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br>#创建指定任何ip的lyn用户登录<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;lyn&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;123&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/img/MySQL/%E6%8E%88%E6%9D%83%E4%B8%8E%E6%92%A4%E9%94%80%E6%8E%88%E6%9D%83/1-2.png"></p><ul><li><p>删除用户</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;允许登录的主机地址&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>修改用户名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">rename</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;IP地址&#x27;</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;新用户名&#x27;</span>@<span class="hljs-string">&#x27;IP地址&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p>修改密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;IP地址&#x27;</span> = <span class="hljs-keyword">Password</span>(<span class="hljs-string">&#x27;新密码&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="授权方式"><a href="#授权方式" class="headerlink" title="授权方式"></a>授权方式</h4><p>有了新用户，我们就需要考虑权限问题了，而新创建的用户默认情况下是<strong>什么权限都没有</strong>的，想要操作数据库，就必须进行授权。</p><p>查看权限：<code>show grants for &#39;用户&#39;@&#39;IP地址&#39;</code><br><img src="/img/MySQL/%E6%8E%88%E6%9D%83%E4%B8%8E%E6%92%A4%E9%94%80%E6%8E%88%E6%9D%83/1-3.png"></p><p>上图中<code>ALL</code>表示允许做任何事，而<code>USAGE</code>则表示只允许登录，其他什么也做不了。下面切换为用户<code>lyn</code>登录，并试图创建数据库：<br><img src="/img/MySQL/%E6%8E%88%E6%9D%83%E4%B8%8E%E6%92%A4%E9%94%80%E6%8E%88%E6%9D%83/1-4.png"></p><p>可以看到错误提示我们没有权限，不能操作，其实在稍微大一点的公司里面都是有着明显的权限管理。特别是操作数据库这样重要的东西，万一你要是一不小心删库了，就麻烦了，所以在公司里面一般一个项目都会创建一个专门的用户指定其权限只能控制某一个数据库进行操作，下面我们一起来为<code>lyn</code>用户设置权限。</p><p><code>MySQL</code> 的权限命令是<code>grant</code>，语法为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">grant</span> 权限列表 <span class="hljs-keyword">on</span> 库.表 <span class="hljs-keyword">to</span> 用户名@<span class="hljs-string">&#x27;ip&#x27;</span> identified <span class="hljs-keyword">by</span> &quot;密码&quot;;<br></code></pre></td></tr></table></figure><ul><li>示例1：<br><img src="/img/MySQL/%E6%8E%88%E6%9D%83%E4%B8%8E%E6%92%A4%E9%94%80%E6%8E%88%E6%9D%83/1-5.png"></li></ul><p>上面的语句表示将所有数据库的所有权限授权给<code>lyn</code>这个用户，允许<code>lyn</code>用户在<code>123.123.123.123</code>这个 <code>IP</code> 进行远程登录，并设置<code>lyn</code>用户的登录密码为<code>123456</code>。</p><ul><li>示例2：<br><img src="/img/MySQL/%E6%8E%88%E6%9D%83%E4%B8%8E%E6%92%A4%E9%94%80%E6%8E%88%E6%9D%83/1-6.png"></li></ul><p>上面语句表示将<code>mysql_db</code>数据库中的<code>sys_user</code>表的查询权限给<code>qjh</code>用户。最后查看权限中也表示该用户对<code>mysql_db</code>数据库<code>sys_user</code>表有查询权限。</p><p><strong>注意</strong>：授权操作只能是<code>root</code>用户来操作；<code>grant</code>给用户权限后，该用户只有重新连接 <code>MySQL</code> 数据库，权限才能生效；授权后一定要刷新权限，使权限立即生效：<code>FLUSH PRIVILEGES</code>;</p><p>另外在使用<code>grant</code>给用户添加权限时，权限会自动叠加，不会覆盖之前授予的权限，比如你先给用户添加一个<code>select</code>权限，后来又给用户添加了一个<code>insert</code>权限，那么该用户就同时拥有了<code>select</code>和<code>insert</code>权限。</p><p>更多用户详情的权限列表请参考 <a href="https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html">MySQL 官网说明</a> 。</p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器中编写 <code>SQL</code>，将用户<code>casual_user@&#39;localhost&#39;</code>的密码修改为<code>123456</code>，并给其授所有数据库的“增改查”的权限。（连接数据库的用户名为：<code>root</code>，密码为：<code>123123</code>。）</p><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>你只需做权限修改，平台会对你编写的<code>SQL</code>进行测试：</p><p>提示：对用户的权限控制，一条 <code>SQL</code> 的权限列表可含有多个，也就是可以使用一条 <code>SQL</code> 命令来控制用户的多个权限。</p><p>预期输出：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+-------------+</span>-----------<span class="hljs-code">+-------------------------------------------+</span><br><span class="hljs-section">| user        | host      | password                                  |</span><br><span class="hljs-section">+-------------+-----------+-------------------------------------------+</span><br><span class="hljs-section">| casual_user | localhost | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |</span><br><span class="hljs-section">+-------------+-----------+-------------------------------------------+</span><br><span class="hljs-code">+-------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="hljs-section">| Grants for casual_user@localhost                                                                                                    |</span><br><span class="hljs-section">+-------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="hljs-section">| GRANT SELECT, INSERT, UPDATE ON *.* TO &#x27;casual_user&#x27;@&#x27;localhost&#x27; IDENTIFIED BY PASSWORD &#x27;*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9&#x27; |</span><br><span class="hljs-section">+-------------------------------------------------------------------------------------------------------------------------------------+</span><br></code></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>##########  开始编写 SQL  ##########<br>set password for <span class="hljs-string">&#x27;casual_user&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> = password(<span class="hljs-string">&#x27;123456&#x27;</span>);<br>grant select,insert,update on *.* to casual_user@<span class="hljs-string">&#x27;localhost&#x27;</span> identified by <span class="hljs-string">&#x27;123456&#x27;</span>;<br><br></code></pre></td></tr></table></figure><h2 id="数据库撤销权限"><a href="#数据库撤销权限" class="headerlink" title="数据库撤销权限"></a>数据库撤销权限</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：撤销用户的权限。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握如何撤销权限。</p><h4 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h4><p>上一章节我们学习了如何给用户授权，那么需要撤回授权，我们有没有办法呢？</p><p><code>MySQL</code> 同样也提供了撤销权限的方法 ——<code>revoke</code>，<code>revoke</code>跟<code>grant</code>语法差不多，只需要把关键字<code>to</code>换成<code>from</code>即可，并且<code>revoke</code>语句中不需要跟密码设置，具体如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">revoke</span> 权限列表 <span class="hljs-keyword">on</span> 库.表 <span class="hljs-keyword">from</span> 用户名@<span class="hljs-string">&#x27;ip&#x27;</span>;<br></code></pre></td></tr></table></figure><p>和<code>grant</code>一样，<code>revoke</code>用户权限后，该用户只有重新连接 <code>MySQL</code> 数据库，权限才能生效。</p><p><strong>注意</strong>：<code>revoke</code>可以回收所有权限，也可以回收部分权限，且授权只是收回权限，用户仍可以登录。</p><p>示例：<br><img src="/img/MySQL/%E6%8E%88%E6%9D%83%E4%B8%8E%E6%92%A4%E9%94%80%E6%8E%88%E6%9D%83/2-1.png"></p><p>上面的撤回语句表示将用户<code>qjh@&#39;localhost&#39;</code>在<code>mysql_db</code>数据库中对<code>sys_user</code>表的删除<code>delete</code>权限撤销了，即该用户不对<code>mysql_db</code>数据库进行删除操作了。</p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧编辑器中编写如下要求的 <code>SQL</code>：</p><ul><li>将用户<code>user1</code>对数据库<code>mydb1</code>中的<code>table1</code>和<code>table2</code>的所有权限收回</li><li>将用户<code>user2</code>对数据库<code>mydb2</code>中的所有表（<code>mydb2.*</code>）的增加、查询、更新、删除、创建、修改属性权限收回</li></ul><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">+<span class="hljs-comment">--------------------------------------------------------------------------------------------------------------+</span><br>| Grants <span class="hljs-keyword">for</span> user1@localhost                                                                                   |<br>+<span class="hljs-comment">--------------------------------------------------------------------------------------------------------------+</span><br>| <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">USAGE</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;user1&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-string">&#x27;*23AE809DDACAF96AF0FD78ED04B6A265E05AA257&#x27;</span> |<br>| <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> `mydb1`.`table3` <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;user1&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>                                              |<br>+<span class="hljs-comment">--------------------------------------------------------------------------------------------------------------+</span><br>+<span class="hljs-comment">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br>| Grants <span class="hljs-keyword">for</span> user2@localhost                                                                                                                                                              |<br>+<span class="hljs-comment">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br>| <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">USAGE</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;user2&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-keyword">PASSWORD</span> <span class="hljs-string">&#x27;*23AE809DDACAF96AF0FD78ED04B6A265E05AA257&#x27;</span>                                                                            |<br>| <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">DROP</span>, <span class="hljs-keyword">REFERENCES</span>, <span class="hljs-keyword">INDEX</span>, <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TEMPORARY</span> <span class="hljs-keyword">TABLES</span>, <span class="hljs-keyword">LOCK</span> <span class="hljs-keyword">TABLES</span>, <span class="hljs-keyword">EXECUTE</span>, <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span>, <span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">VIEW</span>, <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">ROUTINE</span>, <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">ROUTINE</span>, EVENT, <span class="hljs-keyword">TRIGGER</span> <span class="hljs-keyword">ON</span> `mydb2`.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;user2&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> |<br>+<span class="hljs-comment">-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean">##########  开始编写 SQL  ########<br><br>revoke insert,select,update,delete,create,alter on mydb2.* <span class="hljs-keyword">from</span> user2@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br><br><br>revoke all  on mydb1.table1 <span class="hljs-keyword">from</span> user1@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br>revoke all  on mydb1.table2 <span class="hljs-keyword">from</span> user1@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>并发程序设计实验指导</title>
    <link href="/2022/11/16/%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC/"/>
    <url>/2022/11/16/%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AE%9E%E9%AA%8C%E6%8C%87%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>并发程序设计的理解和控制是高级程序员必须熟练掌握的一项编程技术。操作系统提出了一些并发进程的同步机制，但在具体的应用中，还要依靠程序员的精心设计来实现。</p><p>主要内容如下：<br>第八章 并发程序设计实验指导</p><ul><li>一、实验工具BACI及其应用<ul><li>1.BACC基础</li><li>2.BACC的安装</li><li>3.BACC的使用</li></ul></li></ul><div class="row">    <embed src="/pdf/操作系统/并发程序设计实验指导.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-swQwiUxE" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-swQwiUxE"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "枫",              author: "周杰伦",              url: "/music/周杰伦-枫.flac",              pic: "/music/图片/十一月的萧邦.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>查询、索引和完整性</title>
    <link href="/2022/11/16/%E6%9F%A5%E8%AF%A2%E3%80%81%E7%B4%A2%E5%BC%95%E5%92%8C%E5%AE%8C%E6%95%B4%E6%80%A7/"/>
    <url>/2022/11/16/%E6%9F%A5%E8%AF%A2%E3%80%81%E7%B4%A2%E5%BC%95%E5%92%8C%E5%AE%8C%E6%95%B4%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>MySQL</code>是目前最流行的关系型<code>DBMS</code>，由瑞典<code>MySQL AB</code> 公司开发，目前属于 <code>Oracle</code> 旗下产品。<code>MySQL</code>具有性能高、成本低、可靠性好、开放源码等特点，广泛应用于网站开发和移动应用开发，在科学研究中的应用也极其广泛。</p><p>通过实验可以家熟悉和掌握以下内容：</p><ul><li>掌握<code>SELECT</code>语句的基本语法</li><li>掌握子查询、连接查询的表示方法</li><li>掌握数据汇总的方法</li><li>掌握<code>GROUP BY和ORDER BY</code>子句的作用和使用方法</li><li>掌握视图的使用方法</li><li>掌握索引的使用方法</li><li>理解数据完整性的概念及分类</li><li>掌握各种数据完整性的实现方法</li></ul><h2 id="基本查询的学习"><a href="#基本查询的学习" class="headerlink" title="基本查询的学习"></a>基本查询的学习</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关的应用场景是企业员工数据库的查询。本关你将自己动手完成对一个真实的员工数据库<code>YGGL</code>的查询：</p><ul><li>查找财务部年龄不低于所有研发部雇员年龄的雇员姓名、编号和性别。</li><li>查找财务部收入在<code>5200</code>元以上的雇员姓名及其薪水收入支出情况。</li><li>上述查询功能需要你掌握<code>SELECT</code>语句的基本语法、掌握子查询、连接查询的表示方法。下面就是对这些内容的详细教程，请先仔细阅读。</li></ul><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><h4 id="查询语句SELECT"><a href="#查询语句SELECT" class="headerlink" title="查询语句SELECT"></a>查询语句SELECT</h4><p>以下是<code>MySQL</code>数据库中查询数据通用的<code>SELECT</code>语法：<br><code>SELECT column_name1,column_name2 FROM table_name [WHERE Clause] [OFFSET M ] [LIMIT N]</code></p><ul><li>查询语句中可以指定一个或者多个表，表之间使用逗号,分割，并使用<code>WHERE</code>语句来设定查询条件</li><li><code>SELECT</code>命令可以读取一条或者多条记录</li><li>可以使用星号*来代替字段，返回表所有字段的数据</li><li>可以使用<code>LIMIT</code>属性来设定返回的记录数。</li></ul><h4 id="命令行的操作"><a href="#命令行的操作" class="headerlink" title="命令行的操作"></a>命令行的操作</h4><p>下面几个表来自于我们用于实验的员工管理系统的数据库<code>YGGL</code>，通过命令行新建数据库数据表并插入数据吧！<br><code>CREATE DATABASE YGGL;</code></p><p>使用数据库：<br><code>use YGGL;</code></p><p>员工信息表<code>emp</code>表结构：</p><table><thead><tr><th>列名</th><th>数据类型</th><th>长度</th><th>是否允许为空值</th><th>说明</th></tr></thead><tbody><tr><td>eid</td><td>char</td><td>6</td><td>否</td><td>员工编号，主键</td></tr><tr><td>ename</td><td>char</td><td>10</td><td>否</td><td>姓名</td></tr><tr><td>birth</td><td>date</td><td></td><td>否</td><td>生日</td></tr><tr><td>sex</td><td>int</td><td>1</td><td>否</td><td>性别</td></tr><tr><td>addr</td><td>char</td><td>20</td><td>是</td><td>地址</td></tr><tr><td>zip</td><td>char</td><td>6</td><td>是</td><td>邮编</td></tr><tr><td>tel</td><td>char</td><td>12</td><td>是</td><td>电话号码</td></tr><tr><td>did</td><td>char</td><td>3</td><td>否</td><td>部门编号，外键</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> emp<br>(<br>   eid    <span class="hljs-type">char</span>(<span class="hljs-number">6</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>   ename  <span class="hljs-type">char</span>(<span class="hljs-number">10</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   birth  <span class="hljs-type">date</span>         <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   sex    <span class="hljs-type">int</span>(<span class="hljs-number">1</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   addr   <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)     <span class="hljs-keyword">NULL</span>, <br>   zip    <span class="hljs-type">char</span>(<span class="hljs-number">6</span>)      <span class="hljs-keyword">NULL</span>,<br>   tel    <span class="hljs-type">char</span>(<span class="hljs-number">12</span>)     <span class="hljs-keyword">NULL</span>,<br>   did    <span class="hljs-type">char</span>(<span class="hljs-number">3</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><p>数据样本：</p><table><thead><tr><th>eid</th><th>ename</th><th>birth</th><th>sex</th><th>addrzip</th><th></th><th>tel</th><th>did</th></tr></thead><tbody><tr><td>001</td><td>wl</td><td>1971-01-23</td><td>1</td><td>zsl</td><td>21000312345668</td><td>2</td><td></td></tr><tr><td>008</td><td>wrh</td><td>1981-03-28</td><td>1</td><td>bjdl</td><td>21000112345621</td><td>1</td><td></td></tr><tr><td>010</td><td>wxr</td><td>1987-12-09</td><td>1</td><td>spl</td><td>21000612345661</td><td>1</td><td></td></tr><tr><td>018</td><td>ll</td><td>1965-07-30</td><td>0</td><td>zsdl</td><td>21000212345601</td><td>1</td><td></td></tr><tr><td>201</td><td>lm</td><td>1977-10-18</td><td>1</td><td>hjl</td><td>21001312345608</td><td>5</td><td></td></tr><tr><td>208</td><td>zj</td><td>1970-09-28</td><td>1</td><td>plx</td><td>21000412345617</td><td>5</td><td></td></tr><tr><td>991</td><td>zm</td><td>1984-08-10</td><td>0</td><td>zsl</td><td>21000312345622</td><td>3</td><td></td></tr><tr><td>006</td><td>zsb</td><td>1979-10-01</td><td>1</td><td>jfl</td><td>21001012345618</td><td>5</td><td></td></tr><tr><td>678</td><td>lt</td><td>1982-04-02</td><td>1</td><td>zsbl</td><td>21000812345636</td><td>3</td><td></td></tr><tr><td>566</td><td>lym</td><td>1973-09-20</td><td>1</td><td>rhl</td><td>21000112345691</td><td>4</td><td></td></tr><tr><td>759</td><td>yf</td><td>1983-11-18</td><td>1</td><td>bjxl</td><td>21000212345601</td><td>4</td><td></td></tr><tr><td>209</td><td>cll</td><td>1974-09-03</td><td>0</td><td>hzl</td><td>21001812345658</td><td>4</td><td></td></tr></tbody></table><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs 1c">insert into emp values<br>(&#x27;001&#x27;,&#x27;wl&#x27;,&#x27;<span class="hljs-number">1971-01-23</span>&#x27;,<span class="hljs-number">1</span>,&#x27;zsl&#x27;,&#x27;<span class="hljs-number">210003</span>&#x27;,&#x27;<span class="hljs-number">12345668</span>&#x27;,&#x27;2&#x27;),<br>(&#x27;008&#x27;,&#x27;wrh&#x27;,&#x27;<span class="hljs-number">1981-03-28</span>&#x27;,<span class="hljs-number">1</span>,&#x27;bjdl&#x27;,&#x27;<span class="hljs-number">210001</span>&#x27;,&#x27;<span class="hljs-number">12345621</span>&#x27;,&#x27;1&#x27;),<br>(&#x27;010&#x27;,&#x27;wxr&#x27;,&#x27;<span class="hljs-number">1987-12-09</span>&#x27;,<span class="hljs-number">1</span>,&#x27;spl&#x27;,&#x27;<span class="hljs-number">210006</span>&#x27;,&#x27;<span class="hljs-number">12345661</span>&#x27;,&#x27;1&#x27;),<br>(&#x27;018&#x27;,&#x27;ll&#x27;,&#x27;<span class="hljs-number">1965-07-30</span>&#x27;,<span class="hljs-number">0</span>,&#x27;zsdl&#x27;,&#x27;<span class="hljs-number">210002</span>&#x27;,&#x27;<span class="hljs-number">12345601</span>&#x27;,&#x27;1&#x27;),<br>(&#x27;201&#x27;,&#x27;lm&#x27;,&#x27;<span class="hljs-number">1977-10-18</span>&#x27;,<span class="hljs-number">1</span>,&#x27;hjl&#x27;,&#x27;<span class="hljs-number">210013</span>&#x27;,&#x27;<span class="hljs-number">12345608</span>&#x27;,&#x27;5&#x27;),<br>(&#x27;208&#x27;,&#x27;zj&#x27;,&#x27;<span class="hljs-number">1970-09-28</span>&#x27;,<span class="hljs-number">1</span>,&#x27;plx&#x27;,&#x27;<span class="hljs-number">210004</span>&#x27;,&#x27;<span class="hljs-number">12345617</span>&#x27;,&#x27;5&#x27;),<br>(&#x27;991&#x27;,&#x27;zm&#x27;,&#x27;<span class="hljs-number">1984-08-10</span>&#x27;,<span class="hljs-number">0</span>,&#x27;zsl&#x27;,&#x27;<span class="hljs-number">210003</span>&#x27;,&#x27;<span class="hljs-number">12345622</span>&#x27;,&#x27;3&#x27;),<br>(&#x27;006&#x27;,&#x27;zsb&#x27;,&#x27;<span class="hljs-number">1979-10-01</span>&#x27;,<span class="hljs-number">1</span>,&#x27;jfl&#x27;,&#x27;<span class="hljs-number">210010</span>&#x27;,&#x27;<span class="hljs-number">12345618</span>&#x27;,&#x27;5&#x27;),<br>(&#x27;678&#x27;,&#x27;lt&#x27;,&#x27;<span class="hljs-number">1982-04-02</span>&#x27;,<span class="hljs-number">1</span>,&#x27;zsbl&#x27;,&#x27;<span class="hljs-number">210008</span>&#x27;,&#x27;<span class="hljs-number">12345636</span>&#x27;,&#x27;3&#x27;),<br>(&#x27;566&#x27;,&#x27;lym&#x27;,&#x27;<span class="hljs-number">1973-09-20</span>&#x27;,<span class="hljs-number">1</span>,&#x27;rhl&#x27;,&#x27;<span class="hljs-number">210001</span>&#x27;,&#x27;<span class="hljs-number">12345691</span>&#x27;,&#x27;4&#x27;),<br>(&#x27;759&#x27;,&#x27;yf&#x27;,&#x27;<span class="hljs-number">1983-11-18</span>&#x27;,<span class="hljs-number">1</span>,&#x27;bjxl&#x27;,&#x27;<span class="hljs-number">210002</span>&#x27;,&#x27;<span class="hljs-number">12345601</span>&#x27;,&#x27;4&#x27;),<br>(&#x27;209&#x27;,&#x27;cll&#x27;,&#x27;<span class="hljs-number">1974-09-03</span>&#x27;,<span class="hljs-number">0</span>,&#x27;hzl&#x27;,&#x27;<span class="hljs-number">210018</span>&#x27;,&#x27;<span class="hljs-number">12345658</span>&#x27;,&#x27;4&#x27;);<br></code></pre></td></tr></table></figure><p>部门信息表<code>dept</code>表结构：</p><table><thead><tr><th>列名</th><th>数据类型</th><th>长度</th><th>是否允许为空值</th><th>说明</th></tr></thead><tbody><tr><td>did</td><td>char</td><td>3</td><td>否</td><td>部门编号，主键</td></tr><tr><td>dname</td><td>char</td><td>20</td><td>否</td><td>部门名</td></tr><tr><td>note</td><td>varchar</td><td>100</td><td>是</td><td>备注</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept<br>(<br>   did    <span class="hljs-type">char</span>(<span class="hljs-number">3</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>   dname  <span class="hljs-type">char</span>(<span class="hljs-number">20</span>)     <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   note   <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><p>数据样本：</p><table><thead><tr><th>did</th><th>dname</th><th>note</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>cwb</td><td>NULL</td><td>财务部</td></tr><tr><td>2</td><td>rlzyb</td><td>NULL</td><td>人力资源部</td></tr><tr><td>3</td><td>jlbgs</td><td>NULL</td><td>经理办公室</td></tr><tr><td>4</td><td>yfb</td><td>NULL</td><td>研发部</td></tr><tr><td>5</td><td>scb</td><td>NULL</td><td>市场部</td></tr></tbody></table><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> dept <span class="hljs-keyword">values</span><br>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;cwb&#x27;</span>,<span class="hljs-literal">NULL</span>),<br>(<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;rlzyb&#x27;</span>,<span class="hljs-literal">NULL</span>),<br>(<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;jlbgs&#x27;</span>,<span class="hljs-literal">NULL</span>),<br>(<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;yfb&#x27;</span>,<span class="hljs-literal">NULL</span>),<br>(<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;scb&#x27;</span>,<span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>工资表<code>sal</code>表结构：</p><table><thead><tr><th>列名</th><th>数据类型</th><th>长度</th><th>是否允许为空值</th><th>说明</th></tr></thead><tbody><tr><td>eid</td><td>char</td><td>6</td><td>否</td><td>员工编号，主键</td></tr><tr><td>income</td><td>int</td><td>8</td><td>否</td><td>收入</td></tr><tr><td>outcome</td><td>int</td><td>8</td><td>否</td><td>支出</td></tr></tbody></table><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> sal<br>(<br>   eid     <span class="hljs-type">char</span>(<span class="hljs-number">6</span>)      <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br>   income  <span class="hljs-type">int</span>(<span class="hljs-number">8</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>   outcome <span class="hljs-type">int</span>(<span class="hljs-number">8</span>)       <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><p>数据样本：</p><table><thead><tr><th>eid</th><th>income</th><th>outcome</th></tr></thead><tbody><tr><td>001</td><td>5100</td><td>1123</td></tr><tr><td>008</td><td>4582</td><td>1088</td></tr><tr><td>201</td><td>5569</td><td>1185</td></tr><tr><td>006</td><td>4987</td><td>1079</td></tr><tr><td>209</td><td>5066</td><td>1108</td></tr><tr><td>566</td><td>5980</td><td>1210</td></tr><tr><td>991</td><td>6259</td><td>1281</td></tr><tr><td>010</td><td>5860</td><td>1198</td></tr><tr><td>018</td><td>5347</td><td>1180</td></tr><tr><td>759</td><td>5531</td><td>1199</td></tr><tr><td>678</td><td>5240</td><td>1121</td></tr><tr><td>208</td><td>4980</td><td>1100</td></tr></tbody></table><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> sal <span class="hljs-keyword">values</span><br>(<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-number">5100</span>,<span class="hljs-number">1123</span>),<br>(<span class="hljs-string">&#x27;008&#x27;</span>,<span class="hljs-number">4582</span>,<span class="hljs-number">1088</span>),<br>(<span class="hljs-string">&#x27;201&#x27;</span>,<span class="hljs-number">5569</span>,<span class="hljs-number">1185</span>),<br>(<span class="hljs-string">&#x27;006&#x27;</span>,<span class="hljs-number">4987</span>,<span class="hljs-number">1079</span>),<br>(<span class="hljs-string">&#x27;209&#x27;</span>,<span class="hljs-number">5066</span>,<span class="hljs-number">1108</span>),<br>(<span class="hljs-string">&#x27;566&#x27;</span>,<span class="hljs-number">5980</span>,<span class="hljs-number">1210</span>),<br>(<span class="hljs-string">&#x27;991&#x27;</span>,<span class="hljs-number">6259</span>,<span class="hljs-number">1281</span>),<br>(<span class="hljs-string">&#x27;010&#x27;</span>,<span class="hljs-number">5860</span>,<span class="hljs-number">1198</span>),<br>(<span class="hljs-string">&#x27;018&#x27;</span>,<span class="hljs-number">5347</span>,<span class="hljs-number">1180</span>),<br>(<span class="hljs-string">&#x27;759&#x27;</span>,<span class="hljs-number">5531</span>,<span class="hljs-number">1199</span>),<br>(<span class="hljs-string">&#x27;678&#x27;</span>,<span class="hljs-number">5240</span>,<span class="hljs-number">1121</span>),<br>(<span class="hljs-string">&#x27;208&#x27;</span>,<span class="hljs-number">4980</span>,<span class="hljs-number">1100</span>);<br></code></pre></td></tr></table></figure><p>查询每个雇员的所有数据：<br><code>select * from emp;</code></p><p>查询每个雇员的地址和电话：<br><code>select ename,addr,tel from emp;</code></p><p>查询<code>eid</code>为<code>001</code>的雇员地址和电话：<br><code>select ename,addr,tel from emp where eid=&#39;001&#39;;</code></p><p>查询<code>emp</code>中所有女雇员的地址和电话，使用<code>as</code>子句将结果中各列的标题分别指定为地址和电话：<br><code>select ename as fname,addr as faddr,tel as ftel from emp where sex=0;</code></p><p>计算每个雇员的实际收入：<br><code>select did,income-outcome as money from sal;</code></p><p>找出所有姓名是<code>w</code>开头的雇员的部门号：<br><code>select did from emp where name like &#39;w%&#39;;</code></p><ul><li><code>%</code>表示任意符号</li></ul><p>找出所有收入在<code>5000-6000</code>之间的雇员号码：<br><code>select eid from sal where income between 5000 and 6000;</code></p><ul><li><code>BETWEEN</code>运算符用于<code>WHERE</code>表达式中，选取介于两个值之间的数据范围。<code>BETWEEN</code>同<code>AND</code>一起搭配使用。通常<code>value1</code>应该小于 <code>value2</code>。当 <code>BETWEEN</code> 前面加上<code>NOT</code>运算符时，表示与<code>BETWEEN</code>相反的意思，即选取这个范围之外的值。</li></ul><h4 id="子查询的使用"><a href="#子查询的使用" class="headerlink" title="子查询的使用"></a>子查询的使用</h4><p>所谓子查询，即在查询语句中内嵌其他查询语句。下面，我们仍继续在命令行的操作中学习。</p><p>查找在<code>cwb</code>工作的雇员情况：<br><code>select * from emp where did=(select did from dept where dname=&#39;cwb&#39;);</code></p><h4 id="连接查询的使用"><a href="#连接查询的使用" class="headerlink" title="连接查询的使用"></a>连接查询的使用</h4><p>比如查询每个雇员的薪水情况，但是我们要返回雇员的姓名，而在<code>sal</code>表中没有雇员姓名，这个时候就需要我们通过员工编号连接<code>emp</code>和<code>sal</code>两张表。<br><code>select emp.ename,sal.income from emp,sal where emp.eid=sal.eid;</code></p><h4 id="一些关键字"><a href="#一些关键字" class="headerlink" title="一些关键字"></a>一些关键字</h4><ul><li><code>any</code>关键字：<br>假设<code>any</code>内部的查询语句返回的结果个数是三个，那么：<br><code>select ...from ... where a &gt; any(...)</code><br>等价于<br><code>select ...from ... where a &gt; result1 or a &gt; result2 or a &gt; result3</code></li></ul><p><code>ALL</code>关键字与<code>any</code>关键字类似，但其含义不同，相当于上面的<code>or</code>改成<code>and</code>。<code>some</code>关键字和<code>any</code>关键字是一样的功能。</p><p><code>IN</code>运算符用于WHERE表达式中，以列表项的形式支持多个选择<br><code>WHERE column IN (value1,value2,...)</code><br><code>WHERE column NOT IN (value1,value2,...)</code><br>当<code>IN</code>前面加上<code>NOT</code>运算符时，表示与<code>IN</code>相反的意思，即不在这些列表项内选择。</p><ul><li><code>UNION</code>操作符用于连接两个以上的<code>SELECT</code>语句的结果组合到一个结果集合中。<figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> expression_1,expression_2,...,expression_n <span class="hljs-keyword">FROM</span> tables [<span class="hljs-keyword">WHERE</span> conditions]<br><span class="hljs-keyword">UNION</span> [<span class="hljs-keyword">ALL</span> | <span class="hljs-keyword">DISTINCT</span>]<br><span class="hljs-keyword">SELECT</span> expression_1,expression_2,...,expression_n <span class="hljs-keyword">FROM</span> tables[<span class="hljs-keyword">WHERE</span> conditions];<br></code></pre></td></tr></table></figure>参数<code>expression_1</code>, <code>expression_2</code>, … <code>expression_n</code>是要检索的列，<code>tables</code>是要检索的数据表，<code>WHERE conditions</code>是检索条件，<code>DISTINCT</code>是删除结果集中重复的数据。默认情况下 <code>UNION</code>操作符已经删除了重复数据，所以<code>DISTINCT</code>修饰符对结果没啥影响。而<code>ALL</code>可以返回所有结果集，包含重复数据。</li></ul><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧代码窗口区域的指定位置编写查询语句，实现对数据库<code>YGGL</code>(包括表<code>emp</code>、<code>dept</code>和<code>sal</code>)的相关查询：</p><ul><li>查询一：使用子查询的方法，查找财务部<code>cwb</code>年龄不低于所有研发部<code>yfb</code>雇员年龄的雇员姓名<code>ename</code>、编号<code>eid</code>和性别<code>sex</code>。</li><li>查询二：使用连接查询的方式，查找财务部<code>cwb</code>收入<code>income</code>在<code>5200</code>元以上的雇员姓名<code>ename</code>及其薪水收入<code>income</code>支出<code>outcome</code>情况。</li></ul><h3 id="评测说明"><a href="#评测说明" class="headerlink" title="评测说明"></a>评测说明</h3><p>平台将自动编译执行你输入的<code>MySQL</code>语句，并将查询结果和正确结果进行比对。<br>请注意语句的格式：）</p><p>特别提醒：<code>SQL</code>文件的代码不能有空行，否则会报语法错误！</p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">//请在下面补齐查询一的MySQL语句</span><br><span class="hljs-comment">/*********begin*********/</span><br><span class="hljs-keyword">select</span> ename,eid,<span class="hljs-function">sex <span class="hljs-keyword">from</span> emp</span><br><span class="hljs-function">    <span class="hljs-keyword">where</span> did <span class="hljs-title">in</span></span><br><span class="hljs-function">    (<span class="hljs-params"><span class="hljs-keyword">select</span> did <span class="hljs-keyword">from</span> dept</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">where</span> dname=<span class="hljs-string">&#x27;cwb&#x27;</span></span></span><br><span class="hljs-params"><span class="hljs-function">    </span>)</span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-comment">/*********end*********/</span></span><br><span class="hljs-function">    <span class="hljs-keyword">and</span></span><br><span class="hljs-function">    birth&lt;</span>=all<br>        (<span class="hljs-function"><span class="hljs-keyword">select</span> birth <span class="hljs-keyword">from</span> emp</span><br><span class="hljs-function">            <span class="hljs-keyword">where</span> did <span class="hljs-title">in</span></span><br><span class="hljs-function">                (<span class="hljs-params"><span class="hljs-keyword">select</span> did <span class="hljs-keyword">from</span> dept</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-keyword">where</span> dname=<span class="hljs-string">&#x27;yfb&#x27;</span></span></span><br><span class="hljs-params"><span class="hljs-function">                </span>)</span><br><span class="hljs-function">        )</span>;<br><br><span class="hljs-comment">//请在下面输入查询二的MySQL语句</span><br><span class="hljs-comment">/*********begin*********/</span><br><span class="hljs-keyword">select</span> ename,income,outcome<br>    <span class="hljs-keyword">from</span> emp,sal,dept<br>    <span class="hljs-keyword">where</span> emp.eid=sal.eid <span class="hljs-keyword">and</span><br>        emp.did=dept.did <span class="hljs-keyword">and</span><br>        dname=<span class="hljs-string">&#x27;cwb&#x27;</span> <span class="hljs-keyword">and</span> income&gt;<span class="hljs-number">5200</span>;<br><br><span class="hljs-comment">/*********end*********/</span><br></code></pre></td></tr></table></figure><h2 id="深入学习查询语句"><a href="#深入学习查询语句" class="headerlink" title="深入学习查询语句"></a>深入学习查询语句</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关的应用场景是企业员工数据库的查询。上一关中简单的查询满足不了需求，比如：</p><ul><li>求财务部雇员的总人数；</li><li>求各部门的雇员数；</li><li>将各雇员的姓名按收入由低到高排列。</li><li>上述查询功能需要你掌握数据汇总、掌握<code>GROUP BY</code>和<code>ORDER BY</code>子句的作用和使用方法。下面就是对这些内容的详细教程，请先仔细阅读。</li></ul><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>首先我们还是使用命令行操作登录数据库系统，创建数据库<code>YGGL</code>、创建数据表<code>emp</code>、<code>dept</code>和<code>sal</code>并插入数据。</p><h4 id="MySQL聚集函数"><a href="#MySQL聚集函数" class="headerlink" title="MySQL聚集函数"></a>MySQL聚集函数</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列最大值</td></tr><tr><td>MIN()</td><td>返回某列最小值</td></tr><tr><td>AVG()</td><td>返回某列平均值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><p>求财务部雇员的平均收入：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> <span class="hljs-keyword">avg</span>(income) <span class="hljs-keyword">as</span> avgincome<br>    <span class="hljs-keyword">from</span> sal<br>    <span class="hljs-keyword">where</span> eid <span class="hljs-keyword">in</span><br>        (<span class="hljs-keyword">select</span> eid<br>            <span class="hljs-keyword">from</span> emp<br>                <span class="hljs-keyword">where</span> did=<br>                    (<span class="hljs-keyword">select</span> did<br>                        <span class="hljs-keyword">from</span> dept<br>                            <span class="hljs-keyword">where</span> dname=<span class="hljs-string">&#x27;cwb&#x27;</span>));<br></code></pre></td></tr></table></figure><h4 id="GROUP-BY-和-ORDER-BY-子句的使用"><a href="#GROUP-BY-和-ORDER-BY-子句的使用" class="headerlink" title="GROUP BY 和 ORDER BY 子句的使用"></a>GROUP BY 和 ORDER BY 子句的使用</h4><p><code>GROUP BY</code>语句根据一个或多个列对结果集进行分组。<br><code>SELECT column_name, function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name;</code></p><p>如果我们需要对读取的数据进行排序，我们就可以使用<code>MySQL</code>的<code>ORDER BY</code>子句来设定你想按哪个字段哪种方式来进行排序，再返回搜索结果。<br><code>SELECT field1, field2,...,fieldN table_name1,table_name2..., ORDER BY field1,[field2...] [ASC [DESC]]</code></p><ul><li>你可以设定多个字段来排序。</li><li>你可以使用 <code>ASC</code> （升序）或 <code>DESC</code>（降序） 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升序排列。</li><li>你可以添加 <code>WHERE...LIKE</code> 子句来设置条件。</li></ul><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧代码窗口区域的指定位置编写查询语句，实现对数据库<code>YGGL</code>(包括表<code>emp</code>、<code>dep</code>t和<code>sal</code>)的相关查询：</p><ul><li>查询一：求财务部雇员的总人数；</li><li>查询二：求各部门的雇员数；</li><li>查询三：将各雇员的姓名按收入由低到高排列（提示：使用连接查询）。</li></ul><p>评测说明<br>请在右侧代码窗口输入<code>MySQL</code>语句实现以上操作，平台将自动编译你输入的<code>MySQL</code>语句。<br>请注意语句的格式并且不要有空行哦：）</p><p>特别提醒：<code>SQL</code>文件的代码不能有空行，否则会报语法错误！</p><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//请在下面输入查询一的MySQL语句<br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*begin<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br>select count(ename) from emp where did=1;<br><br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*end<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br><br>//请在下面输入查询二的MySQL语句<br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*begin<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br>select count(e2.ename) from emp e1 join emp e2 where e1.ename=e2.ename group by e2.did;<br><br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*end<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br><br>//请在下面输入查询三的MySQL语句<br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*begin<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br>select ename from emp,sal where emp.eid=sal.eid order by income-outcome;<br><br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*end<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br></code></pre></td></tr></table></figure><h2 id="视图的创建和使用"><a href="#视图的创建和使用" class="headerlink" title="视图的创建和使用"></a>视图的创建和使用</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关的应用场景是企业员工数据库的查询。视图也是为了实现多样地查看表中的数据，比如限制财务部的经理只能看到财务部的信息。本关你创建<code>cx_sal</code>视图并使用该视图查看财务部雇员薪水情况。你需要掌握视图的使用方法~</p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>首先我们还是使用命令行操作登录数据库系统，创建数据库<code>YGGL</code>、创建数据表<code>emp</code>、<code>dept</code>和<code>sal</code>并插入数据。</p><p>现在，你输入以下代码查看数据库中表的情况：<br><code>show tables;</code></p><p>限制查看雇员的某些情况：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">replace</span> <span class="hljs-keyword">view</span> cx_emp<br><span class="hljs-keyword">as</span><br>    <span class="hljs-keyword">select</span> eid,ename,birth,sex,did<br>        <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><p>创建该视图后，我们可以在数据库中查看所有的表，是不是变成了下面这样？<br><img src="/img/MySQL/%E6%9F%A5%E8%AF%A2%E3%80%81%E7%B4%A2%E5%BC%95%E5%92%8C%E5%AE%8C%E6%95%B4%E6%80%A7/3-1.png"></p><p>接下来我们输入下面的命令来查看该视图：<br><code>select * from cx_emp;</code></p><p>为了了解视图的特性，我们向视图<code>cx_emp</code>中插入一条记录：</p><table><thead><tr><th>eid</th><th>ename</th><th>birth</th><th>sex</th><th>did</th></tr></thead><tbody><tr><td>888</td><td>zhj</td><td>1983-09-25</td><td>1</td><td>3</td></tr></tbody></table><p>现在，我们查看一下<code>emp</code>表，你是不是已经成功把这条记录插入到<code>emp</code>表中了呢？这就是视图，原表和视图之间是同步的。</p><p>接下来请你尝试以下操作。</p><p>将<code>zhj</code>从经理办公室（部门编号3）转到市场部（部门编号为<code>5</code>）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">update cx_emp <span class="hljs-built_in">set</span> <span class="hljs-attribute">did</span>=<span class="hljs-string">&#x27;5&#x27;</span><br>    where <span class="hljs-attribute">ename</span>=<span class="hljs-string">&#x27;zhj&#x27;</span>;<br></code></pre></td></tr></table></figure><p>请你再次查看<code>emp</code>表核查是否修改成功。</p><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>请你思考，我们想限制各部门的经理只能查找本部雇员的薪水情况该怎么操作呢？比如财务部，只让财务部的经理查看本部门雇员姓名和收入、支出情况。</p><p>请你创建<code>cx_sal</code>视图并使用该视图查看财务部雇员薪水情况<code>ename</code>、<code>income</code>和<code>outcome</code>。</p><p>评测说明<br>请在右侧代码窗口输入<code>MySQL</code>语句实现以上操作，平台将自动编译你输入的<code>MySQL</code>语句。<br>请注意语句的格式并且不要有空行哦：）</p><p>特别提醒：<code>SQL</code>文件的代码不能有空行，否则会报语法错误！</p><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//请在下面输入创建cx<span class="hljs-emphasis">_sal的视图的MySQL语句</span><br><span class="hljs-emphasis">/<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*begin<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*/</span><br><span class="hljs-emphasis">create view cx_</span>sal as select ename,income,outcome from sal,emp where sal.eid=emp.eid;<br><br><br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*end<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br><br>//请在下面输入查询财务部雇员薪水情况视图的MySQL语句<br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*begin<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br>select <span class="hljs-emphasis">* from cx_sal;</span><br><span class="hljs-emphasis">/<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>end<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*/</span><br></code></pre></td></tr></table></figure><h2 id="索引与完整性"><a href="#索引与完整性" class="headerlink" title="索引与完整性"></a>索引与完整性</h2><h3 id="任务描述-3"><a href="#任务描述-3" class="headerlink" title="任务描述"></a>任务描述</h3><p>经理觉得查找数据的速度偏慢、精度较低，这个时候，你需要创建索引来使查询的速度更快，使用完整性来提高查询精度。</p><p>上述查询功能需要你掌握索引的使用方法、理解数据完整性的概念及分类、掌握各种数据完整性的实现方法。下面就是对这些内容的详细教程，请先仔细阅读。</p><h3 id="相关知识-3"><a href="#相关知识-3" class="headerlink" title="相关知识"></a>相关知识</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>索引是根据表中一列或若干列按照一定的顺序建立的列值与记录行之间的对应关系表。在列上创建了索引之后，查找数据是可以直接根据该列上的索引找到对应行的位置，从而快速找到数据。</p><p>索引类型分成下列几个：</p><ul><li>普通索引（<code>INDEX</code>）：基本索引类型</li><li>唯一性索引（<code>UNIQUE</code>）：该列的所有值没有重复</li><li>主键（<code>PRIMARY KEY</code>）：一种唯一性索引，一个表只能有一个主键</li><li>全文索引（<code>FLLTEXT</code>）：只能在<code>varchar</code>或<code>text</code>类型上创建</li></ul><p>语法格式：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//创建<br><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">UNIQUE</span>|FULLTEXT|SPATIAL] <span class="hljs-keyword">INDEX</span> 索引名称 <span class="hljs-keyword">ON</span> 表名&#123;字段名称[(长度)] [<span class="hljs-keyword">ASC</span>|<span class="hljs-keyword">DESC</span>]&#125;<br>//修改<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> tbl_name <span class="hljs-keyword">ADD</span> [<span class="hljs-keyword">UNIQUE</span>|FULLTEXT|SPATIAL] <span class="hljs-keyword">INDEX</span>索引名称(字段名称[(长度)][<span class="hljs-keyword">ASC</span>|<span class="hljs-keyword">DESC</span>]);<br></code></pre></td></tr></table></figure><p>下面我们用命令行操作试一试。<br>在创建好整个数据库的基础上，对<code>YGGL</code>数据库的<code>emp</code>表的<code>ename</code>列建立索引：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> emp_name_idx<br>    <span class="hljs-keyword">on</span> emp(ename);<br></code></pre></td></tr></table></figure><p>查看是否创建成功：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">index</span> <span class="hljs-keyword">from</span> emp;<br></code></pre></td></tr></table></figure><p>重命名索引：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">index</span> emp_name_idx<br>    <span class="hljs-keyword">rename</span> <span class="hljs-keyword">to</span> emp_idx;<br></code></pre></td></tr></table></figure><p>删除索引：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> emp_idex;<br></code></pre></td></tr></table></figure><h4 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h4><p>为了防止不合规定的数据进入基表中，我们定义完整性规则。分为：域完整性、实体完整性和参照完整性。</p><p><strong>域完整性</strong><br>域完整性又叫列完整性，主要是对一列的数据进行约束。比如<code>emp</code>中限定<code>sex</code>的值只能为<code>1</code>和<code>2</code>中的一个，可以在创建表时将sex做以下定义：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sex int(1) check(<span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br></code></pre></td></tr></table></figure><p>或者在所有字段定义完成后加一句：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">constraint ch_sex check(<span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-attribute">sex</span>=<span class="hljs-string">&#x27;2&#x27;</span>)<br></code></pre></td></tr></table></figure><p>下面，我们在命令行中通过修改表的方式创建约束：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br>    <span class="hljs-keyword">add</span>(<span class="hljs-keyword">constraint</span> ch_sex <span class="hljs-keyword">check</span>(sex=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> sex=<span class="hljs-string">&#x27;2&#x27;</span>));<br></code></pre></td></tr></table></figure><p>删除约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br>    <span class="hljs-keyword">drop</span> <span class="hljs-keyword">constraint</span> ch_sex;<br></code></pre></td></tr></table></figure><p><strong>实体完整性</strong><br>又叫行完整性，要求每一行都有一个唯一的标识符。比如<code>emp</code>中的员工<code>eid</code>是唯一的，才能唯一确定某一个人。通过<code>unique</code>约束和<code>primary key</code>约束可以实现实体完整性。</p><p>同样的，在创建表时对<code>tel</code>创建约束应该将<code>tel</code>定义为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">tel    <span class="hljs-type">char</span>(<span class="hljs-number">12</span>)     <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">constraint</span> un_tel <span class="hljs-keyword">unique</span>,<br></code></pre></td></tr></table></figure><p>下面我们在命令行中通过修改表的方式创建约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br>    <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> un_tel <span class="hljs-keyword">unique</span>(tel);<br></code></pre></td></tr></table></figure><p><strong>参照完整性</strong><br>又叫引用完整性，它保证主表和从表中的数据一致性，实现方式是定义外键与主键。例如<code>emp</code>和<code>sal</code>表，<code>eid</code>在<code>emp</code>中是外键，而在<code>sal</code>中<code>eid</code>定义为主键。</p><ul><li>从表不能引用主表不存在的键值</li><li>主表中的值更改了，则从表中所有引用都也要修改</li><li>若要删除主表中的记录，应先删除从表中匹配的记录</li></ul><p>如果在创建<code>sal</code>表时想创建参照完整性使<code>emp</code>表中所有<code>eid</code>都要出现在<code>sal</code>中,可以在定义<code>emp</code>的<code>eid</code>时这样定义：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">eid    char(<span class="hljs-number">6</span>)      NOT NULL references <span class="hljs-built_in">sal</span>(eid),<br></code></pre></td></tr></table></figure><p>下面我们在命令行中通过修改表的方式定义：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> emp<br>    <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> sal_id <span class="hljs-keyword">foreign key</span>(eid)<br>        <span class="hljs-keyword">references</span> sal(eid);<br></code></pre></td></tr></table></figure><h3 id="编程要求-3"><a href="#编程要求-3" class="headerlink" title="编程要求"></a>编程要求</h3><p>同样的，你需要在我们已经创建好整个<code>YGGL</code>数据库的基础上进行以下操作：</p><ul><li>建立索引<code>pk_xs_bak</code>：对<code>emp</code>的<code>eid</code>建立索引；</li><li>实现域完整性<code>ch_tel</code>：为<code>emp</code>的<code>tel</code>建立<code>check</code>约束，其值只能为<code>0-9</code>的数字；</li><li>实现实体完整性<code>un_dept</code>：为<code>dept</code>的<code>dname</code>创建唯一性索引；</li><li>实现参照完整性<code>fk_emp</code>：将<code>emp</code>中的<code>did</code>列为外键。</li></ul><h3 id="评测说明-1"><a href="#评测说明-1" class="headerlink" title="评测说明"></a>评测说明</h3><p>请在右侧代码窗口输入<code>MySQL</code>语句实现以上操作，平台将自动编译你输入的<code>MySQL</code>语句。<br>请注意语句的格式并且不要有空行哦：）</p><p>特别提醒：<code>SQL</code>文件的代码不能有空行，否则会报语法错误！</p><h3 id="我的代码-3"><a href="#我的代码-3" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs markdown">//请在下面输入创建索引的MySQL语句<br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*begin<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br>create index pk<span class="hljs-emphasis">_xs_</span>bak on emp(eid);<br><br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*end<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br><br>//请在下面输入实现域完整性的MySQL语句<br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*begin<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br>alter table emp add(constraint ch<span class="hljs-emphasis">_tel check(tel&gt;=&#x27;0&#x27; and tel&lt;=&#x27;9&#x27;));</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">/<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*end<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*/</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">//请在下面输入实现实体完整性的MySQL语句</span><br><span class="hljs-emphasis">/<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*begin<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*/</span><br><span class="hljs-emphasis">alter table dept add constraint un_</span>dept unique(dname);<br><br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*end<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br><br>//请在下面输入实现参照完整性的MySQL语句<br>/<span class="hljs-strong">****</span><span class="hljs-strong">****</span><span class="hljs-emphasis">*begin<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*</span>/<br>alter table emp add (constraint fk<span class="hljs-emphasis">_emp foreign key(did) references dept(did));</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">/<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*end<span class="hljs-strong">****</span><span class="hljs-strong">****</span>*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设备管理</title>
    <link href="/2022/11/16/%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/"/>
    <url>/2022/11/16/%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在计算机硬件系统的组成中，处理器和主存储器构成计算机系统硬件的主要部分，其他部分统称为设备（Device）。设备用于外界（用户）与主计算机系统的数据交换。</p><p>主要内容如下：<br>第七章 设备管理</p><ul><li>一、设备管理概述</li><li>二、I&#x2F;O控制方式</li><li>三、设备分配</li><li>四、缓冲技术</li><li>五、磁盘驱动调度</li></ul><div class="row">    <embed src="/pdf/操作系统/设备管理.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-SZQaLhRx" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-SZQaLhRx"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "轨迹",              author: "周杰伦",              url: "/music/周杰伦 - 轨迹.mp3",              pic: "/music/图片/寻找周杰伦.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>存储过程（一）</title>
    <link href="/2022/11/15/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/11/15/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>视图、索引、存储过程和事务</strong> 是 <code>MySQL</code> 中非常重要的几个概念，也是数据库应用开发者必须掌握的知识。视图用于<strong>延伸表的边界</strong>，索引用于提高数据库<strong>查找效率</strong>，<strong>存储过程</strong>用于<strong>分装</strong>业务逻辑，事务用于提升数据库应用的<strong>健壮性</strong>。</p><p>本文的主要内容是掌握存储过程的基础知识。</p><h2 id="存储过程（一）"><a href="#存储过程（一）" class="headerlink" title="存储过程（一）"></a>存储过程（一）</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：为<code>customers</code>表创建一个存储过程，使该存储过程能通过用户的信用额度来区分用户的等级。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：<br>1.存储过程的定义；<br>2.存储过程的创建和查询；<br>3.存储过程的查询和删除。</p><h4 id="存储过程的定义"><a href="#存储过程的定义" class="headerlink" title="存储过程的定义"></a>存储过程的定义</h4><p><strong>存储过程</strong>（<code>Stored Procedure</code>）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。</p><p>存储过程是为了完成特定功能的<code>SQL</code>语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数（需要时）来调用执行。</p><p>存储过程思想上很简单，就是数据库 <code>SQL</code> 语言层面的代码<strong>封装与重用</strong>。</p><p>简单的说存储过程就是具有名字的一段代码，用来完成一个特定的功能。</p><h4 id="存储过程的创建和查询"><a href="#存储过程的创建和查询" class="headerlink" title="存储过程的创建和查询"></a>存储过程的创建和查询</h4><p>创建存储过程：<code>create procedure 存储过程名(参数)</code> </p><ul><li>下面我们来创建第一个存储过程<br>每个存储的程序都包含一个由 <code>SQL</code> 语句组成的主体。此语句可能是由以分号（<code>;</code>）字符分隔的多个语句组成的复合语句。例如：<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title function_">proc1</span><span class="hljs-params">()</span><br><span class="hljs-title function_">BEGIN</span><br><span class="hljs-title function_">SELECT</span> * <span class="hljs-title function_">FROM</span> <span class="hljs-title function_">user</span>;<br><span class="hljs-keyword">END</span><span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure>在命令行客户端中，如果有一行命令以分号结束，那么回车后，MySQL 将会执行该命令，但在创建存储过程中我们并不希望 MySQL 这么做。</li></ul><p><code>MySQL</code> 本身将分号识别为语句分隔符，因此必须临时重新定义分隔符以使 <code>MySQL</code> 将整个存储的程序定义传递给服务器。</p><p>要重新定义 <code>MySQL</code> 分隔符，请使用该 <code>delimiter</code>命令。使用 <code>delimiter</code> 首先将结束符定义为<code>//</code>，完成创建存储过程后，使用<code>//</code>表示结束，然后将分隔符重新设置为分号（<code>;</code>）：</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">DELIMITER <span class="hljs-comment">//</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> <span class="hljs-title function_">proc1</span><span class="hljs-params">()</span><br><span class="hljs-title function_">BEGIN</span><br><span class="hljs-title function_">SELECT</span> * <span class="hljs-title function_">FROM</span> <span class="hljs-title function_">user</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-comment">//</span><br>DELIMITER <span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>：<code>/</code>也可以换成其他符号，例如<code>$</code>;</p><ul><li><p>执行存储过程：<code>call 存储过程名</code><br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/1-1.png"></p></li><li><p>创建带有参数的存储过程<br>存储过程的参数有三种：</p><ul><li><code>IN</code>：输入参数，也是默认模式，表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回；</li><li><code>OUT</code>：输出参数，该值可在存储过程内部被改变，并可返回；</li><li><code>INOUT</code>：输入输出参数，调用时指定，并且可被改变和返回。</li></ul></li></ul><p><code>IN</code>参数示例：<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/1-2.png"></p><p><code>OUT</code>参数示例：<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/1-3.png"></p><p><code>INOUT</code>参数示例：<br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/1-4.png"></p><h4 id="存储过程的查询和删除"><a href="#存储过程的查询和删除" class="headerlink" title="存储过程的查询和删除"></a>存储过程的查询和删除</h4><p>我们如何在数据库中查询我们已经创建过的存储过程呢：<br><code>SHOW PROCEDURE STATUS WHERE db=&#39;数据库名&#39;;</code></p><p>查看存储过程的详细定义信息：<br><code>SHOW CREATE PROCEDURE 数据库.存储过程名;</code><br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/1-5.png"></p><p>当我们不再需要某个存储过程时，我们可以使用：<br><code>DROP PROCEDURE [IF EXISTS] 数据库名.存储过程名;</code><br><img src="/img/MySQL/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/1-6.png"></p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器补充代码，创建存储过程<code>GetCustomerLevel(in p_customNumber int(11),out p_customerLevel varchar(10))</code>，通过查询<code>customers</code>表中客户的信用额度，来决定客户级别，并将客户编号和对应等级输出，具体输出内容参考测试集。</p><p><code>customers</code>表数据结构：</p><table><thead><tr><th>customerNumber</th><th>creditlimit</th></tr></thead><tbody><tr><td>101</td><td>2000</td></tr><tr><td>102</td><td>12000</td></tr><tr><td>103</td><td>6000</td></tr></tbody></table><p>等级设定：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">PLATINUM</span> （creditlim&gt;<span class="hljs-number">10000</span>）<br><span class="hljs-attribute">GOLD</span> （<span class="hljs-number">5000</span>&lt;=creditlim&lt;=<span class="hljs-number">10000</span>）<br><span class="hljs-attribute">SILVER</span>（creditlim&lt;<span class="hljs-number">5000</span>）<br></code></pre></td></tr></table></figure><p><strong>提示</strong>：你可能需要使用到定义变量和判断，</p><ol><li>变量的定义和使用：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> 变量名 类型; #定义变量<br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">into</span> 变量名 <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>; #将<span class="hljs-keyword">table</span>表中的id列值赋给变量。<br></code></pre></td></tr></table></figure></li><li>SQL 中的if和case语法：<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">IF</span> expression THEN<br> <span class="hljs-built_in">statements</span>;<br><span class="hljs-keyword">ELSEIF</span> <span class="hljs-keyword">elseif</span>-expression THEN<br> <span class="hljs-keyword">elseif</span>-<span class="hljs-built_in">statements</span>;<br>...<br><span class="hljs-keyword">ELSE</span><br> <span class="hljs-keyword">else</span>-<span class="hljs-built_in">statements</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br></code></pre></td></tr></table></figure></li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">CASE</span> <span class="hljs-keyword">case</span>-expression<br> <span class="hljs-keyword">WHEN</span> when_expression_1 <span class="hljs-keyword">THEN</span> commands<br> <span class="hljs-keyword">WHEN</span> when_expression_2 <span class="hljs-keyword">THEN</span> commands<br> ...<br> <span class="hljs-keyword">ELSE</span> commands<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span>;<br></code></pre></td></tr></table></figure><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试，将调用你编写的存储过程，具体输出请参考右侧测试集。</p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE mydb;<br>#请在此处添加实现代码<br>########## Begin ##########<br>delimiter $$<br>create procedure GetCustomerLevel(<span class="hljs-keyword">in</span> p_customNumber int(<span class="hljs-number">11</span>),out p_customerLevel varchar(<span class="hljs-number">10</span>))<br>begin<br>declare levels int;<br>select creditlimit into levels <span class="hljs-keyword">from</span> customers <span class="hljs-keyword">where</span> customerNumber=p_customNumber;<br><span class="hljs-keyword">if</span> levels &lt;<span class="hljs-number">5000</span> then<br>    set p_customerLevel = <span class="hljs-string">&#x27;SILVER&#x27;</span>;<br>elseif levels &lt;<span class="hljs-number">10000</span> then<br>    set p_customerLevel = <span class="hljs-string">&#x27;GOLD&#x27;</span>;<br> else<br>    set p_customerLevel = <span class="hljs-string">&#x27;PLATINUM&#x27;</span>;<br>end <span class="hljs-keyword">if</span>;<br>select p_customNumber <span class="hljs-keyword">as</span> customerNumber,p_customerLevel;<br>end $$<br>delimiter ;<br>########## End ##########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简单的window程序设计</title>
    <link href="/2022/11/15/%E7%AE%80%E5%8D%95%E7%9A%84window%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/11/15/%E7%AE%80%E5%8D%95%E7%9A%84window%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>微软1998年8月推出的Visual C++ 6.0堪称是历史上最经典的VC版本，大量的教材都是基于这个版本来写的，甚至到现在仍然还有一些企业在使用这一版本。</p><p>主要内容如下：<br>简单的window程序设计</p><ul><li>3.1 Visual C++ 2019概述<ul><li>3.1.1 Visual Stdio与Visual C++</li><li>3.1.2 使用Visual C++开发控制台应用程序</li><li>3.1.3 使用VC++开发图形界面应用程序的方法</li></ul></li><li>3.2 Visual C++的数据类型</li><li>3.3 UNICODE字符集</li><li>3.4 MFC对话框应用程序<ul><li>3.4.1 对话框应用程序的创建</li><li>3.4.2 VC程序结构</li><li>3.4.3 MFC对话框应用程序结构</li><li>3.4.4 设置对话框的属性</li></ul></li><li>3.5 Windows 控件<ul><li>3.5.1 创建控件</li><li>3.5.2 常用控件</li></ul></li><li>3.6 Windows的消息驱动机制消息映射<ul><li>3.6.1 Windows的消息驱动机制</li><li>3.6.2 消息映射</li></ul></li><li>3.7 使用控件变量访问控制控件</li><li>3.8 添加用户自定义消息</li><li>3.9 MFC的文件操作<ul><li>3.9.1 CFile类</li><li>3.9.2 CFileDialog类</li></ul></li></ul><div class="row">    <embed src="/pdf/windows网络编程/简单的window程序设计.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-GAdaNAaD" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-GAdaNAaD"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "暗号",              author: "周杰伦",              url: "/music/暗号 - 周杰伦.mp3",              pic: "/music/图片/八度空间.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>Windows网络编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网络数据的内容与形态</title>
    <link href="/2022/11/15/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E7%9A%84%E5%86%85%E5%AE%B9%E4%B8%8E%E5%BD%A2%E6%80%81/"/>
    <url>/2022/11/15/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E7%9A%84%E5%86%85%E5%AE%B9%E4%B8%8E%E5%BD%A2%E6%80%81/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>网络编程操作的对象是存在于主机和网络中的数据。</p><p>主要内容如下：<br>网络数据的内容与形态</p><ul><li>3.1 整数的长度与符号<ul><li>3.1.1 整数的长度</li><li>3.1.2 整数的符号</li></ul></li><li>3.2 字节顺序</li><li>3.3 构的对齐与填充</li><li>3.4 网络数据传输心态</li><li>3.5 字符编码</li><li>3.6 数据校验</li></ul><div class="row">    <embed src="/pdf/windows网络编程/网络数据的内容与形态.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-FZBFKHuJ" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-FZBFKHuJ"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "烟花易冷",              author: "周杰伦",              url: "/music/周杰伦-烟花易冷.flac",              pic: "/music/图片/跨时代.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>Windows网络编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>原型设计和UML设计</title>
    <link href="/2022/11/13/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E5%92%8CUML%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/11/13/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E5%92%8CUML%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、原型设计展示"><a href="#一、原型设计展示" class="headerlink" title="一、原型设计展示"></a>一、原型设计展示</h2><h3 id="1-原型展示在线链接"><a href="#1-原型展示在线链接" class="headerlink" title="1. 原型展示在线链接"></a>1. 原型展示在线链接</h3><p><a href="https://modao.cc/app/26kY53Vfrkgsvulxwa4Sva">原型展示链接</a></p><h3 id="2-原型界面主要特点"><a href="#2-原型界面主要特点" class="headerlink" title="2. 原型界面主要特点"></a>2. 原型界面主要特点</h3><p>通过交互式地图使校友对新校园有一个总览式的了解，在每一个地标性建筑可以通过点击建筑本身弹出介绍与大事记，使校友切实地熟悉校园。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E5%92%8CUML%E8%AE%BE%E8%AE%A1/1.png"></p><p>我们主要通过姓名、年级、生日和专业进行校友认证。查找以前的数据存入数据库进行匹配，管理员进行审核，审核通过后校友们就可以愉快地通过我们的小程序联系上其他感兴趣的校友了。<br><img src="https://img-blog.csdnimg.cn/19641706df2c4fe79c3e1cb9980216af.png"></p><p>如下图，认证后可以查看其他感兴趣的校友的信息，以便与他们取得联系。<br><img src="https://img-blog.csdnimg.cn/fff2cd39d411444ca7345bd393b0311d.png"></p><h2 id="二、后端设计展示"><a href="#二、后端设计展示" class="headerlink" title="二、后端设计展示"></a>二、后端设计展示</h2><h3 id="1-UML设计"><a href="#1-UML设计" class="headerlink" title="1. UML设计"></a>1. UML设计</h3><h4 id="1-1-需求分析（用例图）"><a href="#1-1-需求分析（用例图）" class="headerlink" title="1.1 需求分析（用例图）"></a>1.1 需求分析（用例图）</h4><p>用户使用时可以浏览校园资讯，查看活动并进行报名。在福大地图中，可以查看各种建筑及景点的介绍，还可以在对应经典中留下自己的留言，也可以选择虚拟形象后在该地点完成虚拟合影。用户填写必要的信息认证后可认证为校友，可以寻找校友并查看校友信息，以便与校友交流。<br>管理员使用时可以添加和删除校园资讯、添加和删除活动信息、审核用户信息和校友认证信息、审核及管理校友们在不同各种景点留下的留言。<br><img src="https://img-blog.csdnimg.cn/a60b98c4b91a42d9ba75b989d7890703.png"></p><h4 id="1-2-业务流程（活动图）"><a href="#1-2-业务流程（活动图）" class="headerlink" title="1.2 业务流程（活动图）"></a>1.2 业务流程（活动图）</h4><p>用户使用时，先需要登录软件，然后分别有浏览资讯，查看地图，寻找校友和个人空间四个主要活动。</p><p>资讯分为新闻和活动，用户在活动中还可以进行活动报名。</p><p>用户查看地图后可以在地图中可以查看各种景点的简介和风景照，可以在各种景点中留下自己的留言。也可以进行虚拟合影，选择自己的虚拟形象后进行虚拟合影。</p><p>用户使用寻找校友的功能前需要进行认证，在个人空间中有提供认证通道。用户填写完必要的信息后，系统后端进行审核通过即可使用校友功能，查看其他校友的个人信息及联系方式。</p><p>四个活动互不干扰，用户在使用软件期间可以不限次数的重复使用这些功能。<br><img src="https://img-blog.csdnimg.cn/7c6effd2bcfb494fb4633e79ea9593e1.png"></p><h4 id="1-3-系统结构（类图）"><a href="#1-3-系统结构（类图）" class="headerlink" title="1.3 系统结构（类图）"></a>1.3 系统结构（类图）</h4><p>系统主要由用户类、管理员类构成。</p><p>用户类可以使用地点类、资讯类、活动信息类的方法，进行虚拟合影、留言、查看资讯、活动报名等。</p><p>校友类继承自用户类，用户经过校友认证后转变为校友。校友额外有匹配校友和查看校友详细信息的方法，以及校友认证所需的一些额外属性。</p><p>管理员类用于管理小程序的各种功能。里面有管理活动、管理资讯、管理留言、管理用户信息的方法。<br><img src="https://img-blog.csdnimg.cn/380405a827854e83b803620c8eea4ab5.png"></p><h4 id="1-4-算法模块（时序图）"><a href="#1-4-算法模块（时序图）" class="headerlink" title="1.4 算法模块（时序图）"></a>1.4 算法模块（时序图）</h4><p>用户在小程序中输入想找的校友信息，校友信息被传送至服务器，服务器根据数据库及算法计算出用户想认识的校友并返回到用户的小程序界面。</p><p>用户在小程序的资讯中点击想浏览的资讯，在小程序前端中直接跳转到链接对应页面。管理员可以在通过服务器发布和修改资讯，更新资讯内容。</p><p>用户在小程序的活动中点击感兴趣的活动，可以跳转至活动介绍，感兴趣可以进入报名页面。管理员可以通过服务器发布和修改活动。</p><p>用户在小程序地图对应的地点中进行留言，留言传送至服务器后端等待管理员审核，管理员审核通过后会将留言展示在地图旁边的留言板上。</p><p>用户在小程序界面输入必要的认证信息，将认证信息传送至服务器等待管理员审核，管理员审核通过后将信息保存至后端并返回录入成功。失败则返回失败。<br><img src="https://img-blog.csdnimg.cn/61df415194b34ceb8b7fc5b4f70da667.png"></p><h3 id="2-数据库设计"><a href="#2-数据库设计" class="headerlink" title="2.数据库设计"></a>2.数据库设计</h3><h4 id="2-1-E-R图"><a href="#2-1-E-R图" class="headerlink" title="2.1 E-R图"></a>2.1 E-R图</h4><p>数据库中主要有地图、管理员、资讯、用户、学生五个实体，实体间的联系和实体的属性如下图E-R图所示。我们的后台管理原型通过该E-R图的方式展示。<br><img src="https://img-blog.csdnimg.cn/821691fc09c34575986fc055539b1cc1.png"></p><h4 id="2-2-关系数据模型"><a href="#2-2-关系数据模型" class="headerlink" title="2.2 关系数据模型"></a>2.2 关系数据模型</h4><p><strong>User</strong></p><table><thead><tr><th>field</th><th>type</th><th>constraint</th></tr></thead><tbody><tr><td>WXID</td><td>int</td><td>primaryKey</td></tr><tr><td>WXName</td><td>string</td><td></td></tr><tr><td>Phone</td><td>int</td><td></td></tr><tr><td>E-mail</td><td>string</td><td></td></tr><tr><td>Profession</td><td>string</td><td></td></tr><tr><td>Address</td><td>string</td><td></td></tr><tr><td>Sex</td><td>bool</td><td></td></tr><tr><td>Sno</td><td>int</td><td></td></tr></tbody></table><p><strong>Map</strong></p><table><thead><tr><th>field</th><th>type</th><th>constraint</th></tr></thead><tbody><tr><td>MapID</td><td>int</td><td>primaryKey</td></tr><tr><td>MapName</td><td>string</td><td></td></tr><tr><td>Intrduction</td><td>string</td><td></td></tr><tr><td>Picture</td><td>string</td><td></td></tr><tr><td>Message</td><td>string</td><td></td></tr></tbody></table><p><strong>Information</strong></p><table><thead><tr><th>field</th><th>type</th><th>constraint</th></tr></thead><tbody><tr><td>InfoID</td><td>int</td><td>primaryKey</td></tr><tr><td>Tiete</td><td>string</td><td></td></tr></tbody></table><p><strong>Students</strong></p><table><thead><tr><th>field</th><th>type</th><th>constraint</th></tr></thead><tbody><tr><td>Sno</td><td>int</td><td>primaryKey</td></tr><tr><td>Sex</td><td>bool</td><td></td></tr><tr><td>Sname</td><td>string</td><td></td></tr><tr><td>Sage</td><td>int</td><td></td></tr><tr><td>WXID</td><td>int</td><td></td></tr><tr><td>Sdate</td><td>string</td><td></td></tr></tbody></table><h2 id="三、团队协作记录"><a href="#三、团队协作记录" class="headerlink" title="三、团队协作记录"></a>三、团队协作记录</h2><h4 id="3-1-团队协作照片"><a href="#3-1-团队协作照片" class="headerlink" title="3.1 团队协作照片"></a>3.1 团队协作照片</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E5%92%8CUML%E8%AE%BE%E8%AE%A1/2.png"></p><h4 id="3-2-Leangoo协作记录"><a href="#3-2-Leangoo协作记录" class="headerlink" title="3.2 Leangoo协作记录"></a>3.2 Leangoo协作记录</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E5%92%8CUML%E8%AE%BE%E8%AE%A1/3.png"></p><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E5%92%8CUML%E8%AE%BE%E8%AE%A1/4.png"></p><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E5%92%8CUML%E8%AE%BE%E8%AE%A1/5.png"></p><h4 id="3-3-协作记录小结"><a href="#3-3-协作记录小结" class="headerlink" title="3.3 协作记录小结"></a>3.3 协作记录小结</h4><p>本次组队项目最重要的一个地方，正是在于对该院庆小程序的需求分析。在每个页面分任务的开始，最重要的即是先对照开题设计的文档进行阅读，了解小程序所规定的主要能需求，以此来导向和约束我们接下来对项目框架的设计和实现。如果没有前期对需求精细阅读和深入分析，那么在结构设计和代码实现中就容易走弯路，甚至可能需要重构。</p><p>与此同时，在代码的编写过程中，我们也需要不断对目前所实现的功能同需求分析所确的用户故事的需求进行比较和检查，以保证功能实现的正确性，而测试驱动的编程方法助我们减少了可能出现的对需求的理解偏差。</p><p>任务的及时分配与随时调整也是这次给我们带来很多感触的地方，在设计初期就要确定确好每个人的分工，并将每个人的工作量达到饱和，尽可能让工作量均匀分配，不让其部分同学过于辛苦，也不让部分同学过于清闲，且前端与后端的对接要做到非常及时，多模块的设计其实具有先后次序，需要过渡地较为合理，因此我们这次组队编程使用leangoo作为我们敏捷开发的工作分配与指导工具，组长随时根据进度调整leangoo上的务分配，每个人也能很明确地领到自己的任务，正所谓“工欲善其事，必先利其器”。</p>]]></content>
    
    
    <categories>
      
      <category>软件工程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>删除重复数据</title>
    <link href="/2022/11/11/%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/11/11/%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在数据库中出现重复数据是常见之事，本文主要介绍如何删除表中的重复数据。</p><h2 id="利用主键删除"><a href="#利用主键删除" class="headerlink" title="利用主键删除"></a>利用主键删除</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：按照要求删除表中重复用户。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>在工作或平时练习中，我们会发现表中经常有重复数据，分情况我们可能需要这些重复数据，也可能不需要这些数据，那么我们该如何找出这些不需要的重复数据并删除呢？</p><h4 id="重复数据"><a href="#重复数据" class="headerlink" title="重复数据"></a>重复数据</h4><p>下面我们来看一组数据，<code>users</code>表结构及数据如下：</p><table><thead><tr><th>id（主键）</th><th>user_name</th><th>user_pwd</th></tr></thead><tbody><tr><td>1</td><td>user1</td><td>123</td></tr><tr><td>2</td><td>user2</td><td>456</td></tr><tr><td>3</td><td>user3</td><td>789</td></tr><tr><td>4</td><td>user1</td><td>111</td></tr><tr><td>5</td><td>user1</td><td>222</td></tr><tr><td>6</td><td>user1</td><td>333</td></tr></tbody></table><p>上面<code>users</code>表中出现了相同用户名的重复数据，我们需要将其重复的删除，首先我们将重复用户查出来：<br><img src="/img/MySQL/%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/1-1.png"></p><p>找到重复的用户后我们要怎么删除呢？又要怎么选择保留的数据呢？</p><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4><p>假设我们要保留的数据为<strong>先注册</strong>的账号，我们可将思路拟定如下：</p><ul><li>确定了保留先注册的账号，也就等同保留的数据为<code>id</code>较小的，我们可利用 聚合函数 得到重复数据中的最小<code>id</code>用户；</li><li>使用表关联，将重复数据中最小<code>id</code>用户与源<code>users</code>表中的<code>id</code>进行对比，删除<code>users</code>表中<code>id</code>比重复数据中的最小<code>id</code><strong>大</strong> 的记录，删除后表中的数据就是先注册用户的数据了。</li></ul><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充，具体任务如下：</p><ul><li>将<code>users</code>表中重复数据去除，保留先注册的账号。（你只需要删除表中重复数据即可，平台将为你查询表中数据）。</li></ul><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+----+-----------+----------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> user_name </span>|<span class="hljs-string"> user_pwd </span>|<br>+----+-----------+----------+<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> user2     </span>|<span class="hljs-string"> 972      </span>|<br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> user5     </span>|<span class="hljs-string"> 984      </span>|<br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> user7     </span>|<span class="hljs-string"> 474      </span>|<br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> user9     </span>|<span class="hljs-string"> 312      </span>|<br>|<span class="hljs-string">  7 </span>|<span class="hljs-string"> user3     </span>|<span class="hljs-string"> 840      </span>|<br>|<span class="hljs-string">  8 </span>|<span class="hljs-string"> user4     </span>|<span class="hljs-string"> 485      </span>|<br>|<span class="hljs-string"> 11 </span>|<span class="hljs-string"> user1     </span>|<span class="hljs-string"> 570      </span>|<br>|<span class="hljs-string"> 12 </span>|<span class="hljs-string"> user6     </span>|<span class="hljs-string"> 164      </span>|<br>|<span class="hljs-string"> 14 </span>|<span class="hljs-string"> user8     </span>|<span class="hljs-string"> 884      </span>|<br>+----+-----------+----------+<br></code></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>delete <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<br>    select * <span class="hljs-keyword">from</span>(<br>        select id <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> user_name<br>        <span class="hljs-keyword">in</span>(<br>            select user_name <span class="hljs-keyword">from</span> users group by user_name having count(<span class="hljs-number">1</span>)&gt;<span class="hljs-number">1</span><br>        )<br>        and id not <span class="hljs-keyword">in</span>(<br>            select min(id) <span class="hljs-keyword">from</span> users group by user_name having count(<span class="hljs-number">1</span>)&gt;<span class="hljs-number">1</span><br>        )<br>    )<span class="hljs-keyword">as</span> user_repeat_copy<br>);<br><br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="复杂重复数据删除"><a href="#复杂重复数据删除" class="headerlink" title="复杂重复数据删除"></a>复杂重复数据删除</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：删除表中mobile列出现的重复电话号码。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>在上一章节中我们已经解决了去除简单的重复数据，那如果表中的重复数据是组合的复杂数据呢？我们又该如何解决？</p><h4 id="重复数据-1"><a href="#重复数据-1" class="headerlink" title="重复数据"></a>重复数据</h4><p>下面我们继续看一组数据，仍用上一章节的<code>users</code>表，现在多一列<code>mobile</code>数据：</p><table><thead><tr><th>id（主键）</th><th>user_name</th><th>user_pwd</th><th>mobile</th></tr></thead><tbody><tr><td>1</td><td>user1</td><td>123</td><td>18212345678,18201234567,18212345678</td></tr><tr><td>2</td><td>user2</td><td>456</td><td>18266666666,18288888888</td></tr><tr><td>3</td><td>user3</td><td>789</td><td>18268686868,18278787878,18268686868,18278787878</td></tr></tbody></table><h4 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h4><p>看到<code>mobile</code>列中的数据是不是很亲切，在之前学习 <a href="https://www.educoder.net/shixuns/zxkmqvo3/challenges">行列转换</a> 时我们见过了。</p><p>遇到这种情况要将数据去重，我们的解题思路基本就可以拟定为把数据拆开后去重再将数据重新组合。</p><p>下面我们细分成几个小步骤来看：</p><ul><li><p>统计<code>mobile</code>列中各用户的电话数量；<br><img src="/img/MySQL/%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/2-1.png"></p></li><li><p>拆分数据（连接序列化表）；<br><img src="/img/MySQL/%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/2-2.png"></p></li><li><p>截取数据；<br><img src="/img/MySQL/%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE/2-3.png"></p></li><li><p>最后一步我们只需要将数据去重，然后再分组进行组合就大功告成了。</p></li></ul><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充，具体任务如下：<br>根据解题思路的步骤完成去除<code>users</code>表中<code>mobile</code>列的重复电话号码。（你只需要删除表中重复数据即可，如<code>mobile</code>列数据为<code>18212345678</code>,<code>18201234567</code>,<code>18212345678</code>，去除重复数据之后的数据为<code>18212345678</code>,<code>18201234567</code>。）</p><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+-------------+---------+<br>|<span class="hljs-string"> mob         </span>|<span class="hljs-string"> len     </span>|<br>+-------------+---------+<br>|<span class="hljs-string"> 18201234567 </span>|<span class="hljs-string"> 23.0000 </span>|<br>|<span class="hljs-string"> 18212345678 </span>|<span class="hljs-string"> 23.0000 </span>|<br>|<span class="hljs-string"> 18266666666 </span>|<span class="hljs-string"> 23.0000 </span>|<br>|<span class="hljs-string"> 18268686868 </span>|<span class="hljs-string"> 23.0000 </span>|<br>|<span class="hljs-string"> 18278787878 </span>|<span class="hljs-string"> 23.0000 </span>|<br>|<span class="hljs-string"> 18288888888 </span>|<span class="hljs-string"> 23.0000 </span>|<br>+-------------+---------+<br></code></pre></td></tr></table></figure><p><code>mob</code> 列为将<code>mobile</code>列所有号码升序输出的结果，<code>len</code> 列为号码所在行的<code>mobile</code>列长度</p><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br><br>update users b join (<br>  select user_name,group_concat(<br>    distinct SUBSTRING_INDEX(SUBSTRING_INDEX(mobile,<span class="hljs-string">&#x27;,&#x27;</span>,t.id),<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-number">-1</span>)<br>  ) mobile <span class="hljs-keyword">from</span> (<br>    select user_name,mobile,length(concat(mobile,<span class="hljs-string">&#x27;,&#x27;</span>))-length(replace(mobile,<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)) size <span class="hljs-keyword">from</span> users<br>  ) a inner join tb_sequence t on a.size&gt;=t.id group by a.user_name<br>) c on b.user_name = c.user_name set b.mobile = c.mobile;<br><br>########## End ##########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>文件系统</title>
    <link href="/2022/11/11/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/11/11/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>计算机操作系统除了实现对处理器、主存储器等重要硬件资源的管理之外，还需要实现对软件资源的管理。</p><p>本章主要内容如下：<br>第六章 文件系统</p><ul><li>一、文件系统概述</li><li>二、文件的逻辑结构</li><li>三、文件的物理结构</li><li>四、文件目录管理</li><li>五、文件存储空间管理</li><li>六、文件使用</li><li>七、文件共享</li><li>八、文件的安全性</li></ul><div class="row">    <embed src="/pdf/操作系统/文件系统.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-GzdZJeGi" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-GzdZJeGi"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "反方向的钟",              author: "周杰伦",              url: "/music/周杰伦-反方向的钟.flac",              pic: "/music/图片/Jay.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网络程序设计基础和网络程序通信模型</title>
    <link href="/2022/11/11/%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80%E5%92%8C%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/11/11/%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80%E5%92%8C%E7%BD%91%E7%BB%9C%E7%A8%8B%E5%BA%8F%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>网络编程的基础是计算机网络，本章简要讲述网络程序设计中设计的计算机网络方面的基础知识，包括各种网络术语、网络拓扑结构、网络协议等。<br>网络程序通信模型是网络程序设计的基础，决定了网络功能在每个通信节点的部署。</p><p>主要内容如下：<br>网络程序设计基础</p><ul><li>端口号</li><li>网络编程方法纵览</li></ul><p>网咯程序设计通信模型</p><ul><li>2.1 网络应用软件与网络通信之间的关系</li><li>2.2 汇聚点问题</li><li>2.3 客户&#x2F;服务器模型<ul><li>2.3.1 基本概念</li><li>2.3.2客户&#x2F;服务器关系</li><li>2.3.3服务器软件的特点和分类</li></ul></li><li>2.4 B&#x2F;S模型</li><li>2.5 P2P模型</li></ul><div class="row">    <embed src="/pdf/windows网络编程/网络程序设计基础和网络程序通信模型.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-WZftxDcH" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-WZftxDcH"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "大笨钟",              author: "周杰伦",              url: "/music/周杰伦-大笨钟.flac",              pic: "/music/图片/十二新作.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>Windows网络编程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>存储器管理</title>
    <link href="/2022/11/10/%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86/"/>
    <url>/2022/11/10/%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>程序运行需要两个最基本的条件：一个是程序要占有足够的主存储空间；另一个是得到处理器，并且首先要得到足够的主存储空间。本章将介绍操作系统对主存储器的管理，简称存储器管理。</p><p>本章主要内容如下：<br>第五章 存储器调度</p><ul><li>一、存储器概述</li><li>二、单一连续区存储管理</li><li>三、固定分区存储管理</li><li>四、可变分区存储管理</li><li>五、分页存储管理</li><li>六、分段存储管理</li><li>七、段页式存储管理</li></ul><div class="row">    <embed src="/pdf/操作系统/存储器管理.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-OaCEUdtf" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-OaCEUdtf"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "娘子",              author: "周杰伦",              url: "/music/周杰伦-娘子.flac",              pic: "/music/图片/Jay.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>复杂查询（二）</title>
    <link href="/2022/11/10/%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/11/10/%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文主要针对连表查询和分组进行展开练习</p><h2 id="查询学生平均分"><a href="#查询学生平均分" class="headerlink" title="查询学生平均分"></a>查询学生平均分</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：根据提供的表和数据，查询平均成绩小于60分的同学的学生编号（<code>s_id</code>）、学生姓名（<code>s_name</code>）和平均成绩（<code>avg_score</code>），要求平均成绩保留2位小数点。（注意：包括有成绩的和无成绩的，无成绩的 <code>score = 0.00</code>）</p><p><code>student</code>表数据：</p><table><thead><tr><th>s_id</th><th>s_name</th><th>s_sex</th></tr></thead><tbody><tr><td>01</td><td>Mia</td><td>女</td></tr><tr><td>02</td><td>Riley</td><td>男</td></tr><tr><td>03</td><td>Aria</td><td>女</td></tr><tr><td>04</td><td>Lucas</td><td>女</td></tr><tr><td>05</td><td>Oliver</td><td>男</td></tr><tr><td>06</td><td>Caden</td><td>男</td></tr><tr><td>07</td><td>Lily</td><td>女</td></tr><tr><td>08</td><td>Jacob</td><td>男</td></tr></tbody></table><p><code>course</code>表数据：</p><table><thead><tr><th>c_id</th><th>c_name</th><th>t_id</th></tr></thead><tbody><tr><td>01</td><td>Chinese</td><td>02</td></tr><tr><td>02</td><td>Math</td><td>01</td></tr><tr><td>03</td><td>English</td><td>03</td></tr></tbody></table><p><code>teacher</code>表数据：</p><table><thead><tr><th>t_id</th><th>t_name</th></tr></thead><tbody><tr><td>01</td><td>张三</td></tr><tr><td>02</td><td>李四</td></tr><tr><td>03</td><td>王五</td></tr></tbody></table><p><code>score</code>表部分数据：</p><table><thead><tr><th>s_id</th><th>c_id</th><th>s_score</th></tr></thead><tbody><tr><td>01</td><td>01</td><td>80</td></tr><tr><td>01</td><td>02</td><td>90</td></tr><tr><td>01</td><td>03</td><td>99</td></tr><tr><td>02</td><td>01</td><td>70</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>略</p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充。</p><p>测试说明<br>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+------+</span>--------<span class="hljs-code">+-----------+</span><br><span class="hljs-section">| s_id | s_name | avg_score |</span><br><span class="hljs-section">+------+--------+-----------+</span><br>| 04   | Lucas  |     33.33 |<br>| 06   | Caden  |     32.50 |<br><span class="hljs-section">| 08   | Jacob  |      0.00 |</span><br><span class="hljs-section">+------+--------+-----------+</span><br></code></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>select student.s_id <span class="hljs-keyword">as</span> s_id,<br>s_name,(<span class="hljs-keyword">case</span> when avg(s_score) is not null <br>then round(avg(s_score),<span class="hljs-number">2</span>) <br>else <span class="hljs-number">0.00</span> end )<span class="hljs-keyword">as</span> avg_score <br><span class="hljs-keyword">from</span> student left join score on student.s_id=score.s_id <br>group by s_id having (avg(s_score)&lt;<span class="hljs-number">60</span> or avg(s_score) is null) <br>order by avg_score desc;<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="查询修课相同学生信息"><a href="#查询修课相同学生信息" class="headerlink" title="查询修课相同学生信息"></a>查询修课相同学生信息</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：根据提供的表和数据，查询与<code>s_id=01</code>号同学学习的课程完全相同的其他同学的信息（学号<code>s_id</code>，姓名<code>s_name</code>，性别<code>s_sex</code>）。</p><p><code>student</code>表数据：</p><table><thead><tr><th>s_id</th><th>s_name</th><th>s_sex</th></tr></thead><tbody><tr><td>01</td><td>Mia</td><td>女</td></tr><tr><td>02</td><td>Riley</td><td>男</td></tr><tr><td>03</td><td>Aria</td><td>女</td></tr><tr><td>04</td><td>Lucas</td><td>女</td></tr><tr><td>05</td><td>Oliver</td><td>男</td></tr><tr><td>06</td><td>Caden</td><td>男</td></tr><tr><td>07</td><td>Lily</td><td>女</td></tr><tr><td>08</td><td>Jacob</td><td>男</td></tr></tbody></table><p><code>course</code>表数据：</p><table><thead><tr><th>c_id</th><th>c_name</th><th>t_id</th></tr></thead><tbody><tr><td>01</td><td>Chinese</td><td>02</td></tr><tr><td>02</td><td>Math</td><td>01</td></tr><tr><td>03</td><td>English</td><td>03</td></tr></tbody></table><p><code>teacher</code>表数据：</p><table><thead><tr><th>t_id</th><th>t_name</th></tr></thead><tbody><tr><td>01</td><td>张三</td></tr><tr><td>02</td><td>李四</td></tr><tr><td>03</td><td>王五</td></tr></tbody></table><p><code>score</code>表部分数据：</p><table><thead><tr><th>s_id</th><th>c_id</th><th>s_score</th></tr></thead><tbody><tr><td>01</td><td>01</td><td>80</td></tr><tr><td>01</td><td>02</td><td>90</td></tr><tr><td>01</td><td>03</td><td>99</td></tr><tr><td>02</td><td>01</td><td>70</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>略</p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充。</p><p>测试说明<br>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+------+</span>--------<span class="hljs-code">+-------+</span><br><span class="hljs-section">| s_id | s_name | s_sex |</span><br><span class="hljs-section">+------+--------+-------+</span><br>| 02   | Riley  | 男    |<br>| 03   | Aria   | 女    |<br><span class="hljs-section">| 04   | Lucas  | 女    |</span><br><span class="hljs-section">+------+--------+-------+</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#请在此添加实现代码<br>########## Begin ##########<br>select * <span class="hljs-keyword">from</span> student s <span class="hljs-keyword">where</span> s.s_id <span class="hljs-keyword">in</span> <br>    (select s_id <span class="hljs-keyword">from</span> score <span class="hljs-keyword">where</span> c_id <span class="hljs-keyword">in</span> <br>        (select c_id <span class="hljs-keyword">from</span> score <span class="hljs-keyword">where</span> s_id=<span class="hljs-string">&#x27;01&#x27;</span>)<br>        group by s_id having count(*) = (select count(c_id) <span class="hljs-keyword">from</span> score <span class="hljs-keyword">where</span> s_id=<span class="hljs-string">&#x27;01&#x27;</span>)<br>    ) and s.s_id!=<span class="hljs-string">&#x27;01&#x27;</span> and<br>(select count(sc.c_id) <span class="hljs-keyword">from</span> score sc <span class="hljs-keyword">where</span> sc.s_id=s.s_id group by sc.s_id)=(select count(c_id) <span class="hljs-keyword">from</span> score <span class="hljs-keyword">where</span> s_id=<span class="hljs-string">&#x27;02&#x27;</span>);<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="查询各科成绩并排序"><a href="#查询各科成绩并排序" class="headerlink" title="查询各科成绩并排序"></a>查询各科成绩并排序</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：根据提供的表和数据，查询各科成绩，进行排序并显示排名，按学生编号（<code>s_id</code>）、课程编号（<code>c_id</code>）、学生成绩（<code>s_score</code>）和排名（<code>rank</code>）进行输出，具体效果请查看测试集。</p><p><code>student</code>表数据：</p><table><thead><tr><th>s_id</th><th>s_name</th><th>s_sex</th></tr></thead><tbody><tr><td>01</td><td>Mia</td><td>女</td></tr><tr><td>02</td><td>Riley</td><td>男</td></tr><tr><td>03</td><td>Aria</td><td>女</td></tr><tr><td>04</td><td>Lucas</td><td>女</td></tr><tr><td>05</td><td>Oliver</td><td>男</td></tr><tr><td>06</td><td>Caden</td><td>男</td></tr><tr><td>07</td><td>Lily</td><td>女</td></tr><tr><td>08</td><td>Jacob</td><td>男</td></tr></tbody></table><p><code>course</code>表数据：</p><table><thead><tr><th>c_id</th><th>c_name</th><th>t_id</th></tr></thead><tbody><tr><td>01</td><td>Chinese</td><td>02</td></tr><tr><td>02</td><td>Math</td><td>01</td></tr><tr><td>03</td><td>English</td><td>03</td></tr></tbody></table><p><code>teacher</code>表数据：</p><table><thead><tr><th>t_id</th><th>t_name</th></tr></thead><tbody><tr><td>01</td><td>张三</td></tr><tr><td>02</td><td>李四</td></tr><tr><td>03</td><td>王五</td></tr></tbody></table><p><code>score</code>表部分数据：</p><table><thead><tr><th>s_id</th><th>c_id</th><th>s_score</th></tr></thead><tbody><tr><td>01</td><td>01</td><td>80</td></tr><tr><td>01</td><td>02</td><td>90</td></tr><tr><td>01</td><td>03</td><td>99</td></tr><tr><td>02</td><td>01</td><td>70</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>略</p><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充。</p><p>测试说明<br>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>select a.s_id,a.c_id,a.s_score,<br>(select count(*) <span class="hljs-keyword">from</span> score b <br><span class="hljs-keyword">where</span> a.s_score &lt; b.s_score and a.c_id=b.c_id)+<span class="hljs-number">1</span> <span class="hljs-keyword">as</span> rank <br><span class="hljs-keyword">from</span> score a <br>order by c_id,s_score desc,rank,s_id desc;<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="查询张老师课程成绩最高的学生信息"><a href="#查询张老师课程成绩最高的学生信息" class="headerlink" title="查询张老师课程成绩最高的学生信息"></a>查询张老师课程成绩最高的学生信息</h2><h3 id="任务描述-3"><a href="#任务描述-3" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：根据提供的表和数据，查询选修“张三”老师所授课程的学生中，<strong>成绩最高</strong>的学生信息（具体输出信息请查看测试说明）及其成绩。</p><p><code>student</code>表数据：</p><table><thead><tr><th>s_id</th><th>s_name</th><th>s_sex</th></tr></thead><tbody><tr><td>01</td><td>Mia</td><td>女</td></tr><tr><td>02</td><td>Riley</td><td>男</td></tr><tr><td>03</td><td>Aria</td><td>女</td></tr><tr><td>04</td><td>Lucas</td><td>女</td></tr><tr><td>05</td><td>Oliver</td><td>男</td></tr><tr><td>06</td><td>Caden</td><td>男</td></tr><tr><td>07</td><td>Lily</td><td>女</td></tr><tr><td>08</td><td>Jacob</td><td>男</td></tr></tbody></table><p><code>course</code>表数据：</p><table><thead><tr><th>c_id</th><th>c_name</th><th>t_id</th></tr></thead><tbody><tr><td>01</td><td>Chinese</td><td>02</td></tr><tr><td>02</td><td>Math</td><td>01</td></tr><tr><td>03</td><td>English</td><td>03</td></tr></tbody></table><p><code>teacher</code>表数据：</p><table><thead><tr><th>t_id</th><th>t_name</th></tr></thead><tbody><tr><td>01</td><td>张三</td></tr><tr><td>02</td><td>李四</td></tr><tr><td>03</td><td>王五</td></tr></tbody></table><p><code>score</code>表部分数据：</p><table><thead><tr><th>s_id</th><th>c_id</th><th>s_score</th></tr></thead><tbody><tr><td>01</td><td>01</td><td>80</td></tr><tr><td>01</td><td>02</td><td>90</td></tr><tr><td>01</td><td>03</td><td>99</td></tr><tr><td>02</td><td>01</td><td>70</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="相关知识-3"><a href="#相关知识-3" class="headerlink" title="相关知识"></a>相关知识</h3><p>略</p><h3 id="编程要求-3"><a href="#编程要求-3" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充。</p><p>测试说明<br>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+------+</span>--------<span class="hljs-code">+-------+</span>---------<span class="hljs-code">+------+</span>--------+<br><span class="hljs-section">| s_id | s_name | s_sex | s_score | c_id | c_name |</span><br><span class="hljs-section">+------+--------+-------+---------+------+--------+</span><br><span class="hljs-section">| 01   | Mia    | 女    |      90 | 02   | Math   |</span><br><span class="hljs-section">+------+--------+-------+---------+------+--------+</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-3"><a href="#我的代码-3" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>select student.s_id,s_name,s_sex,max(s_score) <span class="hljs-keyword">as</span> s_score,score.c_id,c_name <span class="hljs-keyword">from</span> student<br>join score on student.s_id = score.s_id<br>join course on score.c_id = course.c_id<br>join teacher on course.t_id = teacher.t_id<br><span class="hljs-keyword">where</span> teacher.t_name=<span class="hljs-string">&#x27;张三&#x27;</span>;<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="查询两门课程不及格同学信息"><a href="#查询两门课程不及格同学信息" class="headerlink" title="查询两门课程不及格同学信息"></a>查询两门课程不及格同学信息</h2><h3 id="任务描述-4"><a href="#任务描述-4" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：根据提供的表和数据，查询两门及其以上<strong>不及格</strong>课程的同学的学号（<code>s_id</code>）、姓名（<code>s_name</code>）及其平均成绩（<code>avg_score</code>），要求计算平均成绩后为整数。</p><p><code>student</code>表数据：</p><table><thead><tr><th>s_id</th><th>s_name</th><th>s_sex</th></tr></thead><tbody><tr><td>01</td><td>Mia</td><td>女</td></tr><tr><td>02</td><td>Riley</td><td>男</td></tr><tr><td>03</td><td>Aria</td><td>女</td></tr><tr><td>04</td><td>Lucas</td><td>女</td></tr><tr><td>05</td><td>Oliver</td><td>男</td></tr><tr><td>06</td><td>Caden</td><td>男</td></tr><tr><td>07</td><td>Lily</td><td>女</td></tr><tr><td>08</td><td>Jacob</td><td>男</td></tr></tbody></table><p><code>course</code>表数据：</p><table><thead><tr><th>c_id</th><th>c_name</th><th>t_id</th></tr></thead><tbody><tr><td>01</td><td>Chinese</td><td>02</td></tr><tr><td>02</td><td>Math</td><td>01</td></tr><tr><td>03</td><td>English</td><td>03</td></tr></tbody></table><p><code>teacher</code>表数据：</p><table><thead><tr><th>t_id</th><th>t_name</th></tr></thead><tbody><tr><td>01</td><td>张三</td></tr><tr><td>02</td><td>李四</td></tr><tr><td>03</td><td>王五</td></tr></tbody></table><p><code>score</code>表部分数据：</p><table><thead><tr><th>s_id</th><th>c_id</th><th>s_score</th></tr></thead><tbody><tr><td>01</td><td>01</td><td>80</td></tr><tr><td>01</td><td>02</td><td>90</td></tr><tr><td>01</td><td>03</td><td>99</td></tr><tr><td>02</td><td>01</td><td>70</td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><h3 id="相关知识-4"><a href="#相关知识-4" class="headerlink" title="相关知识"></a>相关知识</h3><p>略</p><h3 id="编程要求-4"><a href="#编程要求-4" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充。</p><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+------+</span>--------<span class="hljs-code">+-----------+</span><br><span class="hljs-section">| s_id | s_name | avg_score |</span><br><span class="hljs-section">+------+--------+-----------+</span><br>| 04   | Lucas  |        33 |<br><span class="hljs-section">| 06   | Caden  |        33 |</span><br><span class="hljs-section">+------+--------+-----------+</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-4"><a href="#我的代码-4" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>select a.s_id,s_name,round(avg(s_score),<span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> avg_score <br><span class="hljs-keyword">from</span> score a join student on a.s_id=student.s_id <br><span class="hljs-keyword">where</span> (select count(*) <span class="hljs-keyword">from</span> score b <span class="hljs-keyword">where</span> a.s_id = b.s_id and b.s_score &lt; <span class="hljs-number">60</span> )&gt;=<span class="hljs-number">2</span><br>group by a.s_id;<br><br>########## End ##########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>视图</title>
    <link href="/2022/11/10/%E8%A7%86%E5%9B%BE/"/>
    <url>/2022/11/10/%E8%A7%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文的主要内容是掌握视图基础知识</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：通过学习视图，创建一个单表视图和一个多表视图。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：</p><ol><li>视图的定义；</li><li>创建视图；</li><li>操作视图；</li><li>删除视图。</li></ol><h4 id="视图的定义"><a href="#视图的定义" class="headerlink" title="视图的定义"></a>视图的定义</h4><p>视图（<code>view</code>）是一种虚拟存在的表，是一个逻辑表，本身并不包含数据。通过视图，可以展现基表（用来创建视图的表）的部分数据；视图数据来自定义视图的查询表。</p><p>我们知道了视图的定义，那么，为什么要使用它呢？</p><p>因为视图有如下优点：</p><ul><li><p>① 简单：使用视图的用户完全不需要关心后面对应的表的结构、关联条件和筛选条件，对用户来说已经是过滤好的复合条件的结果集；</p></li><li><p>② 安全：使用视图的用户只能访问他们被允许查询的结果集，对表的权限管理并不能限制到某个行或列，但是通过视图就可以简单的实现；</p></li><li><p>③ 数据独立：一旦视图的结构确定了，可以屏蔽表结构变化对用户的影响，源表增加列队视图没有影响；源表修改列名，则可以通过修改视图来解决，不会造成对访问者的影响。</p></li></ul><p>总而言之，使用视图的大部分情况是为了<strong>保障数据安全性，提高查询效率</strong>。</p><p>**** 创建视图</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR REPLACE</span>] [ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;]<br>    <span class="hljs-keyword">VIEW</span> view_name [(column_list)]<br>    <span class="hljs-keyword">AS</span> select_statement<br>   [<span class="hljs-keyword">WITH</span> [CASCADED | <span class="hljs-keyword">LOCAL</span>] <span class="hljs-keyword">CHECK</span> <span class="hljs-keyword">OPTION</span>]<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>OR REPLACE</code>：表示替换已有视图；</li><li><code>ALGORITHM</code>：表示视图选择算法，默认算法是<code>UNDEFINED</code>(未定义的)： <code>MySQL</code> 自动选择要使用的算法 ；<code>merge</code>合并；<code>temptable</code>临时表；</li><li><code>column_list</code>：可选参数，指定视图中各个属性的名词，默认情况下与<code>select</code>语句中查询的属性相同；</li><li><code>select_statement</code>：表示<code>select</code>语句；</li><li><code>[WITH [CASCADED | LOCAL] CHECK OPTION]</code>：表示视图在更新时保证在视图的权限范围之内；<code>cascade</code>是默认值，表示更新视图的时候，要满足视图和表的相关条件；<code>local</code>表示更新视图的时候，要满足该视图定义的一个条件即可。</li></ul><p>示例一：<br><img src="/img/MySQL/%E8%A7%86%E5%9B%BE/1-1.png"></p><p>示例二：<br><img src="/img/MySQL/%E8%A7%86%E5%9B%BE/1-2.png"></p><p>以上两个示例可以看出，虽然两个视图的字段名不同，但是，数据是相同的，因为两个视图引用的是<strong>同一个表中的数据</strong>，并且，<code>as</code>后的创建视图的语句也相同。</p><p>在实际开发中，用户可以根据自己的需求，通过视图的方式，获取基本表中自己需要的数据，这样既能满足用户的需求，也不会破坏基本表原来的结构，从而保证了基本表中数据的安全性。</p><h4 id="操作视图"><a href="#操作视图" class="headerlink" title="操作视图"></a>操作视图</h4><p>视图是逻辑表，也就是说视图不是真实的表，但操作视图和操作普通表的语法是一样的。</p><p>用户可以在视图中无条件地使用<code>select</code>语句查询数据。但使用<code>insert</code>、<code>update</code>和<code>delete</code>操作需要在<strong>创建视图时</strong>满足以下条件（满足以下条件的视图称为<strong>可更新视图</strong>）：</p><ul><li><code>from</code>子句中只能引用有<code>1</code>个表（真实表或可更新视图）；</li><li>不能包含 <code>with</code>、<code>distinct</code>、<code>group by</code>、<code>having</code>、<code>limit</code>等子句；</li><li>不能使用复合查询，即不能使用<code>union</code>、<code>intersect</code>、<code>except</code>等集合操作；</li><li><code>select</code>子句的字段列表不能包含聚合、窗口函数、集合返回函数。</li></ul><p>我们仍使用之前示例中的数据来操作视图：<br><img src="/img/MySQL/%E8%A7%86%E5%9B%BE/1-3.png"></p><h4 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h4><p>若视图不再被需要，我们可以将其删除，且视图的删除并不影响源表中的数据。</p><p>删除视图的 <code>SQL</code> 如下：<br><code>DROP VIEW view_name;</code></p><p>示例：<br><img src="/img/MySQL/%E8%A7%86%E5%9B%BE/1-4.png"></p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器补充代码，根据提供的表完成视图的创建，具体要求如下：</p><p><code>student</code>表数据结构：</p><table><thead><tr><th>stu_id</th><th>name</th><th>math</th><th>chinese</th></tr></thead><tbody><tr><td>1</td><td>Tom</td><td>80</td><td>78</td></tr><tr><td>2</td><td>Jack</td><td>70</td><td>80</td></tr><tr><td>3</td><td>Lucy</td><td>97</td><td>95</td></tr></tbody></table><p><code>stu_info</code>表数据结构：</p><table><thead><tr><th>stu_id</th><th>classes</th><th>city</th></tr></thead><tbody><tr><td>1</td><td>1633</td><td>长沙</td></tr><tr><td>2</td><td>1632</td><td>重庆</td></tr><tr><td>3</td><td>1633</td><td>成都</td></tr></tbody></table><p>在<code>student</code>表上创建视图<code>stu_view</code>，查询<code>math</code>、<code>chinese</code>字段并定义一个<code>math+chinese</code>成绩之和字段，值为两者之和；</p><p>在<code>student</code>表和<code>stu_info</code>表上，创建<code>stu_classes</code>视图，查询出<code>stu_id</code>、姓名和班级，查询条件为两表中的<code>stu_id</code>字段相同。</p><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试，预期输出会查询你创建的两个视图，具体内容请查看右侧测试集。</p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs clean">use School;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>#<span class="hljs-number">1.</span>创建单表视图<br>create view stu_view <span class="hljs-keyword">as</span> select math,chinese,math+chinese <span class="hljs-keyword">from</span> student;<br><br>#<span class="hljs-number">2.</span>创建多表视图<br>create view stu_classes <span class="hljs-keyword">as</span> select student.stu_id,name,classes <br><span class="hljs-keyword">from</span> student,stu_info <br><span class="hljs-keyword">where</span> student.stu_id=stu_info.stu_id;<br><br>########## End ##########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>复杂查询（一）</title>
    <link href="/2022/11/09/%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/11/09/%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>熟练的掌握对函数、表的内联查询、多表联合查询的使用</p><h2 id="交换工资"><a href="#交换工资" class="headerlink" title="交换工资"></a>交换工资</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：给定一张 <code>tb_Salary</code> 表，如下所示，有 <code>m = 男性</code> 和 <code>f = 女性</code>的值。交换所有的 <code>f</code> 和 <code>m</code> 值（例如，将所有 <code>f</code> 值更改为 <code>m</code>，反之亦然）。</p><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>Elon</td><td>f</td><td>7000</td></tr><tr><td>2</td><td>Donny</td><td>f</td><td>8000</td></tr><tr><td>3</td><td>Carey</td><td>m</td><td>6000</td></tr><tr><td>4</td><td>Karin</td><td>f</td><td>9000</td></tr><tr><td>5</td><td>Larisa</td><td>m</td><td>5500</td></tr><tr><td>6</td><td>Sora</td><td>m</td><td>500</td></tr></tbody></table><p>要求只使用一句更新<code>update</code>语句，且不允许含有任何<code>select</code>语句完成任务。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>略</p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示并仔细阅读右侧代码，在<code>Begin - End</code>区域内进行代码补充。</p><p><strong>提示</strong></p><p>可能需要使用到 <code>CASE</code> 函数或 <code>IF</code> 函数，使用方法如下实例：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">SELECT</span><br>    <span class="hljs-keyword">case</span>                       <span class="hljs-meta">###如果</span><br>    when sex=<span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;男&#x27;</span>     <span class="hljs-meta">###sex=<span class="hljs-string">&#x27;1&#x27;</span>，则返回值<span class="hljs-string">&#x27;男&#x27;</span></span><br>    when sex=<span class="hljs-string">&#x27;2&#x27;</span> <span class="hljs-keyword">then</span> <span class="hljs-string">&#x27;女&#x27;</span>     <span class="hljs-meta">###sex=<span class="hljs-string">&#x27;2&#x27;</span>，则返回值<span class="hljs-string">&#x27;女&#x27;</span>  </span><br>    <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;其他&#x27;</span>     <span class="hljs-meta">###其他的返回<span class="hljs-string">&#x27;其他’</span></span><br><span class="hljs-string"><span class="hljs-meta">    end                        ###结束</span></span><br><span class="hljs-string"><span class="hljs-meta">from   sys_user     ###整体理解： 在sys_user表中如果sex=&#x27;</span>1<span class="hljs-string">&#x27;，则返回值&#x27;</span>男<span class="hljs-string">&#x27;如果sex=&#x27;</span>2<span class="hljs-string">&#x27;，则返回值&#x27;</span>女<span class="hljs-string">&#x27; 否则返回&#x27;</span>其他’</span><br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">select <span class="hljs-keyword">if</span>(sex=<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>) <span class="hljs-keyword">as</span> sex <span class="hljs-keyword">from</span> sys_user;     ###如果sex=<span class="hljs-string">&#x27;1&#x27;</span>则返回值<span class="hljs-string">&#x27;男&#x27;</span> 否则返回值为<span class="hljs-string">&#x27;女&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+----+--------+-----+--------+<br>|<span class="hljs-string"> id </span>|<span class="hljs-string"> name   </span>|<span class="hljs-string"> sex </span>|<span class="hljs-string"> salary </span>|<br>+----+--------+-----+--------+<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> Elon   </span>|<span class="hljs-string"> m   </span>|<span class="hljs-string">   7000 </span>|<br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> Donny  </span>|<span class="hljs-string"> m   </span>|<span class="hljs-string">   8000 </span>|<br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> Carey  </span>|<span class="hljs-string"> f   </span>|<span class="hljs-string">   6000 </span>|<br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> karin  </span>|<span class="hljs-string"> m   </span>|<span class="hljs-string">   9000 </span>|<br>|<span class="hljs-string">  5 </span>|<span class="hljs-string"> Larisa </span>|<span class="hljs-string"> f   </span>|<span class="hljs-string">   5500 </span>|<br>|<span class="hljs-string">  6 </span>|<span class="hljs-string"> Sora   </span>|<span class="hljs-string"> f   </span>|<span class="hljs-string">    500 </span>|<br>+----+--------+-----+--------+<br></code></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>update tb_Salary set sex = <span class="hljs-keyword">if</span>(sex=<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>);<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="换座位"><a href="#换座位" class="headerlink" title="换座位"></a>换座位</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：改变相邻俩学生的座位。</p><p>小美是一所中学的信息科技老师，她有一张 <code>tb_Seat</code>座位表，平时用来储存学生名字和与他们相对应的座位 <code>id</code>。</p><p><code>tb_Seat</code>表结构数据如下：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Elon</td></tr><tr><td>2</td><td>Donny</td></tr><tr><td>3</td><td>Carey</td></tr><tr><td>4</td><td>Karin</td></tr><tr><td>5</td><td>Larisa</td></tr></tbody></table><p>现在小美想改变相邻俩学生的座位（若学生人数为奇数，则无需改变最后一位同学的座位），现在需要你编写<code>SQL</code>输出小美想要的的结果。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>略</p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充。</p><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span>    <span class="hljs-built_in">name</span><br><span class="hljs-number">1</span>    Donny<br><span class="hljs-number">2</span>    Elon<br><span class="hljs-number">3</span>    Karin<br><span class="hljs-number">4</span>    Carey<br><span class="hljs-number">5</span>    Larisa<br></code></pre></td></tr></table></figure><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#请在此添加实现代码<br>########## Begin ##########<br>select<br><span class="hljs-keyword">case</span> <br>when id=<span class="hljs-number">1</span> then <span class="hljs-number">2</span><br>when id=<span class="hljs-number">2</span> then <span class="hljs-number">1</span><br>when id=<span class="hljs-number">3</span> then <span class="hljs-number">4</span><br>when id=<span class="hljs-number">4</span> then <span class="hljs-number">3</span><br>when id=<span class="hljs-number">5</span> then <span class="hljs-number">5</span><br>end id , name <span class="hljs-keyword">from</span> tb_Seat order by id;<br><br><br>########## End ##########<br><br></code></pre></td></tr></table></figure><h2 id="分数排名"><a href="#分数排名" class="headerlink" title="分数排名"></a>分数排名</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：编写<code>SQL</code>查询来实现二种排名方式的分数排名。</p><p><code>score</code>表结构信息如下：</p><table><thead><tr><th>Id</th><th>Score</th></tr></thead><tbody><tr><td>1</td><td>3.52</td></tr><tr><td>2</td><td>3.65</td></tr><tr><td>3</td><td>4.23</td></tr><tr><td>4</td><td>3.85</td></tr><tr><td>5</td><td>4.23</td></tr><tr><td>6</td><td>3.65</td></tr></tbody></table><p>如果两个分数相同，则两个分数排名（<code>Rank</code>）相同。</p><p>情况一：平分后的下一个名次是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。例：<code>1、1、2、3、4、4</code>。</p><p>情况二：排名是非连续的。例：<code>1、1、1、4、4、6</code>。</p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>略</p><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充。</p><p>测试说明<br>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>select Score ,(select count(distinct score) <span class="hljs-keyword">from</span> score <span class="hljs-keyword">where</span> score&gt;=s.score) <span class="hljs-keyword">as</span> Rank <span class="hljs-keyword">from</span> score s order by score desc;<br>select Score ,(select count(score) <span class="hljs-keyword">from</span> score <span class="hljs-keyword">where</span> score&gt;s.score )+<span class="hljs-number">1</span> <span class="hljs-keyword">as</span> Rank <span class="hljs-keyword">from</span> score s order by score desc;<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="体育馆的人流量"><a href="#体育馆的人流量" class="headerlink" title="体育馆的人流量"></a>体育馆的人流量</h2><h3 id="任务描述-3"><a href="#任务描述-3" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：某市建了一个新的体育馆，每日人流量信息被记录在<code>gymnasium</code>表中：序号 (<code>id</code>)、日期 (<code>date</code>)、 人流量 (<code>visitors_flow</code>)。</p><p>请编写一个查询语句，找出人流量处于高峰的记录 <code>id</code>、日期 <code>date</code> 和人流量 <code>visitors_flow</code>，其中高峰定义为前后连续三天人流量均不少于 <code>100</code>。</p><p><code>gymnasium</code>表结构数据如下：</p><table><thead><tr><th>id</th><th>date</th><th>visitors_flow</th></tr></thead><tbody><tr><td>1</td><td>2019-01-01</td><td>58</td></tr><tr><td>2</td><td>2019-01-02</td><td>110</td></tr><tr><td>3</td><td>2019-01-03</td><td>123</td></tr><tr><td>4</td><td>2019-01-04</td><td>67</td></tr><tr><td>5</td><td>2019-01-05</td><td>168</td></tr><tr><td>6</td><td>2019-01-06</td><td>1352</td></tr><tr><td>7</td><td>2019-01-07</td><td>382</td></tr><tr><td>8</td><td>2019-01-08</td><td>326</td></tr><tr><td>9</td><td>2019-01-09</td><td>99</td></tr></tbody></table><p><strong>提示</strong>：每天只有一行记录，日期随着 <code>id</code> 的增加而增加。</p><h3 id="相关知识-3"><a href="#相关知识-3" class="headerlink" title="相关知识"></a>相关知识</h3><p>略</p><h3 id="编程要求-3"><a href="#编程要求-3" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充。</p><p>测试说明<br>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----+</span>------------<span class="hljs-code">+---------------+</span><br><span class="hljs-section">| id | date       | visitors_flow |</span><br><span class="hljs-section">+----+------------+---------------+</span><br>|  5 | 2019-01-05 |           168 |<br>|  6 | 2019-01-06 |          1352 |<br>|  7 | 2019-01-07 |           382 |<br><span class="hljs-section">|  8 | 2019-01-08 |           326 |</span><br><span class="hljs-section">+----+------------+---------------+</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-3"><a href="#我的代码-3" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>select distinct a.* <span class="hljs-keyword">from</span> gymnasium a , gymnasium b , gymnasium c  <span class="hljs-keyword">where</span><br>a.visitors_flow&gt;=<span class="hljs-number">100</span> and c.visitors_flow&gt;=<span class="hljs-number">100</span> and b.visitors_flow&gt;=<span class="hljs-number">100</span> and<br>(<br>    (a.id+<span class="hljs-number">1</span>=b.id and a.id+<span class="hljs-number">2</span>=c.id) or<br>    (a.id<span class="hljs-number">-1</span>=b.id and a.id+<span class="hljs-number">1</span>=c.id) or<br>    (a.id<span class="hljs-number">-1</span>=b.id and a.id<span class="hljs-number">-2</span>=c.id)<br>) <br>order by a.id;<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="统计总成绩"><a href="#统计总成绩" class="headerlink" title="统计总成绩"></a>统计总成绩</h2><h3 id="任务描述-4"><a href="#任务描述-4" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：计算每个班的语文总成绩和数学总成绩，其中低于 <code>60</code> 分的成绩不记入总成绩。</p><p><code>tb_score</code>结构数据：</p><table><thead><tr><th>name</th><th>chinese</th><th>maths</th></tr></thead><tbody><tr><td>A</td><td>89</td><td>98</td></tr><tr><td>B</td><td>99</td><td>89</td></tr><tr><td>C</td><td>55</td><td>66</td></tr><tr><td>D</td><td>88</td><td>66</td></tr><tr><td>E</td><td>55</td><td>66</td></tr><tr><td>F</td><td>88</td><td>99</td></tr></tbody></table><p><code>tb_class</code>表结构数据：</p><table><thead><tr><th>stuname</th><th>classname</th></tr></thead><tbody><tr><td>A</td><td>C1</td></tr><tr><td>B</td><td>C2</td></tr><tr><td>C</td><td>C3</td></tr><tr><td>D</td><td>C2</td></tr><tr><td>E</td><td>C1</td></tr><tr><td>F</td><td>C3</td></tr></tbody></table><h3 id="相关知识-4"><a href="#相关知识-4" class="headerlink" title="相关知识"></a>相关知识</h3><p>略</p><h3 id="编程要求-4"><a href="#编程要求-4" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充。</p><h3 id="测试说明-2"><a href="#测试说明-2" class="headerlink" title="测试说明"></a>测试说明</h3><p>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+-----------+</span>---------<span class="hljs-code">+-------+</span><br><span class="hljs-section">| classname | chinese | maths |</span><br><span class="hljs-section">+-----------+---------+-------+</span><br>| C1        |      89 |   164 |<br>| C2        |     187 |   155 |<br><span class="hljs-section">| C3        |      88 |   165 |</span><br><span class="hljs-section">+-----------+---------+-------+</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-4"><a href="#我的代码-4" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>select classname ,sum(<span class="hljs-keyword">case</span> when chinese&gt;=<span class="hljs-number">60</span> then chinese else <span class="hljs-number">0</span> end) <span class="hljs-keyword">as</span> chinese, sum(<span class="hljs-keyword">case</span> when maths&gt;=<span class="hljs-number">60</span> then maths else <span class="hljs-number">0</span> end) <span class="hljs-keyword">as</span> maths <span class="hljs-keyword">from</span> tb_score,tb_class <span class="hljs-keyword">where</span> name=stuname group by classname;<br><br>########## End ##########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>处理器调度</title>
    <link href="/2022/11/07/%E5%A4%84%E7%90%86%E5%99%A8%E8%B0%83%E5%BA%A6/"/>
    <url>/2022/11/07/%E5%A4%84%E7%90%86%E5%99%A8%E8%B0%83%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>调度(<code>Scheduling</code>)是管理的一种方法、是一种决策，资源（如工作、人力、车辆等）经过管理得到合理、有效地利用。调度的目标是找出一种合理的、有效的安排方法，提高资源的利用率。</p><p>本章主要内容如下：<br>第四章 处理器调度</p><ul><li>一、操作系统中的调度</li><li>二、作业调度</li><li>三、进程调度</li><li>四、实时系统的进程调度算法</li><li>五、死锁</li></ul><div class="row">    <embed src="/pdf/操作系统/处理器调度.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-bCYMIgVV" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-bCYMIgVV"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "印第安老斑鸠",              author: "周杰伦",              url: "/music/周杰伦-印第安老斑鸠.flac",              pic: "/music/图片/Jay.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>处理器管理</title>
    <link href="/2022/11/07/%E5%A4%84%E7%90%86%E5%99%A8%E7%AE%A1%E7%90%86/"/>
    <url>/2022/11/07/%E5%A4%84%E7%90%86%E5%99%A8%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>处理器是计算机系统最重要的资源，计算机系统的功能是通过处理器运行程序指令来体现的，计算机系统的工作方式主要是由处理器的工作方式决定的，因此，处理器的管理成为操作系统的核心功能。</p><p>本章主要内容如下：<br>第三章 处理器管理</p><ul><li>一、系统的工作流程</li><li>二、进程概念</li><li>三、进程的动态性</li><li>四、进程管理的主要功能</li><li>五、进程控制</li><li>六、进程同步</li><li>七、进程通信</li><li>八、线程</li></ul><div class="row">    <embed src="/pdf/操作系统/处理器管理.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-EdwJLNzF" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-EdwJLNzF"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "不能说的秘密",              author: "周杰伦",              url: "/music/周杰伦 - 不能说的秘密.mp3",              pic: "/music/图片/不能说的秘密.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分页和索引</title>
    <link href="/2022/11/06/%E5%88%86%E9%A1%B5%E5%92%8C%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/11/06/%E5%88%86%E9%A1%B5%E5%92%8C%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>MySQL</code> 除了对表的简单增删改查操作之外，还有很多高级的使用技巧，例如分页查询，或者索引（单列和组合索引等）有效提升查询效率。</p><h2 id="MySQL-分页查询"><a href="#MySQL-分页查询" class="headerlink" title="MySQL 分页查询"></a>MySQL 分页查询</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：能分页读取表中数据，针对大数据量进行简单优化。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：</p><ol><li>如何根据页数和每页数据量进行分页查询；</li><li>大数据量级进行优化分页查询。</li></ol><h4 id="什么是分页查询"><a href="#什么是分页查询" class="headerlink" title="什么是分页查询"></a>什么是分页查询</h4><p>当一个表中有很多符合查询条件的数据的时候，我们往往不需要把他们全部一次性取出来，那样对查询效率或者服务器性能来说都会是一个极大的挑战:例如最简单的商城，假设商城中有一万个数据，但我们在前端可能只会每次看到一页<code>10</code>个左右的数据，当我们浏览完这十个商品后，点击下一页浏览其他的商品，这样的分页浏览，对实际存储商品数据的 <code>MySQL</code> 数据库来说，实际上就是使用了 <code>MySQL</code> 的分页查询功能。</p><p>那么我们该怎么实现分页查询呢？</p><h4 id="limit-和-offset-实现的分页查询"><a href="#limit-和-offset-实现的分页查询" class="headerlink" title="limit 和 offset 实现的分页查询"></a>limit 和 offset 实现的分页查询</h4><p><code>limit</code>在之前的学习中应该有学习到，它可以返回符合条件的limit条数据：<br><code>select * from table where xxx=&quot;xxx&quot; limit 10;</code><br>输出： 检索记录行符合条件的10条数据</p><p>那么我们也可以利用<code>limit</code>和<code>offset</code>来进行分页查询:<br><code>select * from table where xxx=&quot;xxx&quot; limit 10 offset 10;</code><br>输出：检索记录行符合条件的<code>11-20</code>条数据</p><p><code>limit</code>之后的数字代表偏移量，<code>offset</code>代表返回记录的最大值，可以通俗的理解为，从<code>table</code>中取出第<code>limit+1</code>行到<code>limit+offset+1</code>行数据( <code>MySQL</code> 偏移值从<code>0</code>开始计算)。</p><p>在实际使用中，我们可以直接把<code>offset</code>直接省略掉：<br><code>select * from table where xxx=&quot;xxx&quot; limit 10,10;</code><br>该语句效果与带<code>offset</code>实际上是一模一样的。</p><p>通过分页查询，我们可以精确的定位到行数直接取出符合条件的多条数据，但是这也同样存在着性能问题。</p><h4 id="大数据量下分页查询优化"><a href="#大数据量下分页查询优化" class="headerlink" title="大数据量下分页查询优化"></a>大数据量下分页查询优化</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx=&quot;xxx&quot; <span class="hljs-keyword">limit</span> <span class="hljs-number">100</span>,<span class="hljs-number">100</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx=&quot;xxx&quot; <span class="hljs-keyword">limit</span> <span class="hljs-number">1000</span>,<span class="hljs-number">100</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx=&quot;xxx&quot; <span class="hljs-keyword">limit</span> <span class="hljs-number">10000</span>,<span class="hljs-number">100</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx=&quot;xxx&quot; <span class="hljs-keyword">limit</span> <span class="hljs-number">100000</span>,<span class="hljs-number">100</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx=&quot;xxx&quot; <span class="hljs-keyword">limit</span> <span class="hljs-number">1000000</span>,<span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>以上语句在实际使用中实际上查询速度会是越来越慢的，这是因为分页查询方式会从数据库第一条记录开始扫描，所以越往后，查询速度越慢，而且查询的数据越多，也会拖慢总查询速度。</p><p>如果可以直接定位到偏移量所在记录，那么查询速度肯定能得到一个巨大的提升，所以可以考虑添加一个嵌套子查询，先查询到偏移量位置，再进行分页：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx=&quot;xxx&quot; <span class="hljs-keyword">and</span> <br>id&gt;=(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> xxx=&quot;xxx&quot;<span class="hljs-keyword">limit</span> <span class="hljs-number">100000</span>,<span class="hljs-number">1</span>)<br><span class="hljs-keyword">limit</span> <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器补充代码:</p><ol><li><p>按<code>prod_id</code>升序查询表<code>products</code>中第<code>6-10</code>行数据,只要求<code>prod_id</code>字段即可（<code>prod_id</code>从<code>1</code>开始）；</p></li><li><p>利用子查询优化查询出按<code>prod_id</code>升序的第<code>10-15</code>行数据，只要求<code>prod_id</code>字段即可。<br>数据表结构如下：<br><img src="/img/MySQL/%E5%88%86%E9%A1%B5%E5%92%8C%E7%B4%A2%E5%BC%95/1-1.png"></p></li></ol><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>我们会根据表中数据对你的结果进行测试：</p><p>预期输出：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">prod<span class="hljs-emphasis">_id</span><br><span class="hljs-emphasis">6</span><br><span class="hljs-emphasis">7</span><br><span class="hljs-emphasis">8</span><br><span class="hljs-emphasis">9</span><br><span class="hljs-emphasis">10</span><br><span class="hljs-emphasis">prod_</span>id<br>10<br>11<br>12<br>13<br>14<br>15<br></code></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Products;<br>#请在此处添加实现代码<br>########## Begin ##########<br><br>#<span class="hljs-number">1.</span>分页查询<br>select prod_id <span class="hljs-keyword">from</span> products limit <span class="hljs-number">5</span>,<span class="hljs-number">5</span>;<br><br>#<span class="hljs-number">2.</span>用子查询优化分页查询语句<br>select prod_id <span class="hljs-keyword">from</span> products <span class="hljs-keyword">where</span> prod_id &gt;= (select prod_id <span class="hljs-keyword">from</span> products limit <span class="hljs-number">10</span>,<span class="hljs-number">1</span> )limit <span class="hljs-number">5</span>;<br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="索引（单列索引）"><a href="#索引（单列索引）" class="headerlink" title="索引（单列索引）"></a>索引（单列索引）</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：了解索引并创建索引。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：</p><ol><li>索引的定义和作用；</li><li>如何创建索引。</li></ol><h4 id="什么是索引？"><a href="#什么是索引？" class="headerlink" title="什么是索引？"></a>什么是索引？</h4><p>索引是一张特殊的表，该表保存了主键与索引字段，并指向实体表的记录。</p><p>先假设有一张表<code>student</code>,表的数据有100万条数据,其中有一条数据是 <code>name=&quot;xiaoming&quot;</code>，如果要拿这条数据的话需要写的<code>sql</code>是<br><code>select * from student where name=&#39;xiaoming&#39;</code></p><p>一般情况下,在没有建立索引的时候，<code>MySQL</code> 需要扫描全表及扫描 <code>100</code> 万条数据找这条数据，这个效率实际上是非常慢的，那么有什么优化方法呢？答案就是索引。</p><p>如果我在<code>name</code>字段上建立索引，那么 <code>MySQL</code> 只需要扫描一行数据及为我们找到这条<code>name=&#39;xiaoming&#39;</code>的数据,是不是感觉性能提升了好多咧….</p><h4 id="单列索引分类和创建"><a href="#单列索引分类和创建" class="headerlink" title="单列索引分类和创建"></a>单列索引分类和创建</h4><p>我们使用最常见的是单列索引，分为主键索引、普通索引和唯一索引。</p><p><strong>1.主键索引</strong></p><p>主键索引一般在建表时创建，不允许有空值并且值唯一，最好是与表的其他字段不相关的列或者是业务不相关的列。一般会设为 <code>int</code> 而且是 <code>AUTO_INCREMENT</code> 自增类型的，例如一般表的 <code>id</code> 字段。</p><p>创建主键索引一般建表时使用 <code>primary</code> 关键字，例如如下语句:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">CREATE TABLE `student` (<br>  `ID` int(11) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  PRIMARY KEY (`ID`)<br>) <span class="hljs-attribute">ENGINE</span>=InnoDB <span class="hljs-attribute">AUTO_INCREMENT</span>=6<span class="hljs-built_in"> DEFAULT </span><span class="hljs-attribute">CHARSET</span>=utf8;<br></code></pre></td></tr></table></figure><p><strong>2.普通索引</strong></p><p>普通索引实际上是我们最常见的，比如上述提到的例子，我们给<code>name</code>增加一个普通索引如下:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> name_index <span class="hljs-keyword">ON</span> <span class="hljs-symbol">`student`</span>(<span class="hljs-symbol">`name`</span>);<br></code></pre></td></tr></table></figure><p>注意这里的  &#96;  不是单引号，而是键盘 1数字左边的符；</p><p>或者是：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> student <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> name_index(`<span class="hljs-type">name</span>`);<br></code></pre></td></tr></table></figure><p><strong>3.唯一索引</strong></p><p>唯一索引和主键索引类似，要求字段唯一，但是可以允许字段为空，创建语句如下:</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span>  <span class="hljs-keyword">INDEX</span> name_index <span class="hljs-keyword">ON</span> <span class="hljs-symbol">`student`</span>(<span class="hljs-symbol">`name`</span>);<br></code></pre></td></tr></table></figure><p>唯一索引可以用来对数据进行强制性要求，可以禁止某表的某个字段出现重复数据。</p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器创建如下<code>student</code>表结构，并创建id为主键索引，<code>name</code>为唯一索引(索引名<code>name_index</code>)，<code>score</code>为普通索引(索引名<code>score_index</code>)。</p><p><code>student</code>结构如下:</p><table><thead><tr><th>字段名</th><th>类型、属性</th></tr></thead><tbody><tr><td>id</td><td>int(11) ，非空，自增长</td></tr><tr><td>name</td><td>varchar(20) ， 非空</td></tr><tr><td>score</td><td>int(10)</td></tr></tbody></table><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Table</span>    Non_unique    Key_name    Seq_in_index    <span class="hljs-built_in">Column_name</span>    <span class="hljs-keyword">Collation</span>    Cardinality    Sub_part    Packed    <span class="hljs-keyword">Null</span>    Index_type    <span class="hljs-keyword">Comment</span>    Index_comment<br>student    <span class="hljs-number">0</span>    <span class="hljs-keyword">PRIMARY</span>    <span class="hljs-number">1</span>    id    A    <span class="hljs-number">0</span>    <span class="hljs-keyword">NULL</span>    <span class="hljs-keyword">NULL</span>        BTREE        <br>student    <span class="hljs-number">0</span>    name_index    <span class="hljs-number">1</span>    <span class="hljs-type">name</span>    A    <span class="hljs-number">0</span>    <span class="hljs-keyword">NULL</span>    <span class="hljs-keyword">NULL</span>        BTREE        <br>student    <span class="hljs-number">1</span>    score_index    <span class="hljs-number">1</span>    score    A    <span class="hljs-number">0</span>    <span class="hljs-keyword">NULL</span>    <span class="hljs-keyword">NULL</span>    YES    BTREE<br></code></pre></td></tr></table></figure><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-meta">#1.创建student表结构并且设置id为主键索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> student (id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment,<span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,score <span class="hljs-type">int</span>(<span class="hljs-number">10</span>),<span class="hljs-keyword">primary key</span>(id));<br><br><span class="hljs-meta">#2.对name建立唯一索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">unique</span> <span class="hljs-keyword">index</span> name_index <span class="hljs-keyword">on</span> student(<span class="hljs-type">name</span>);<br><br><span class="hljs-meta">#3.对score建立普通索引</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> score_index <span class="hljs-keyword">on</span> student(score);<br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-keyword">FROM</span> student;<br>########## <span class="hljs-keyword">End</span> ##########<br></code></pre></td></tr></table></figure><h2 id="索引（组合索引）"><a href="#索引（组合索引）" class="headerlink" title="索引（组合索引）"></a>索引（组合索引）</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：了解组合索引并创建组合索引。</p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：</p><ol><li>什么是组合索引和单列索引区别；</li><li>如何创建组合索引。</li></ol><h4 id="什么是组合索引？"><a href="#什么是组合索引？" class="headerlink" title="什么是组合索引？"></a>什么是组合索引？</h4><p>上一关卡中介绍了单列索引，很多同学可能会觉得组合索引实际上就是一个表中有多个单列索引，实际上远非看上去这么简单。</p><p>例如上节的例子中，<code>student</code>表有如下字段:<code>id</code>，<code>name</code>，<code>city</code>，<code>score</code>。<br>我们在<code>name</code>上和<code>city</code>上建立了分别的单列索引。假如这个表数据极大，我们在进行查询的时候，会有很多重名的人，比如执行以下 <code>sql</code> :<br><code>select * from student where name=&quot;xiaoming&quot; and city = &quot;北京&quot; and score=&quot;60&quot;</code></p><p>在进行查询的时候，因为有单列索引在，所以我们会先得到名字为<code>xiaoming</code>的一百条记录，然后在这一百条记录中查找出城市为北京的记录，最后再查找分数为 <code>60</code> 的记录。</p><p>这样快不快？有了单列索引，不需要扫描全表，当然快！但是，这还不够，<code>MySQL</code>还可以为我们提供更强大的查询效率，因为以上只会使用效率最高的一个单列索引，其余字段的索引不会生效，所以这个时候就轮到了组合索引出场。</p><p>组合索引是同时包含多个字段但是只有一个索引名称，可以直接根据组合索引查询符合字段条件的记录！</p><p>例如我们建立一个<code>name</code>，<code>city</code>，<code>core</code>的组合索引，可以将满足条件的记录筛选到极为有限的几条，因为如果只有单列索引的话，可能索引查出来还有上万甚至更多记录，再根据后续条件挨个筛选，一步到位的组合索引明显在性能上会快上很多。</p><h4 id="创建组合索引"><a href="#创建组合索引" class="headerlink" title="创建组合索引"></a>创建组合索引</h4><p>那组合索引是怎么创建，创建和查询时又有什么需要注意的地方呢？<br>创建示例如下：<br><code>ALTER TABLE student ADD INDEX name_city_score (name,city,score);</code></p><p>实际上直接创建了如下三个索引：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">name</span><br><span class="hljs-built_in">name</span> city<br><span class="hljs-built_in">name</span> city <span class="hljs-built_in">score</span><br></code></pre></td></tr></table></figure><p>查询时也会根据查询语句以上三个索引进行匹配，即查询名字或者同时查询名字城市又或者查询名字城市分数时都可以使用组合索引，但是查询城市分数等就不能使用，这是因为遵循了最左匹配原则，必须从左开始进行匹配。</p><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器补充 <code>sql</code> 代码。</p><p>有如下表<code>person</code>，在<code>name</code>、<code>age</code>、<code>address</code>上创建组合索引，索引名<code>name_city_score</code> (无需建表，只增加组合索引即可)。</p><p>表<code>person</code>结构如下所示:</p><table><thead><tr><th>字段</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>int(11)</td></tr><tr><td>name</td><td>varchar(20)</td></tr><tr><td>age</td><td>int</td></tr><tr><td>address</td><td>varchar(30)</td></tr></tbody></table><h3 id="测试说明-2"><a href="#测试说明-2" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Table</span>    Non_unique    Key_name    Seq_in_index    <span class="hljs-built_in">Column_name</span>    <span class="hljs-keyword">Collation</span>    Cardinality    Sub_part    Packed    <span class="hljs-keyword">Null</span>    Index_type    <span class="hljs-keyword">Comment</span>    Index_comment<br>person    <span class="hljs-number">0</span>    <span class="hljs-keyword">PRIMARY</span>    <span class="hljs-number">1</span>    id    A    <span class="hljs-number">0</span>    <span class="hljs-keyword">NULL</span>    <span class="hljs-keyword">NULL</span>        BTREE        <br>person    <span class="hljs-number">1</span>    name_city_score    <span class="hljs-number">1</span>    <span class="hljs-type">name</span>    A    <span class="hljs-number">0</span>    <span class="hljs-keyword">NULL</span>    <span class="hljs-keyword">NULL</span>    YES    BTREE        <br>person    <span class="hljs-number">1</span>    name_city_score    <span class="hljs-number">2</span>    age    A    <span class="hljs-number">0</span>    <span class="hljs-keyword">NULL</span>    <span class="hljs-keyword">NULL</span>    YES    BTREE        <br>person    <span class="hljs-number">1</span>    name_city_score    <span class="hljs-number">3</span>    address    A    <span class="hljs-number">0</span>    <span class="hljs-keyword">NULL</span>    <span class="hljs-keyword">NULL</span>    YES    BTREE <br></code></pre></td></tr></table></figure><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean">#<span class="hljs-number">1.</span>增加组合索引<br>create index name_city_score on person(name,age,address);<br><br><br>########## End ##########<br>SHOW INDEX FROM person;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>索引</title>
    <link href="/2022/11/06/%E7%B4%A2%E5%BC%95/"/>
    <url>/2022/11/06/%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>视图、索引、存储过程和事务</strong>是 <code>MySQL</code>中非常重要的几个概念，也是数据库应用开发者必须掌握的知识。视图用于<strong>延伸表的边界</strong>，索引用于提高数据库<strong>查找效率</strong>，<strong>存储</strong>过程用于<strong>分装</strong>业务逻辑，事务用于提升数据库应用的<strong>健壮性</strong>。<br>本文主要介绍<strong>索引</strong>的基础知识。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：按照要求完成索引的创建。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：</p><ol><li>索引是什么；</li><li>索引的分类；</li><li>索引的创建和删除；</li><li>查询索引。</li></ol><h4 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h4><p>数据库索引是一种<strong>提高数据库系统性能</strong>的方法。索引能让数据库服务器更快地查找和获取表中指定的行。</p><p>例如，为了方便读者快速查找书中的术语，很多书籍在最后附加了索引页，术语按字母排序，同时给出页码。这样读者可以根据术语名，快速获取页码，而不用翻阅整本书。</p><p>但是索引也给数据库系统带来了一定的开销，所以我们应该谨慎地使用它们。</p><p>例如现在有一张简单的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test<br>(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    content <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>)<br></code></pre></td></tr></table></figure><p>在这张表中假设存了<code>1000</code>条数据（<code>id</code>依次递增且不重复），我们要查询表中<code>id=234</code>的数据，<code>sql</code>如下：<br><code>select * from test where id = 234;</code></p><p>一般情况，在<strong>没有索引</strong>下，数据库系统必须扫描整个表（一行一行地检查），才能获取到所有满足条件的行，很明显这种方法的效率是非常低的。</p><p>那么肯定有优化的方法，就是 索引 了！在<code>id</code>字段上添加<strong>索引</strong>，这样 <code>MySQL</code> 就只需要扫描一行数据就可以了。</p><h4 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h4><p>索引大体可分为单列索引（普通索引，唯一索引，主键索引）、组合索引、全文索引、空间索引四类。本实训我们主要介绍单例索引和组合索引：</p><ul><li><p>单例索引：一个索引只包含单个列，但一个表中可以有多个单列索引；</p><ul><li>普通索引：仅加速查询 最基本的索引，没有任何限制，是我们大多数情况下使用到的索引；</li><li>唯一索引：索引列中的值必须是唯一的，但允许为空值；</li><li>主键索引：是一种特殊的唯一索引，不允许有空值。</li></ul></li><li><p>组合索引：在表的多个字段上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时遵循最左前缀集合。</p></li></ul><h4 id="索引的创建和删除"><a href="#索引的创建和删除" class="headerlink" title="索引的创建和删除"></a>索引的创建和删除</h4><p><strong>创建索引</strong><br>创建索引有两种方式，一种是在建表时创建，另一种是建表后创建：</p><ul><li>普通索引：</li></ul><ol><li>创表时创建普通索引：<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">table</span> mytable(<br> id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br> username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br> <span class="hljs-keyword">INDEX</span> [indexName] (username)<br>);<br></code></pre></td></tr></table></figure></li><li>建表后创建普通索引：<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">INDEX</span> 索引名称 <span class="hljs-keyword">on</span> 表名(字段名);<br>#或者<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> 索引名称 (字段名);<br></code></pre></td></tr></table></figure></li></ol><ul><li>唯一索引：<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span> 索引名称 <span class="hljs-keyword">ON</span> 表名(字段名);<br>#或者<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> (字段名);<br></code></pre></td></tr></table></figure></li><li>主键索引：主键索引一般在建表时创建，会设为 <code>int</code> 而且是 <code>AUTO_INCREMENT</code>自增类型的，例如一般表的<code>id</code>字段。<figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable (<br>  id <span class="hljs-meta">int</span>(11) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (id)<br>);<br></code></pre></td></tr></table></figure></li><li>组合索引：组合索引就是在多个字段上创建一个索引。（应用场景：当表的行数远远大于索引键的数目时，使用这种方式可以明显加快表的查询速度）<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">CREATE</span> INDEX 索引名称 <span class="hljs-literal">ON</span> 表名(字段<span class="hljs-number">1</span>,字段<span class="hljs-number">2</span>，字段<span class="hljs-number">3</span>);<br><span class="hljs-comment">#或者</span><br><span class="hljs-attribute">ALTER</span> TABLE 表名 ADD INDEX 索引名称(字段<span class="hljs-number">1</span>，字段<span class="hljs-number">2</span>，字段<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><strong>删除索引</strong><br>同样，删除索引也有两种方式。<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">#使用<span class="hljs-keyword">drop</span>删除索引<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> index_name <span class="hljs-keyword">on</span> <span class="hljs-built_in">table_name</span> ;<br>#使用<span class="hljs-keyword">alter</span>删除索引<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> index_name ;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary key</span> ; #删除主键索引<br></code></pre></td></tr></table></figure></li></ul><h4 id="查询表中索引"><a href="#查询表中索引" class="headerlink" title="查询表中索引"></a>查询表中索引</h4><p>查询索引 <code>SQL</code>：<br><code>show index from 表名;</code><br>如下图：<br><img src="/img/MySQL/%E7%B4%A2%E5%BC%95/1-1.png"></p><p>查询结果部分字段解释：</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>Table</td><td>创建索引的表</td></tr><tr><td>Non_unique</td><td>表示索引非唯一，1代表非唯一索引，0代表唯一索引，意思就是该索引是不是唯一索引</td></tr><tr><td>Key_name</td><td>索引名称</td></tr><tr><td>Seq_in_index</td><td>表示该字段在索引中的位置，单列索引的话该值为1，组合索引为每个字段在索引定义中的顺序(只需要知道单列索引该值就为1，组合索引为别的)</td></tr><tr><td>Column_name</td><td>表示定义索引的列字段</td></tr><tr><td>Sub_part</td><td>表示索引的长度</td></tr><tr><td>Null</td><td>表示该字段是否能为空值</td></tr><tr><td>Index_type</td><td>表示索引类型</td></tr></tbody></table><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧编辑器补充代码，要求如下：<br>① 在创建<code>student</code>表结构时为<code>stu_id</code>字段创建名为<code>pk_student</code>的主键索引；<br>② 在<code>age</code>字段上建立名为<code>idx_age</code>的普通索引；<br>③ 在<code>classes</code>字段上添加名为<code>uniq_classes</code>的唯一索引，并以降序排列；<br>④ 在<code>name、sex</code>和<code>grade</code>三个字段上建立名为<code>idx_group</code>的组合索引。</p><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试，将你所创建的索引都现实出来，具体现实效果请查看右侧测试集。</p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs clean">use School;<br>#请在此处添加实现代码<br>########## Begin ##########<br><br>#<span class="hljs-number">1.</span>创建名为pk_student的主键索引<br>create table student(<br>    stu_id int not null,<br>    name varchar(<span class="hljs-number">25</span>) not null,<br>    age int not null,<br>    sex char(<span class="hljs-number">2</span>) not null,<br>    classes int not null,<br>    grade int not null,<br>    primary key(stu_id)<br>);<br><br>#<span class="hljs-number">2.</span>创建名为idx_age的普通索引<br>create index idx_age on student(age);<br><br>#<span class="hljs-number">3.</span>创建名为uniq_classes的唯一索引<br>create unique index uniq_classes on student(classes);<br><br>#<span class="hljs-number">4.</span>创建名为idx_group的组合索引<br>create index idx_group on student(name,sex,grade);<br><br>########## End ##########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分组选择数据</title>
    <link href="/2022/11/05/%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/11/05/%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要介绍<code>MySQL</code>是如何实现分组数据的，以便能汇总表内容的子集。这涉及了两个<code>SELECT</code>子句，分别是<code>GROUP BY</code> 和 <code>HAVING</code>；分组可以将一个整表分为多个逻辑组，以便能对每个组进行聚集计算。</p><h2 id="GROUP-BY-与-聚合函数"><a href="#GROUP-BY-与-聚合函数" class="headerlink" title="GROUP BY 与 聚合函数"></a>GROUP BY 与 聚合函数</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用<code>GROUP BY</code>关键字结合聚合函数将数据进行分组。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>在之前的实训中我们简单的提到过<code>GROUP BY</code>关键字，本实训让我们进一步了解<code>GROUP BY</code>与聚合函数的使用。</p><p>为了完成本关任务，你需要掌握：</p><ol><li><code>GROUP BY</code>与聚合函数的结合使用；</li><li><code>GROUP BY</code>中<code>SELECT</code>指定的字段限制。</li></ol><h4 id="GROUP-BY与聚合函数的使用"><a href="#GROUP-BY与聚合函数的使用" class="headerlink" title="GROUP BY与聚合函数的使用"></a><code>GROUP BY</code>与聚合函数的使用</h4><p>基本格式：<br><code>select [聚合函数] 字段名 from 表名 [where 查询条件]　[group by 字段名]</code></p><p>先提供表<code>Info</code>结构如下：</p><table><thead><tr><th>category</th><th>count</th><th>digest</th></tr></thead><tbody><tr><td>a</td><td>5</td><td>a2002</td></tr><tr><td>a</td><td>2</td><td>a2001</td></tr><tr><td>a</td><td>11</td><td>a2001</td></tr><tr><td>b</td><td>10</td><td>b2003</td></tr><tr><td>b</td><td>6</td><td>b2002</td></tr><tr><td>b</td><td>3</td><td>b2001</td></tr><tr><td>c</td><td>9</td><td>c2005</td></tr><tr><td>c</td><td>9</td><td>c2004</td></tr><tr><td>c</td><td>8</td><td>c2003</td></tr><tr><td>c</td><td>7</td><td>c2002</td></tr><tr><td>c</td><td>4</td><td>c2001</td></tr></tbody></table><p>示例：将表中数据分类并汇总<br><img src="/img/MySQL/%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE/1-1.png"></p><h4 id="GROUP-BY中SELECT指定的字段限制"><a href="#GROUP-BY中SELECT指定的字段限制" class="headerlink" title="GROUP BY中SELECT指定的字段限制"></a><code>GROUP BY</code>中<code>SELECT</code>指定的字段限制</h4><p>示例：<br><code>select category,sum(count),disgest from info group by category;</code></p><p>执行后会提示下错误，如下图。这就是需要注意的一点，在<code>select</code>指定的字段<strong>要么就要包含在<code>Group By</code>语句的后面，作为分组的依据；要么就要被包含在聚合函数中</strong>。<br><img src="/img/MySQL/%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE/1-2.png"></p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧编辑器补充代码，对年级<code>Id</code>和性别进行分组，分别统计表中<code>2、3、4</code>年级的男生总人数和女生总人数。</p><p><code>student</code>表数据结构如下：</p><table><thead><tr><th>stuId</th><th>gradeId</th><th>sex</th></tr></thead><tbody><tr><td>0201</td><td>2</td><td>男</td></tr><tr><td>0221</td><td>2</td><td>男</td></tr><tr><td>0319</td><td>3</td><td>女</td></tr><tr><td>0508</td><td>5</td><td>男</td></tr><tr><td>0610</td><td>6</td><td>女</td></tr><tr><td>0101</td><td>1</td><td>男</td></tr><tr><td>0224</td><td>2</td><td>女</td></tr><tr><td>0413</td><td>4</td><td>女</td></tr></tbody></table><p>要求输出结果显示如下：<br><img src="/img/MySQL/%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE/1-3.png"></p><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gradeId</span>    sex    count(*)<br>  <span class="hljs-attribute">2</span>         女      <span class="hljs-number">1</span><br>  <span class="hljs-attribute">2</span>         男      <span class="hljs-number">2</span><br>  <span class="hljs-attribute">3</span>         女      <span class="hljs-number">1</span><br>  <span class="hljs-attribute">4</span>         女      <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE School;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>#<span class="hljs-number">1.</span>查询表中<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>年级中分别男女的总人数<br>select gradeId, sex, count(*) <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> gradeId <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>) group by gradeId,sex; <br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="使用-HAVING-与-ORDER-BY"><a href="#使用-HAVING-与-ORDER-BY" class="headerlink" title="使用 HAVING 与 ORDER BY"></a>使用 HAVING 与 ORDER BY</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：按照要求编写<code>sql</code>查询语句。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：</p><ol><li>使用<code>having</code>子句进行分组筛选；</li><li><code>Having</code>与<code>Where</code>的区别；</li><li><code>Group By</code> 和 <code>Order By</code>。</li></ol><h4 id="使用having子句进行分组筛选"><a href="#使用having子句进行分组筛选" class="headerlink" title="使用having子句进行分组筛选"></a>使用<code>having</code>子句进行分组筛选</h4><p>简单来说，<code>having</code>子句用来对分组后的数据进行筛选，即<code>having</code>针对查询结果中的列发挥筛选数据作用。因此<code>having</code>通常与<code>Group by</code>连用。</p><p>基本格式：<br><code>select [聚合函数] 字段名 from 表名 [where 查询条件]　[group by 字段名] [having 字段名 筛选条件]</code></p><p>表<code>Info</code>的数据信息仍如下：</p><table><thead><tr><th>category</th><th>count</th><th>digest</th></tr></thead><tbody><tr><td>a</td><td>5</td><td>a2002</td></tr><tr><td>a</td><td>2</td><td>a2001</td></tr><tr><td>a</td><td>11</td><td>a2001</td></tr><tr><td>b</td><td>20</td><td>b2003</td></tr><tr><td>b</td><td>15</td><td>b2002</td></tr><tr><td>b</td><td>3</td><td>b2001</td></tr><tr><td>c</td><td>9</td><td>c2005</td></tr><tr><td>c</td><td>9</td><td>c2004</td></tr><tr><td>c</td><td>8</td><td>c2003</td></tr><tr><td>c</td><td>7</td><td>c2002</td></tr><tr><td>c</td><td>4</td><td>c2001</td></tr></tbody></table><p>示例：查询将表中数据分类后数量大于<code>20</code>的类别信息<br><img src="/img/MySQL/%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE/2-1.png"></p><p><code>select</code>语句中，<code>where</code>、<code>group by</code>、<code>having</code>子句和聚合函数的执行次序如下：</p><ol><li><code>where</code>子句从数据源中去除不符合条件的数据；</li><li>然后<code>group by</code>子句搜集数据行到各个组中；</li><li>接着统计函数为各个组计算统计值；</li><li>最后<code>having</code>子句去掉不符合其组搜索条件的各组数据行。</li></ol><h4 id="Having与Where的区别"><a href="#Having与Where的区别" class="headerlink" title="Having与Where的区别"></a><code>Having</code>与<code>Where</code>的区别</h4><p><code>where</code>子句都可以用<code>having</code>代替，区别在于<code>where</code>过滤行，<code>having</code>过滤分组；</p><ul><li><p><code>where</code>子句的作用是在对查询结果进行分组前，将不符合<code>where</code>条件的行去掉，即在分组之前过滤数据，<code>where</code>条件中<strong>不能包含聚组函数</strong>，使用<code>where</code>条件过滤出特定的行；</p></li><li><p><code>having</code>子句的作用是筛选满足条件的<strong>组</strong>，即在分组之后过滤数据，条件中经常包含聚组函数，使用<code>having</code>条件过滤出特定的组，也可以使用多个分组标准进行分组。</p></li></ul><p><code>having</code>结合<code>where</code>示例：<br><img src="/img/MySQL/%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE/2-2.png"></p><h4 id="Group-By-和-Order-By"><a href="#Group-By-和-Order-By" class="headerlink" title="Group By 和 Order By"></a><code>Group By</code> 和 <code>Order By</code></h4><p>基本格式<br><code>select [聚合函数] 字段名 from 表名 [where 查询条件]　[group by 字段名] [order by 字段名 排序方向]</code><br>示例：（以降序方式输出数据分类的汇总）<br><img src="/img/MySQL/%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE/2-3.png"></p><p>若分组字段和排序字段一样时，可不需要<code>order by</code>关键字，则只需告知排序方向，即可简写成：<br><img src="/img/MySQL/%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE/2-4.png"></p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器补充代码：</p><ol><li><p>我们要评选三好学生，条件是<strong>至少有两门课程在90分以上（包括90分）</strong>才能有资格，请列出符合的学生的学号（<code>sno</code>）及其<code>90</code>分以上（包括<code>90</code>分）科目总数；</p></li><li><p>学校评选先进学生，要求<strong>平均成绩大于90分（包括90分）</strong>的学生都有资格，<strong>并且语文课必须在95分以上（包括95分）</strong>，请列出有资格的学生的学号（<code>sno</code>）及其科目的平均分。</p></li></ol><p>给定数据表<code>tb_grade</code>格式如下：</p><table><thead><tr><th>sno</th><th>pno</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>语文</td><td>95</td></tr><tr><td>1</td><td>数学</td><td>98</td></tr><tr><td>1</td><td>英语</td><td>90</td></tr><tr><td>2</td><td>语文</td><td>89</td></tr><tr><td>2</td><td>数学</td><td>91</td></tr><tr><td>2</td><td>英语</td><td>92</td></tr><tr><td>3</td><td>语文</td><td>85</td></tr><tr><td>3</td><td>数学</td><td>88</td></tr><tr><td>3</td><td>英语</td><td>96</td></tr><tr><td>4</td><td>语文</td><td>95</td></tr><tr><td>4</td><td>数学</td><td>89</td></tr><tr><td>4</td><td>英语</td><td>88</td></tr></tbody></table><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sno</span>    count(*)<br><span class="hljs-attribute">1</span>        <span class="hljs-number">3</span><br><span class="hljs-attribute">2</span>        <span class="hljs-number">2</span><br><span class="hljs-attribute">sno</span>    avg(score)<br><span class="hljs-attribute">1</span>        <span class="hljs-number">94</span>.<span class="hljs-number">3333</span><br><span class="hljs-attribute">4</span>        <span class="hljs-number">90</span>.<span class="hljs-number">6667</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此处添加实现代码<br>########## Begin ##########<br><br>#<span class="hljs-number">1.</span>查询表中至少有两门课程在<span class="hljs-number">90</span>分以上的学生信息<br>select sno,count(*) <span class="hljs-keyword">from</span> tb_grade <span class="hljs-keyword">where</span> score&gt;=<span class="hljs-number">90</span> group by Sno having count(score&gt;=<span class="hljs-number">90</span>)&gt;=<span class="hljs-number">2</span>; <br><br><br>#<span class="hljs-number">2.</span>查询表中平均成绩大于<span class="hljs-number">90</span>分且语文课在<span class="hljs-number">95</span>分以上的学生信息<br>select sno,avg(score) <span class="hljs-keyword">from</span> tb_grade <span class="hljs-keyword">where</span> sno <span class="hljs-keyword">in</span> (select sno <span class="hljs-keyword">from</span> tb_grade <span class="hljs-keyword">where</span> score&gt;=<span class="hljs-number">95</span> and pno=<span class="hljs-string">&#x27;语文&#x27;</span>) group by sno having avg(score)&gt;=<span class="hljs-number">90</span>;<br><br>########## End ##########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>引论及操作系统的接口</title>
    <link href="/2022/11/04/%E5%BC%95%E8%AE%BA%E5%8F%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8E%A5%E5%8F%A3/"/>
    <url>/2022/11/04/%E5%BC%95%E8%AE%BA%E5%8F%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>计算机硬件系统上配置的第一个大型软件，称为计算机操作系统。<br>下面将主要讲述引论及操作系统的接口，主要内容如下：<br>第一章 引论</p><ul><li>一、操作系统的定义</li><li>二、操作系统的形成</li><li>三、OS的基本类型</li><li>四、OS的研究内容</li></ul><p>第二章 操作系统的接口</p><ul><li>一、操作系统内核</li><li>二、操作系统的启动</li><li>三、操作系统的用户接口</li></ul><div class="row">    <embed src="/pdf/操作系统/引论及操作系统的接口.pdf" width="100%" height="550" type="application/pdf"></div><p><strong>注：本PDF仅用于本人复习及查找，请勿大量外传。</strong></p>        <div id="aplayer-ZVTaKgcW" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-ZVTaKgcW"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "将军",              author: "周杰伦",              url: "/music/周杰伦-将军.flac",              pic: "/music/图片/七里香.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><script>console.error("SyntaxError: Unexpected token / in JSON at position 48");</script>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>其他函数的使用</title>
    <link href="/2022/11/03/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/11/03/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>介绍 <code>MySQL</code>中其他函数的使用，主要有以下几大类型：</p><ol><li>字符函数；</li><li>数学函数；</li><li>日期时间函数；</li><li>流程控制类函数；</li><li>自定义函数。</li></ol><h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：以首字母大写，其他字母小写的方式显示所有员工的姓名。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握常用字符函数的使用。</p><p>下面为字符串的常用函数：</p><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>CONCAT()</td><td>字符串的拼接</td></tr><tr><td>CONCAT_W</td><td>使用指定的字符将目标字符串进接</td></tr><tr><td>FORMAT()</td><td>数字格式化</td></tr><tr><td>LOWER()</td><td>串全部转换为小写</td></tr><tr><td>UPPER()</td><td>串全部转换为大写</td></tr><tr><td>LEFT()</td><td>左侧的字符串</td></tr><tr><td>RIGHT()</td><td>右侧的字符串</td></tr><tr><td>LENGTH()</td><td>计算字符串的长度</td></tr><tr><td>LTRIM()</td><td>前导的空格</td></tr><tr><td>RTRIM()</td><td>后续的空格</td></tr><tr><td>TRIM()</td><td>前导和后续的空格</td></tr><tr><td>SUBSTRING()</td><td>字符串截取</td></tr><tr><td>SUBSTRING_INDEX()</td><td>分隔字符串</td></tr><tr><td>REPLACE()</td><td>字符串替换</td></tr><tr><td>[NOT] LIKE</td><td>模式匹配</td></tr></tbody></table><h4 id="CONCAT-与CONCAT-WS"><a href="#CONCAT-与CONCAT-WS" class="headerlink" title="CONCAT()与CONCAT_WS()"></a>CONCAT()与CONCAT_WS()</h4><p>他们的作用都是将字符进行连接，但是他们之间也有一点小区别。下面是使用<code>CONCAT()</code>将<code>My</code>和<code>SQL</code>字符进行连接：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/1-1.png"></p><p><code>CONCAT_WS()</code>代表使用<strong>指定字符</strong>进行连接，最少需要三个参数，第一个参数为指定连接符：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/1-2.png"></p><h4 id="LEFT-与RIGHT"><a href="#LEFT-与RIGHT" class="headerlink" title="LEFT()与RIGHT()"></a>LEFT()与RIGHT()</h4><p>他们是进行左右侧的字符获取，需要两个参数，第一个参数告诉他从哪个字符串中获取，第二个参数是获取的长度：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/1-3.png"></p><h4 id="LTRIM-、RTRIM-与-TRIM"><a href="#LTRIM-、RTRIM-与-TRIM" class="headerlink" title="LTRIM()、RTRIM() 与 TRIM()"></a>LTRIM()、RTRIM() 与 TRIM()</h4><p>这三个函数都是可以去掉字符串中含有的空格，我们先使用LENGTH()函数来统计含有空格的字符串的长度，分别去掉其中字符<strong>前导、后导和全部</strong>的空格，下面我们来看一下他们的区别：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/1-4.png"></p><p>另外<code>TRIM()</code>函数出除了能删除空格以外，还能删除字符串中自定字符：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/1-5.png"></p><p>上面操作就是将<code>??MySQL???</code>中的前导<code>?</code>删除，若要删除后导的<code>?</code>，只需将<code>LEADING</code>替换成<code>TRAILING</code>，若要将其中的<code>?</code>都删掉，替换成<code>BOTH</code>关键字即可。</p><h4 id="SUBSTRING-、SUBSTRING-INDEX-与REPLACE"><a href="#SUBSTRING-、SUBSTRING-INDEX-与REPLACE" class="headerlink" title="SUBSTRING()、SUBSTRING_INDEX()与REPLACE()"></a>SUBSTRING()、SUBSTRING_INDEX()与REPLACE()</h4><p><strong>REPLACE()函数</strong><br>思考：那如果在<code>MySQL</code>中间也出现了?号，还能使用上面的函数进行删除吗？</p><p>答疑：很显然使用之前学到过的函数是不能将中间部分的?删除，那么我们如何将中间的?去掉呢？就是使用<code>REPLACE()</code>函数进行字符串的替换。<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/1-6.png"></p><p>表示将字符串中的?全部替换成<code>&#39;&#39;</code>，但使用时并不表示只能一个字符替换一个字符，可以一对多形式或多对一形式：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/1-7.png"></p><p><strong>SUBSTRING()函数</strong><br><code>SUBSTRING()</code>函数是用于字符串的截取：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/1-8.png"><br>表示从第一位（注意第一位为<code>1</code>而非<code>0</code>）开始截取<code>MySQL</code>的二位字符。</p><p>**SUBSTRING_INDEX()**函数<br><code>SUBSTRING_INDEX()</code>函数是用于通过特殊符号将字符串分隔的：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/1-9.png"></p><p>表示将字符串<code>www.educoder.net</code>通过.进行分隔，可从前后取字符串。</p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充，具体任务如下：</p><ul><li>以首字母大写，其他字母小写的方式显示所有员工的姓名。<br><code>employee</code>员工表数据结构如下：</li></ul><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>lYN</td></tr><tr><td>2</td><td>wZQ</td></tr><tr><td>3</td><td>xLC</td></tr><tr><td>4</td><td>aLW</td></tr><tr><td>5</td><td>lZY</td></tr></tbody></table><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+------+</span><br><span class="hljs-section">| Name |</span><br><span class="hljs-section">+------+</span><br>| Lyn  |<br>| Wzq  |<br>| Xlc  |<br>| Alw  |<br><span class="hljs-section">| Lzy  |</span><br><span class="hljs-section">+------+</span><br></code></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>select concat ( upper(left(Name,<span class="hljs-number">1</span>)) , lower(right(Name,<span class="hljs-number">2</span>) )) <span class="hljs-keyword">as</span> Name <span class="hljs-keyword">from</span> employee ;<br>########## End ##########<br><br></code></pre></td></tr></table></figure><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：根据公式修改学生的最终成绩。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>本章节我们主要介绍<strong>数值运算符</strong>和<strong>比较运算符</strong>与函数的使用。</p><h4 id="数值运算符"><a href="#数值运算符" class="headerlink" title="数值运算符"></a>数值运算符</h4><p>我们常说的“加减乘除”就是数值运算符，例如：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-1.png"></p><p>下面是常与数值结合使用的函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>CEIL()</td><td>进一（向上）取整</td></tr><tr><td>FLOOR()</td><td>舍一（向下）取整</td></tr><tr><td>POWER()</td><td>幂运算</td></tr><tr><td>SQRT()</td><td>平方根运算</td></tr><tr><td>ROUND()</td><td>四舍五入</td></tr><tr><td>ABS()</td><td>绝对值计算</td></tr><tr><td>RAND()</td><td>生产0-1的随机数</td></tr><tr><td>TRUNCATE()</td><td>数字截取</td></tr><tr><td>DIV</td><td>整数除法</td></tr><tr><td>MOD</td><td>取余数(取模)</td></tr></tbody></table><p><strong>CEIL()和FLOOR()</strong><br>这两个函数都是对值进行取整，<code>CEIL()</code>函数是<strong>向上取整</strong>，<code>FLOOR()</code>是<strong>向下取整</strong>：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-2.png"></p><p><strong>DIV和MOD</strong><br>我们可以直接对数值使用<code>/</code>（除法）或<code>%（</code>取余），但仅此是计算远远不及我们的需求。</p><p>因此还提供了<code>DIV</code>整数除法函数：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-3.png"></p><p>但<code>MOD</code>取模函数与<code>%</code>计算是<strong>等价</strong>的：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-4.png"></p><p><strong>ROUND()、POWER()、SQRT()和TRUNCATE()</strong></p><ul><li><p><code>ROUND()</code>函数：四舍五入， 下面示例为：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-5.png"></p></li><li><p><code>POWER()</code>函数：幂运算， 下面示例为<code>2^3=8</code>：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-6.png"></p></li><li><p>SQRT()函数：平方根运算， 下面示例为：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-7.png"><br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-8.png"></p></li><li><p><code>TRUNCATE()</code>函数：数字截取，只做截取，不发生四舍五入， 下面示例为：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-9.png"></p></li></ul><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>除了数值运算符，<code>MySQL</code>中还有比较运算符：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>[NOT] BETWEEN…AND…</td><td>[不]在范围内</td></tr><tr><td>[NOT] IN()</td><td>[不]在列出值范围内</td></tr><tr><td>IS [NOT] NULL</td><td>[不]为空</td></tr></tbody></table><ul><li><p><code>BETWEEN...AND...</code>：指定一个范围，只要选择的数字在这个范围内则为<code>1</code>否则为<code>0</code>；<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-10.png"></p></li><li><p><code>IN()</code>：指定列出值，只要选择的数字存在其中则为<code>1</code>否则为<code>0</code>；<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-11.png"></p></li><li><p><code>IS NULL</code>：判断字段是否为空。<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-12.png"></p></li></ul><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充，具体任务如下：</p><ul><li>根据下面表达式修改学生的最终成绩，结果使用四舍五入保留两位小数：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/2-13.png"></li></ul><p><code>Score</code>表结构如下：</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>s_name</td><td>姓名</td></tr><tr><td>s_score</td><td>成绩</td></tr></tbody></table><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+-----------+---------+<br>|<span class="hljs-string"> s_name    </span>|<span class="hljs-string"> s_score </span>|<br>+-----------+---------+<br>|<span class="hljs-string"> Amanda    </span>|<span class="hljs-string">   72.93 </span>|<br>|<span class="hljs-string"> Evie      </span>|<span class="hljs-string">   12.63 </span>|<br>|<span class="hljs-string"> Jennifer  </span>|<span class="hljs-string">   82.43 </span>|<br>|<span class="hljs-string"> Katherine </span>|<span class="hljs-string">   63.12 </span>|<br>|<span class="hljs-string"> Megan     </span>|<span class="hljs-string">   59.02 </span>|<br>|<span class="hljs-string"> Oink      </span>|<span class="hljs-string">   27.43 </span>|<br>|<span class="hljs-string"> Priti     </span>|<span class="hljs-string">   43.33 </span>|<br>|<span class="hljs-string"> Reiko     </span>|<span class="hljs-string">   88.93 </span>|<br>|<span class="hljs-string"> Sarah     </span>|<span class="hljs-string">   92.33 </span>|<br>|<span class="hljs-string"> Sheila    </span>|<span class="hljs-string">   81.23 </span>|<br>|<span class="hljs-string"> Wallis    </span>|<span class="hljs-string">   74.62 </span>|<br>|<span class="hljs-string"> Yetta     </span>|<span class="hljs-string">   72.93 </span>|<br>+-----------+---------+<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：求完根号后就四舍五入取两位小数，与 <code>s_score</code> 相减后再截取两位小数做最终输出。</p><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>update Score set s_score = truncate( s_score-round(sqrt( (power(<span class="hljs-number">4</span>,<span class="hljs-number">4</span>)-power(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>) ) / <span class="hljs-number">4</span> ),<span class="hljs-number">2</span>) ,<span class="hljs-number">2</span>) ;<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="日期时间函数和流程控制类函数"><a href="#日期时间函数和流程控制类函数" class="headerlink" title="日期时间函数和流程控制类函数"></a>日期时间函数和流程控制类函数</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：根据要求编写符合输出条件的SQL。</p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>略</p><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><p>本章节介绍<code>MySQL</code>中的日期时间函数，下面列出常用的函数：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>NOW()</td><td>当前日期和时间</td></tr><tr><td>CURDATE()</td><td>当前日期</td></tr><tr><td>CURTIME()</td><td>当前时间</td></tr><tr><td>DATE_ADD()</td><td>日期变化</td></tr><tr><td>DATEDIFF()</td><td>日期差值</td></tr><tr><td>DATE_FORMAT()</td><td>日期格式化</td></tr><tr><td>YEAR()</td><td>返回日期的年份</td></tr><tr><td>MONTH()</td><td>返回日期的月份</td></tr><tr><td>WEEK()</td><td>返回日期的周号</td></tr></tbody></table><p><strong>NOW()、CURDATE()和CURTIME()</strong></p><ul><li><p><code>NOW()</code>返回当前日期和时间；<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/3-1.png"></p></li><li><p><code>CURDATE()</code>则单独返回当前日期，<code>CURTIME()</code>则返回当前时间。<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/3-2.png"></p></li></ul><p><strong>DATE_ADD()、DATEDIFF()和DATE_FORMAT()</strong></p><ul><li><p><code>DATE_ADD()</code>从函数名称来看会想当然的认为是时间的添加，但其实可以添加也可以减少，因此我们将其说明为<strong>日期的变化</strong>，第一个参数为指定时间，第二个参数为增加（减少）的单位值（<code>YEAR</code>、<code>MONTHS</code>、<code>WEEK</code>、<code>DAY</code>）；<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/3-3.png"></p></li><li><p><code>DATEDIFF()</code>函数则返回二个日期之间的差值；<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/3-4.png"></p></li><li><p><code>DATE_FORMAT()</code>函数为日期格式化，也就是将我们常见的日期格式转换成另一种格式。<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/3-5.png"></p></li></ul><p>以下是在<code>format</code>字符串中常用的说明符，更多的说明符可在 <code>MySQL</code> 官方文档中进行查看：</p><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%d</td><td>月的天，数值（00-31）</td></tr><tr><td>%H</td><td>小时 （00-23）</td></tr><tr><td>%h</td><td>小时 （01-12）</td></tr><tr><td>%m</td><td>月，数值（00-12）</td></tr><tr><td>%p</td><td>AM 或 PM</td></tr><tr><td>%s</td><td>秒（00-59）</td></tr><tr><td>%T</td><td>时间，24-小时（hh:mm:ss）</td></tr><tr><td>%Y</td><td>年，4 位</td></tr></tbody></table><p><strong>YEAR()和MONTH()</strong><br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/3-6.png"></p><h4 id="流程控制类函数"><a href="#流程控制类函数" class="headerlink" title="流程控制类函数"></a>流程控制类函数</h4><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>IF()</td><td>判断，流程控制</td></tr><tr><td>IFNULL()</td><td>字段值是否为空</td></tr><tr><td>CASE</td><td>搜索语句</td></tr></tbody></table><ul><li><p><code>IF()</code>函数：<code>IF(a,b,c)</code> 如果<code>a</code>为真返回<code>b</code>，否则返回<code>c</code>；<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/3-7.png"></p></li><li><p><code>IFNULL()</code>函数：<code>IFNULL(a,b)</code> 如果<code>a</code>不为<code>null</code>返回<code>a</code>，否则返回<code>b</code>；<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/3-8.png"></p></li><li><p><code>CASE</code>：<code>CASE WHEN a then b end</code> 判断如果<code>a</code>为真返回<code>b</code>。<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/3-9.png"></p></li></ul><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充，具体任务如下：</p><ol><li>查询所有学生的出生年份及至<code>2019-01-01</code>时的年龄；</li><li>查询所有课程中的最高分、最低分、平均分和及格率，按课程<code>id</code>升序输出。</li></ol><p><code>Student</code>表结构：</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>s_id</td><td>学生id</td></tr><tr><td>s_name</td><td>学生姓名</td></tr><tr><td>s_birth</td><td>学生生日</td></tr><tr><td>s_sex</td><td>学生性别</td></tr></tbody></table><p><code>Course</code>表结构：</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>c_id</td><td>课程id</td></tr><tr><td>c_name</td><td>课程名</td></tr></tbody></table><p><code>Score</code>表结构：</p><table><thead><tr><th>字段名</th><th>说明</th></tr></thead><tbody><tr><td>s_id</td><td>学生id</td></tr><tr><td>c_id</td><td>课程id</td></tr><tr><td>s_score</td><td>学生成绩</td></tr></tbody></table><h3 id="测试说明-2"><a href="#测试说明-2" class="headerlink" title="测试说明"></a>测试说明</h3><p>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br><br>##########  查询学生出生年份及年龄 ##########<br>select year(s_birth) <span class="hljs-keyword">as</span> year ,(<span class="hljs-number">2019</span>-year(s_birth)) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;年龄&#x27;</span> <span class="hljs-keyword">from</span> Student;<br><br><br>##########  查询课程的最高分、最低分、平均分和及格率 #########<br>select Score.c_id <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;课程id&#x27;</span>,c_name <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;课程名&#x27;</span>, max(s_score) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;最高分&#x27;</span>,min(s_score) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;最低分&#x27;</span>,round(avg(s_score),<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;平均分&#x27;</span> ,round((count(Score.s_score&gt;=<span class="hljs-number">60</span> or null)/count(s_score))*<span class="hljs-number">100</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;及格率&#x27;</span> <span class="hljs-keyword">from</span> Student,Course,Score <span class="hljs-keyword">where</span> Score.c_id = Course.c_id group by Score.c_id;<br><br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><h3 id="任务描述-3"><a href="#任务描述-3" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：定义一个函数，输出三个数中的最大值。</p><h3 id="相关知识-3"><a href="#相关知识-3" class="headerlink" title="相关知识"></a>相关知识</h3><p>我们学习了<code>MySQL</code>中的内置函数，但是我们可能经常需要功能，但这些功能系统并未提供，那么，就需要自定义，下面我们就一起来学习<code>MySQL</code>的自定义函数。</p><h4 id="自定义函数-1"><a href="#自定义函数-1" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>用户自定义函数<code>（user-defined function， UDF）</code>是一种对<code>MySQL</code>扩展的途径，其用法与内置函数相同。</p><p>自定义函数和内置函数一样，具有两个必备条件：</p><ul><li>参数：不一定要有；</li><li>返回值：一定要有。</li></ul><p>函数可以返回<strong>任意类型</strong>的值，同样可以接收这些类型的参数，且函数的参数和返回值之间没有必然的内在联系。</p><p>创建自定义函数<code>SQL</code>：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">delimiter</span> //　　#如果函数体只有一条语句, <span class="hljs-keyword">begin</span>和<span class="hljs-keyword">end</span>可以省略, 同时<span class="hljs-keyword">delimiter</span>也可以省略<br>　　<span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> 函数名(形参列表) <span class="hljs-keyword">returns</span> 返回类型　　#注意是retruns<br>　　<span class="hljs-keyword">begin</span><br>　　　　函数体　　　　#函数内定义的变量如：<span class="hljs-keyword">set</span> @x = <span class="hljs-number">1</span>; 变量x为全局变量，在函数外面也可以使用<br>　　　　返回值<br>　　<span class="hljs-keyword">end</span><br>　　//<br><span class="hljs-keyword">delimiter</span> ;<br></code></pre></td></tr></table></figure><p>关于函数体:</p><ol><li>函数体由合法的<code>SQL</code>语句构成；</li><li>函数体可以是简单的<code>SELECT</code>或<code>INSERT</code>语句；</li><li>函数体如果为复合结构则使用<code>begin...end</code>语句；</li><li>复合结构可以包含声明，循环，控制结构。<br><strong>自定义无参函数</strong><br>例如我们在上一章节中学习了系统自带的<code>NOW()</code>函数，他的输出形式是固定的，但是现在我想把输出用汉语表示，我们可以使用<code>DATA_FORMAT()</code>函数：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/4-1.png"></li></ol><p>但是如果我要经常使用到这个功能，难道要每次都来写吗？ 这样显然很麻烦，现在我们就将这个过程来封装成一个自定义函数，分析可知函数中只需含一句查询 <code>SQL</code> ，因此我们首次采用省略<code>delimiter</code>和<code>begin...end</code>的写法：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cos">CREATE FUNCTION f1() RETURNS VARCHAR(<span class="hljs-number">30</span>)<br><span class="hljs-keyword">RETURN</span> DATE_FORMAT(NOW(),&#x27;<span class="hljs-built_in">%Y</span>年<span class="hljs-built_in">%m</span>月<span class="hljs-built_in">%d</span>日 <span class="hljs-built_in">%H</span>点:<span class="hljs-built_in">%i</span>分:<span class="hljs-built_in">%s</span>秒&#x27;)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这样我们每次想要使用功能的时候就可以直接查询了，便捷了很多，例如：<br><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/4-2.png"></p><p><strong>自定义带参数的函数</strong><br>上面的自定义函数为无参类型的，现在我们来定义一个计<strong>算两个数的和</strong>的函数：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">delimiter</span> //<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">FUNCTION</span> f2(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">return</span> a + b;<br><span class="hljs-keyword">end</span><br>//<br><span class="hljs-keyword">delimiter</span> ;<br></code></pre></td></tr></table></figure><p><img src="/img/MySQL/%E5%85%B6%E4%BB%96%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/4-3.png"></p><p><strong>删除自定义函数</strong><br>当我们不再需要自定义的函数时，我们可以使用删除 <code>SQL</code> 将其删除：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">drop <span class="hljs-keyword">function</span> [<span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span>] <span class="hljs-keyword">function</span><span class="hljs-number">_n</span>ame;<br></code></pre></td></tr></table></figure><h4 id="自定义函数中定义变量"><a href="#自定义函数中定义变量" class="headerlink" title="自定义函数中定义变量"></a>自定义函数中定义变量</h4><p><strong>定义全局变量</strong><br>赋值的操作符：<code>=</code>或<code>:=</code>。<br>作用域：针对于当前会话（连接）有效，同于会话变量的作用域，应用在任何地方，也就是<code>begin...end</code>里面或<code>begin...end</code>外边。</p><ul><li><p>声明变量并初始化</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">SET</span> @用户变量名 = 值;<br><span class="hljs-built_in">SET</span> @用户变量名 := 值;<br></code></pre></td></tr></table></figure><p><strong>定义局部变量</strong><br>作用域：仅仅在定义它的<code>begin...end</code>中有效。</p></li><li><p>声明</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> 变量名 类型;<br><span class="hljs-keyword">DECLARE</span> 变量名 类型 <span class="hljs-keyword">DEFAULT</span> 值;<br></code></pre></td></tr></table></figure><p><strong>赋值</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">SET</span> 局部变量名 = 值;<br><span class="hljs-built_in">SET</span> 局部变量名 := 值;<br></code></pre></td></tr></table></figure></li></ul><h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><p>自定义函数中可以使用流程控制来控制语句的执行。</p><p><code>MySQL</code> 中可以使用<code>IF</code>语句、<code>CASE</code>语句、和<code>WHILE</code>语句等来进行流程控制：</p><ul><li><p><code>IF</code>语句<br><code>IF</code>语句用来进行条件判断。根据是否满足条件，将执行不同的语句。其语法的基本形式如下：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">IF</span> search_condition THEN statement_list<br>   [<span class="hljs-keyword">ELSEIF</span> search_condition THEN statement_list] ...<br>   [<span class="hljs-keyword">ELSE</span> statement_list]<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br></code></pre></td></tr></table></figure></li><li><p><code>CASE</code>语句<br>也用来进行条件判断，其可以实现比<code>IF</code>语句更复杂的条件判断。<code>CASE</code>语句在上一章节中讲过了，这里就不做说明了。</p></li><li><p><code>WHILE</code>语句<br><code>WHILE</code>语句是当满足条件时，执行循环内的语句。<code>WHILE</code>语句的基本语法形式如下：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">[begin_label:] <span class="hljs-keyword">WHILE</span> search_condition <span class="hljs-keyword">DO</span><br>statement_list<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">WHILE</span> [end_label]<br></code></pre></td></tr></table></figure><p><code>begin_label</code>参数和<code>end_label</code>参数分别表示循环开始和结束的标志，两个标志必须相同，而且都可以省略；<code>statement_list</code>参数表示需要循环执行的语句。</p></li></ul><h3 id="编程要求-3"><a href="#编程要求-3" class="headerlink" title="编程要求"></a>编程要求</h3><p>请仔细阅读右侧代码，根据方法内的提示，在<code>Begin - End</code>区域内进行代码补充，具体任务如下：</p><ul><li>定义一个函数，输出三个数中的最大值，函数形式为：</li><li><code>fn_three_max(param_1 int, param_2 int, param_3 int)</code>。</li></ul><h3 id="测试说明-3"><a href="#测试说明-3" class="headerlink" title="测试说明"></a>测试说明</h3><p>补充完代码后，点击测评，平台会对你编写的代码进行测试，当你的结果与预期输出一致时，即为通过。</p><p>预期输出：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+--------+</span><br><span class="hljs-section">| maxNum |</span><br><span class="hljs-section">+--------+</span><br><span class="hljs-section">|    999 |</span><br><span class="hljs-section">+--------+</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-3"><a href="#我的代码-3" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean">#请在此添加实现代码<br>########## Begin ##########<br>create function fn_three_max(param_1 int,param_2 int, param_3 int)returns int<br>    return <span class="hljs-number">999</span>;<br><br>########## End ##########<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用聚合函数查询</title>
    <link href="/2022/11/02/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/"/>
    <url>/2022/11/02/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>聚合：通俗的讲就是聚集到一起；函数：可以理解为一个方法。那么组合起来我们就可以理解为是一个将某种东西聚集在一起的一个方法。而在MySQL&#96;&#96;中这个被聚集的则是一组行中的某个列。<br>接着，我们来看聚合函数的特点：</p><ul><li>每个函数接收一个参数（字段名或者表达式）；</li><li>默认情况下，组函数忽略列值为<code>null</code>的行，不参与计算；</li><li>不允许出现嵌套 比如<code>sum(max(xx))</code>；</li><li>常与<code>group by</code>关键字一起使用。（后面章节会讲到）；<br>一个<code>SELECT</code>子句中可出现多个聚集函数。</li></ul><h2 id="COUNT-函数"><a href="#COUNT-函数" class="headerlink" title="COUNT( )函数"></a>COUNT( )函数</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：<br>1.使用<code>COUNT()</code>函数查询数据表中总数据量，<br>2.使用<code>COUNT()</code>函数统计班级总人数。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何使用<code>COUNT()</code>函数。</p><h4 id="COUNT-函数基本使用"><a href="#COUNT-函数基本使用" class="headerlink" title="COUNT()函数基本使用"></a>COUNT()函数基本使用</h4><p><code>COUNT()</code>函数是用来统计记录的总条数。<br><code>select count(*/字段名) from 数据表;</code></p><p>例子说明：<br>假设我们现在有一张表<code>tb_dept</code>；内容如下：</p><table><thead><tr><th>id</th><th>name</th><th>dept_id</th></tr></thead><tbody><tr><td>1</td><td>Nancy</td><td>301</td></tr><tr><td>2</td><td>Tob</td><td>303</td></tr><tr><td>3</td><td>Carly</td><td>301</td></tr></tbody></table><p>我们需要获取整张表有多少条数据，那么我们就可以使用<code>COUNT(*)</code>来查询了。<br><img src="/img/MySQL/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/1-1.png"></p><p>那么，现在同样是这张表，我假若想知道<code>301</code>部门一共有少人，我们可以思考该怎么查询？</p><p>相信大家都想到了，我们可以使用<code>where</code>条件进行查询：<br><img src="/img/MySQL/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/1-2.png"></p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码：<br>我们为你提供了一张<code>tb_class</code>表，内容如下：</p><table><thead><tr><th>id</th><th>name</th><th>classid</th></tr></thead><tbody><tr><td>1</td><td>Emma</td><td>366</td></tr><tr><td>2</td><td>Mary</td><td>367</td></tr><tr><td>3</td><td>Allen</td><td>367</td></tr><tr><td>4</td><td>Kevin</td><td>367</td></tr><tr><td>5</td><td>Rose</td><td>366</td></tr><tr><td>6</td><td>James</td><td>367</td></tr><tr><td>7</td><td>Hale</td><td>366</td></tr><tr><td>8</td><td>David</td><td>367</td></tr></tbody></table><p>根据此表数据：</p><ol><li>查询该表中一共有多少条数据；</li><li>查询此表中<code>367</code> 班有多少位学生,以班级<code>id</code>和对应人数格式输出。</li></ol><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs delphi">count<span class="hljs-comment">(*)</span><br><span class="hljs-comment">8</span><br><span class="hljs-comment">classid    count(*)</span><br><span class="hljs-number">367</span>          <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE School;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## 查询该表中一共有多少条数据 ##########<br>select count(*) <span class="hljs-keyword">from</span> tb_class;<br><br>########## 查询此表中<span class="hljs-number">367</span>班有多少位学生 ##########<br>select classid ,count(*) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> classid = <span class="hljs-number">367</span>;<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="SUM-函数"><a href="#SUM-函数" class="headerlink" title="SUM( )函数"></a>SUM( )函数</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：</p><ol><li>使用<code>SUM()</code>函数查询数据表中学生的总成绩；</li><li>使用<code>SUM()</code>函数查询语文课程中学生的总成绩。</li></ol><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何使用<code>SUM()</code>函数。</p><h4 id="SUM-函数基本使用"><a href="#SUM-函数基本使用" class="headerlink" title="SUM()函数基本使用"></a>SUM()函数基本使用</h4><p><code>SUM()</code>函数是对数据表的某列进行求和操作。<br><code>select sum(字段名) from 数据表;</code></p><p>例子说明：<br>现在有一张<code>tb_Salary</code>表,内容如下：</p><table><thead><tr><th>id</th><th>name</th><th>Salary</th><th>Month</th></tr></thead><tbody><tr><td>1</td><td>Nancy</td><td>2300</td><td>11</td></tr><tr><td>2</td><td>Tob</td><td>5800</td><td>11</td></tr><tr><td>3</td><td>Carly</td><td>3200</td><td>11</td></tr><tr><td>4</td><td>Nancy</td><td>2600</td><td>12</td></tr><tr><td>5</td><td>Tob</td><td>6300</td><td>12</td></tr><tr><td>6</td><td>Carly</td><td>5200</td><td>12</td></tr></tbody></table><p>假设场景公司老板想知道公司总共给员工开了多少工资，则可以使用<code>SUM()</code>函数来进行统计了。<br><img src="/img/MySQL/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/2-1.png"></p><p>若想得知<code>Tob</code>同事在<code>11月</code>和<code>12月</code>的薪水一共有多少，加上<code>where</code>条件即可。<br><img src="/img/MySQL/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/2-2.png"></p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码，我们为你提供了一张<code>tb_class</code>表，内容如下：</p><table><thead><tr><th>id</th><th>name</th><th>course</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>Emma</td><td>语文</td><td>86</td></tr><tr><td>2</td><td>Mary</td><td>语文</td><td>79</td></tr><tr><td>3</td><td>Allen</td><td>语文</td><td>92</td></tr><tr><td>4</td><td>Emma</td><td>英语</td><td>116</td></tr><tr><td>5</td><td>Mary</td><td>英语</td><td>95</td></tr><tr><td>5</td><td>Allen</td><td>英语</td><td>100</td></tr></tbody></table><p>根据此表数据：</p><ol><li>查询该表中学生的总成绩； </li><li>查询学生<code>语文</code>课程的总分数。</li></ol><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-variable">score</span>)</span><br><span class="hljs-number">568</span><br><span class="hljs-variable">course</span>    <span class="hljs-function"><span class="hljs-title">sum</span>(<span class="hljs-variable">score</span>)</span><br>语文        <span class="hljs-number">257</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE School;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## 查询所有学生总分数 ##########<br>select sum(score) <span class="hljs-keyword">from</span> tb_class;   <br><br>########## 查询学生语文科目的总分数 ##########<br>select course,sum(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course=<span class="hljs-string">&#x27;语文&#x27;</span>;<br><br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="AVG-函数"><a href="#AVG-函数" class="headerlink" title="AVG( )函数"></a>AVG( )函数</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用<code>AVG()</code>函数查询学生各科目的平均分数。</p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何使用<code>AVG()</code>函数。</p><h4 id="AVG-函数基本使用"><a href="#AVG-函数基本使用" class="headerlink" title="AVG()函数基本使用"></a>AVG()函数基本使用</h4><p><code>AVG()</code>函数是对数据表的某列进行求平均值操作。<br><code>select avg(字段名) from 数据表;</code></p><p>例子说明：<br>现在有一张<code>tb_Salary</code>表,内容如下：</p><table><thead><tr><th>id</th><th>name</th><th>Salary</th><th>Month</th></tr></thead><tbody><tr><td>1</td><td>Nancy</td><td>2300</td><td>11</td></tr><tr><td>2</td><td>Tob</td><td>5800</td><td>11</td></tr><tr><td>3</td><td>Carly</td><td>3200</td><td>11</td></tr><tr><td>4</td><td>Nancy</td><td>2600</td><td>12</td></tr><tr><td>5</td><td>Tob</td><td>6300</td><td>12</td></tr><tr><td>6</td><td>Carly</td><td>5200</td><td>12</td></tr></tbody></table><p>假设场景，老板想知道公司发给员工的薪水的平均值为多少，此时就可使用<code>AVG()</code>函数来计算了。<br><img src="/img/MySQL/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/3-1.png"></p><p>现在又想知道<code>Nancy</code>在<code>11-12月份</code>的薪水平均有多少，则可进行如下查询：<br><img src="/img/MySQL/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/3-2.png"></p><p>编程要求<br>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码，我们为你提供了一张<code>tb_class</code>表，内容如下：</p><table><thead><tr><th>id</th><th>name</th><th>course</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>Emma</td><td>语文</td><td>86</td></tr><tr><td>2</td><td>Mary</td><td>语文</td><td>79</td></tr><tr><td>3</td><td>Allen</td><td>语文</td><td>92</td></tr><tr><td>4</td><td>Emma</td><td>英语</td><td>116</td></tr><tr><td>5</td><td>Mary</td><td>英语</td><td>95</td></tr><tr><td>5</td><td>Allen</td><td>英语</td><td>101</td></tr></tbody></table><p>根据此表数据，查询表中该班级三位同学<code>语文</code>和<code>英语</code>课程的<strong>平均</strong>分数以及对应的课程名。</p><h3 id="测试说明-2"><a href="#测试说明-2" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">course</span>     <span class="hljs-function"><span class="hljs-title">avg</span>(<span class="hljs-variable">score</span>)</span><br>语文     <span class="hljs-number">85.66666666666667</span><br><span class="hljs-variable">course</span>     <span class="hljs-function"><span class="hljs-title">avg</span>(<span class="hljs-variable">score</span>)</span><br>英语         <span class="hljs-number">104</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE School;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## 查询学生语文科目的平均分数 ##########<br>select course,avg(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course = <span class="hljs-string">&#x27;语文&#x27;</span>;<br><br><br>########## 查询学生英语科目的平均分数 ##########<br>select course,avg(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course = <span class="hljs-string">&#x27;英语&#x27;</span>;<br><br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="MAX-函数"><a href="#MAX-函数" class="headerlink" title="MAX( )函数"></a>MAX( )函数</h2><h3 id="任务描述-3"><a href="#任务描述-3" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用<code>MAX()</code>函数查询各科中的最高分数。</p><h3 id="相关知识-3"><a href="#相关知识-3" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何使用<code>MAX()</code>函数。</p><h4 id="MAX-函数基本使用"><a href="#MAX-函数基本使用" class="headerlink" title="MAX()函数基本使用"></a>MAX()函数基本使用</h4><p><code>MAX()</code>函数是求某列的最大数值。<br><code>select max(字段名) from 数据表;</code></p><p>例子说明：<br>现在有一张<code>tb_Salary</code>表,内容如下：</p><table><thead><tr><th>id</th><th>name</th><th>Salary</th><th>Month</th></tr></thead><tbody><tr><td>1</td><td>Nancy</td><td>2300</td><td>11</td></tr><tr><td>2</td><td>Tob</td><td>5800</td><td>11</td></tr><tr><td>3</td><td>Carly</td><td>3200</td><td>11</td></tr><tr><td>4</td><td>Nancy</td><td>2600</td><td>12</td></tr><tr><td>5</td><td>Tob</td><td>6300</td><td>12</td></tr><tr><td>6</td><td>Carly</td><td>5200</td><td>12</td></tr></tbody></table><p>假设场景，老板想知道公司在<code>11-12月份</code>中月薪最高的是多少，此时就可使用<code>MAX()</code>函数来统计了。<br><img src="/img/MySQL/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/4-1.png"></p><p>这样就可以看到公司中月薪最高是多少了。我们也可查询<code>Carly</code>在<code>11-12月份</code>中月薪最高是多少：<br><img src="/img/MySQL/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/4-2.png"></p><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码，我们为你提供了一张<code>tb_class</code>表，内容如下：</p><table><thead><tr><th>id</th><th>name</th><th>course</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>Emma</td><td>语文</td><td>86</td></tr><tr><td>2</td><td>Mary</td><td>语文</td><td>79</td></tr><tr><td>3</td><td>Allen</td><td>语文</td><td>92</td></tr><tr><td>4</td><td>Emma</td><td>英语</td><td>116</td></tr><tr><td>5</td><td>Mary</td><td>英语</td><td>95</td></tr><tr><td>6</td><td>Allen</td><td>英语</td><td>100</td></tr></tbody></table><p>根据此表数据，分别查询<code>语文</code>和<code>英语</code>课程中的<strong>最高分数</strong>。</p><h3 id="测试说明-3"><a href="#测试说明-3" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">course</span>    <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">max</span></span>(<span class="hljs-variable">score</span>)</span><br>语文        <span class="hljs-number">92</span><br><span class="hljs-variable">course</span>    <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">max</span></span>(<span class="hljs-variable">score</span>)</span><br>英语        <span class="hljs-number">116</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-3"><a href="#我的代码-3" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE School;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## 查询语文课程中的最高分数 ##########<br>select course,max(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course = <span class="hljs-string">&#x27;语文&#x27;</span>;<br><br><br>########## 查询英语课程中的最高分数 ##########<br>select course,max(score) <span class="hljs-keyword">from</span> tb_class <span class="hljs-keyword">where</span> course = <span class="hljs-string">&#x27;英语&#x27;</span>;<br><br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="MIN-函数"><a href="#MIN-函数" class="headerlink" title="MIN( )函数"></a>MIN( )函数</h2><h3 id="任务描述-4"><a href="#任务描述-4" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用<code>MIN()</code>函数查询学生在各科中的最低分数。</p><h3 id="相关知识-4"><a href="#相关知识-4" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何使用<code>MIN()</code>函数。</p><h4 id="MIN-函数基本使用"><a href="#MIN-函数基本使用" class="headerlink" title="MIN()函数基本使用"></a>MIN()函数基本使用</h4><p><code>MIN()</code>函数是求某列的最小数值。<br><code>select min(字段名) from 数据表</code></p><p>例子说明：<br>现在有一张<code>tb_Salary</code>表,内容如下：</p><table><thead><tr><th>id</th><th>name</th><th>Salary</th><th>Month</th></tr></thead><tbody><tr><td>1</td><td>Nancy</td><td>2300</td><td>11</td></tr><tr><td>2</td><td>Tob</td><td>5800</td><td>11</td></tr><tr><td>3</td><td>Carly</td><td>3200</td><td>11</td></tr><tr><td>4</td><td>Nancy</td><td>2600</td><td>12</td></tr><tr><td>5</td><td>Tob</td><td>6300</td><td>12</td></tr><tr><td>6</td><td>Carly</td><td>5200</td><td>12</td></tr></tbody></table><p>假设场景，老板想知道公司<code>11-12月</code>份中月薪最低的是多少，此时就可使用<code>MIN()</code>函数来统计了。<br><img src="/img/MySQL/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/5-1.png"></p><p>我们仍可以快速查出<code>Tob</code>在<code>11-12月份</code>中月薪最低时是多少：<br><img src="/img/MySQL/%E4%BD%BF%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%9F%A5%E8%AF%A2/5-2.png"></p><p>编程要求<br>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码，我们为你提供了一张<code>tb_class</code>表，内容如下：</p><table><thead><tr><th>id</th><th>name</th><th>course</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>Emma</td><td>语文</td><td>86</td></tr><tr><td>2</td><td>Mary</td><td>语文</td><td>79</td></tr><tr><td>3</td><td>Allen</td><td>语文</td><td>92</td></tr><tr><td>4</td><td>Emma</td><td>英语</td><td>116</td></tr><tr><td>5</td><td>Mary</td><td>英语</td><td>95</td></tr><tr><td>5</td><td>Allen</td><td>英语</td><td>100</td></tr></tbody></table><p>根据此表数据，分别查询<code>语文</code>和<code>英语</code>课程中的<strong>最低分数</strong>。</p><h3 id="测试说明-4"><a href="#测试说明-4" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">course</span>    <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">min</span></span>(<span class="hljs-variable">score</span>)</span><br>语文        <span class="hljs-number">79</span><br><span class="hljs-variable">course</span>    <span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">min</span></span>(<span class="hljs-variable">score</span>)</span><br>英语        <span class="hljs-number">95</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>子查询</title>
    <link href="/2022/11/02/%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <url>/2022/11/02/%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>子查询允许把一个查询嵌套在另一个查询当中。子查询，又叫内部查询，相对于内部查询，包含内部查询的就称为外部查询。</p><p>子查询可以包含普通select可以包括的任何子句，比如：<code>distinct</code>、 <code>group by</code>、<code>order by</code>、 <code>limit</code> 、 <code>join</code> 等；但是对应的外部查询必须是以下语句之一：<code>select</code>、<code>insert</code>、<code>update</code>或者<code>delete</code>。</p><p>子查询的位置：<code>select</code> 中、<code>from</code> 后、<code>wher</code>e 中<code>group by</code>和<code>order by</code>中无实用意义。</p><h2 id="带比较运算符的子查询"><a href="#带比较运算符的子查询" class="headerlink" title="带比较运算符的子查询"></a>带比较运算符的子查询</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：查询大于所有平均年龄的员工姓名与年龄。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：<br>1.什么叫子查询，<br>2.比较运算符结合标量子查询的使用。</p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>子查询是指出现在其他<code>SQL</code>语句内的<code>SELECT</code>子句。</p><p>例如：<br><code>SELECT * FROM t1 WHERE col1=(SELECT col2 FROM t2);</code><br>子查询指嵌套在查询内部，且必须始终出现在圆括号内，子查询可以分为四类：</p><ul><li>标量子查询：返回单一值的标量，最简单的形式；</li><li>列子查询：返回的结果集是 <code>N</code> 行一列；</li><li>行子查询：返回的结果集是一行 <code>N</code> 列；</li><li>表子查询：返回的结果集是 <code>N</code> 行 <code>N</code> 列。</li></ul><h4 id="带比较运算符的子查询-1"><a href="#带比较运算符的子查询-1" class="headerlink" title="带比较运算符的子查询"></a>带比较运算符的子查询</h4><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于或等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>!&#x3D; 或 &lt;&gt;</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于或等于</td></tr></tbody></table><ul><li>带有比较运算符的子查询是指父查询和子查询使用比较运算符连接的嵌套查询；</li><li>使用场景：当用户能够确切的知道内层查询返回的是单个值时,可以使用比较运算符。</li></ul><p><strong>举个例子</strong>，现在有一张<code>employee</code>表数据：</p><table><thead><tr><th>id</th><th>name</th><th>dept_id</th></tr></thead><tbody><tr><td>1</td><td>Mary</td><td>101</td></tr><tr><td>2</td><td>Allen</td><td>102</td></tr><tr><td>3</td><td>kevin</td><td>101</td></tr><tr><td>4</td><td>Tom</td><td>102</td></tr><tr><td>5</td><td>Nancy</td><td>101</td></tr></tbody></table><p>我们查询与<code>Tom</code>在同一个部门的同事id和姓名以及部门<code>id</code>。<br>1.首先，可以查询<code>Tom</code>所在部门<code>id</code><br><img src="/img/MySQL/%E5%AD%90%E6%9F%A5%E8%AF%A2/1-1.png"></p><p>2.然后查询<code>dept_id=102</code>的同事<code>id</code>和姓名<br><img src="/img/MySQL/%E5%AD%90%E6%9F%A5%E8%AF%A2/1-2.png"></p><p>将上面两条简单的的<code>SQL</code>语句合并成一个嵌套查询：<br><img src="/img/MySQL/%E5%AD%90%E6%9F%A5%E8%AF%A2/1-3.png"></p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧编辑器补充代码，查询大于所有平均年龄的员工姓名与年龄。</p><p>我们为你提供了<code>tb_emp</code>表，数据如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>Mary</td><td>23</td></tr><tr><td>2</td><td>Allen</td><td>21</td></tr><tr><td>3</td><td>kevin</td><td>25</td></tr><tr><td>4</td><td>Tom</td><td>33</td></tr><tr><td>5</td><td>Nancy</td><td>28</td></tr></tbody></table><p>测试说明<br>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">name</span>     age<br><span class="hljs-attribute">Tom</span>      <span class="hljs-number">33</span><br><span class="hljs-attribute">Nancy</span>    <span class="hljs-number">28</span><br></code></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">########## Begin ##########<br>#<span class="hljs-number">1.</span>查询大于所有平均年龄的员工姓名与年龄<br>select name,age <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> age &gt; (select avg(age) <span class="hljs-keyword">from</span> tb_emp);<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="关键字子查询"><a href="#关键字子查询" class="headerlink" title="关键字子查询"></a>关键字子查询</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：根据要求使用关键字进行查询。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>由于列子查询返回的结果集是 <code>N </code>行一列，因此不能直接使用<code> =</code> 、<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>&lt;&gt;</code>这些比较标量结果的操作符。在列子查询中可以使用 <code>ALL</code>、<code>ANY</code>、<code>SOME</code> 和 <code>IN</code>关键字操作符。</p><p>为了完成本关任务，你需要掌握：如何在子查询中使用关键字进行查询。</p><h4 id="ALL关键字"><a href="#ALL关键字" class="headerlink" title="ALL关键字"></a><code>ALL</code>关键字</h4><p><code>ALL</code>必须接在一个比较运算符的后面，表示与子查询返回的<strong>所有值</strong>比较都为 <code>TRUE</code>则返回<code>TRUE</code>。</p><p><code>table1</code>表数据：</p><table><thead><tr><th>col1</th></tr></thead><tbody><tr><td>2</td></tr><tr><td>10</td></tr></tbody></table><p><code>table2</code>表数据：</p><table><thead><tr><th>col2</th></tr></thead><tbody><tr><td>5</td></tr><tr><td>12</td></tr><tr><td>20</td></tr></tbody></table><p>举个例子：<br><code>SELECT col1 FROM table1 WHERE col1 &gt; ALL (SELECT col2 FROM table2)</code><br>该查询语句不会返回任何结果，因为<code>col1</code>中没有比<code>col2</code>所有值都大的值。<br><img src="/img/MySQL/%E5%AD%90%E6%9F%A5%E8%AF%A2/2-1.png"></p><h4 id="ANY和SOME关键字"><a href="#ANY和SOME关键字" class="headerlink" title="ANY和SOME关键字"></a><code>ANY</code>和<code>SOME</code>关键字</h4><p><code>ANY</code>与比较操作符联合使用，表示与子查询返回的任何值比较为<code>TRUE</code> ，则返回<code>TRUE</code>。<br><code>SOME</code>是<code>ANY</code>的别名，一般用的比较少。</p><p>仍使用上面二张表的数据：<br><img src="/img/MySQL/%E5%AD%90%E6%9F%A5%E8%AF%A2/2-2.png"></p><p>在子查询中，返回的是<code>table2</code>的所有<code>col2</code>列的结果<code>（5,12,20）</code>，然后将<code>table1</code>中<code>col1</code>的值与之进行比较，只要大于<code>col2</code>的任何值则为<code>TRUE</code>，因此查询结果为<code>10</code>。</p><h4 id="IN关键字"><a href="#IN关键字" class="headerlink" title="IN关键字"></a><code>IN</code>关键字</h4><ul><li><code>IN</code>的意思就是指定的一个值是否在这个集合中，如果在就返回<code>TRUE</code>；否则就返回<code>FALSE</code>了，同<code>IN</code>(项1，项2，…)；</li><li><code>IN</code> 是 <code>= ANY</code> 的别名，二者相同，但 <code>NOT IN</code> 的别名却不是 <code>&lt;&gt; ANY</code> 而是 <code>&lt;&gt; SOME</code>。</li></ul><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>我们为你提供了如下数据表：<br><code>tb_salary</code>表数据：</p><table><thead><tr><th>id</th><th>position</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>Java</td><td>8000</td></tr><tr><td>2</td><td>Java</td><td>8400</td></tr><tr><td>3</td><td>Java</td><td>9000</td></tr><tr><td>4</td><td>Python</td><td>6500</td></tr><tr><td>5</td><td>Python</td><td>10000</td></tr></tbody></table><p>根据提供的数据，在右侧编辑器中补充代码：</p><ol><li><p>查询薪资表中比Java最高工资高的所有员工职位名称和薪资；</p></li><li><p>查询薪资表中比Java最低工资高的所有员工职位名称和薪资；</p></li><li><p>查询薪资表中职位为Java的所有员工职位名称和薪资。</p></li></ol><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">position</span>    salary<br> <span class="hljs-attribute">Python</span>     <span class="hljs-number">10000</span><br><span class="hljs-attribute">position</span>    salary<br>  <span class="hljs-attribute">Java</span>       <span class="hljs-number">8400</span><br>  <span class="hljs-attribute">Java</span>       <span class="hljs-number">9000</span><br>  <span class="hljs-attribute">Python</span>     <span class="hljs-number">10000</span><br><span class="hljs-attribute">position</span>    salary<br>  <span class="hljs-attribute">Java</span>       <span class="hljs-number">8000</span><br>  <span class="hljs-attribute">Java</span>       <span class="hljs-number">8400</span><br>  <span class="hljs-attribute">Java</span>       <span class="hljs-number">9000</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br>#请在此处添加实现代码<br>########## Begin ##########<br><br>#<span class="hljs-number">1.</span>使用 ALL 关键字进行查询<br>select position,salary <span class="hljs-keyword">from</span> tb_salary <span class="hljs-keyword">where</span> salary &gt; all (select salary <span class="hljs-keyword">from</span> tb_salary <span class="hljs-keyword">where</span> position = <span class="hljs-string">&#x27;Java&#x27;</span>);<br>#<span class="hljs-number">2.</span>使用 ANY 关键字进行查询<br>select position,salary <span class="hljs-keyword">from</span> tb_salary <span class="hljs-keyword">where</span> salary &gt; any (select salary <span class="hljs-keyword">from</span> tb_salary <span class="hljs-keyword">where</span> position = <span class="hljs-string">&#x27;Java&#x27;</span>);<br>#<span class="hljs-number">3.</span>使用 IN 关键字进行查询<br>select position,salary <span class="hljs-keyword">from</span> tb_salary <span class="hljs-keyword">where</span> position <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;Java&#x27;</span>);<br>########## End ##########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux综合应用</title>
    <link href="/2022/11/01/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/"/>
    <url>/2022/11/01/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用<code>c</code>语言编程模拟一个有应用背景的客户端、服务器交互类应用，包含文件读写功能。</p><h2 id="一、实验内容"><a href="#一、实验内容" class="headerlink" title="一、实验内容"></a>一、实验内容</h2><h3 id="1-开发情况介绍"><a href="#1-开发情况介绍" class="headerlink" title="1.开发情况介绍"></a>1.开发情况介绍</h3><h4 id="背景及需求说明"><a href="#背景及需求说明" class="headerlink" title="背景及需求说明"></a>背景及需求说明</h4><p>图书馆中有名称不同的图书，每种图书的数量有限，学生可以向借阅书籍，且每个学生借阅图书的数量有限。图书馆和学生分别作为系统的服务器和客户，学生端通过向图书馆服务器发送自己的姓名和书籍的方式来借阅书籍。同时可以进行书籍的归还和图书馆剩余书籍信息的查看。</p><h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><p>本人设计的项目为图书馆图书借阅简易系统，主要实现的功能如下：<br>图书馆菜单的显示，学生借书、还书，查看图书信息，借书记录的录入以及对各种不同情况的分析和处理。</p><h4 id="文件组成"><a href="#文件组成" class="headerlink" title="文件组成"></a>文件组成</h4><p>图书馆服务器程序：<code>server.c</code>（代码行数）<br>学生客户端程序：<code>client.c</code> （代码行数）<br>书籍信息记录的文本文件：<code>BookInfo.txt</code><br>编译后的可执行文件<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/1.png"></p><h3 id="2-程序演示"><a href="#2-程序演示" class="headerlink" title="2.程序演示"></a>2.程序演示</h3><p>起始图书馆书籍信息<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-0.png"></p><h4 id="（1）菜单显示"><a href="#（1）菜单显示" class="headerlink" title="（1）菜单显示"></a>（1）菜单显示</h4><p>在文件目录下先后在两个终端窗口运行<code>server</code>和<code>client</code>程序，当客户端连接上服务器后会显示图书馆菜单界面，输入序号会执行相关操作<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-1.png"></p><h4 id="（2）借书"><a href="#（2）借书" class="headerlink" title="（2）借书"></a>（2）借书</h4><p>在客户端终端输入序号<code>1</code>执行借书操作<br>没有借阅记录的学生会录入学生的姓名，返回菜单界面：<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-2-1.png"></p><p>书名不存在会重新返回菜单界面且不录入名字：<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-2-2.png"></p><p>之前有借阅记录会查询该学生的当前借阅书籍的数量，数量限制为5本<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-2-3.png"></p><p>超过5本会有提醒<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-2-4.png"></p><p>当要借的书籍在图书馆没有剩余时会提示书籍目前不可借<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-2-5.png"></p><h4 id="（3）还书"><a href="#（3）还书" class="headerlink" title="（3）还书"></a>（3）还书</h4><p>输入序号<code>2</code>可以执行还书操作，输姓名后程序会查询是否有你的借书记录<br>查询到借书记录后则会提示你输入所借阅书籍的书名<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-3-1.png"></p><p>输入书名错误或没有借阅该书会提示重新输入，知道输入自己已经借阅书籍的正确名字为止<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-3-2.png"></p><p>没有借书记录的会返回菜单界面<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-3-3.png"></p><h4 id="（4）图书情况显示"><a href="#（4）图书情况显示" class="headerlink" title="（4）图书情况显示"></a>（4）图书情况显示</h4><p>输入序号<code>3</code>会客户端将当前图书馆剩余书籍情况更新记录在同目录下的文本文<code>BookInfo.txt</code>中，客户端会从该文件中读取更新后的信息，并打印在服务器命令窗口。<br>执行该操作后服务器会提示信息已经更新<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-4-1.png"></p><p>打开<code>BookInfo.txt</code>文件可以看到更新后的书籍信息<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-4-2.png"></p><p>客户端也可以看到书籍信息<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-4-3.png"></p><p>（5）退出系统<br>在客户端输入序号4即可退出系统<br><img src="/img/Linux/Linux%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/2-5.png"></p><h4 id="（6）提示及注意事项"><a href="#（6）提示及注意事项" class="headerlink" title="（6）提示及注意事项"></a>（6）提示及注意事项</h4><ul><li>因为可能存在端口占用和网络连接问题，多以可能需要试着多运行几次，试着在客户端键入<code>ctrl+c</code>,或者等一段时间在运行程序，直至与客户端，出现菜单界面。（因为自己的计算机上偶尔会出现这样的问题）</li><li>如果客户端成功连接服务器，在程序运行过程中，请不要随意键入<code>ctrl+c</code>，否则服务器会出现死循环。（目前还没有解决该问题）</li><li>输入姓名和书名时请不要输入空格</li></ul><h3 id="3-实验结果总结"><a href="#3-实验结果总结" class="headerlink" title="3.实验结果总结"></a>3.实验结果总结</h3><p>本次实验实验总的来说基本上完成预期的效果，但是也存在很多问题。<br><strong>优点</strong>：<br>大致上能够完成学生向图书馆借书、还书的过程的模拟，实现的界面简单，易懂<br><strong>缺点</strong>：<br>程序在终端上运行，没有美观的界面。<br>就如上面注意事项中所提到的，程序可能存在端口占用和网络连接问题，所以就会存在客户端连接不上服务器的问题。<br>在程序运行过程中如果在客户端<code>ctrl+c</code>，服务器就会陷入死循环。<br>学生信息的录入不全面，如果优化的话，可以考虑将学号加入一起作为识别信息。<br>书籍的数量、信息等不够全面，可以加入更多的书籍和更详细的信息。<br>实现的相关功能不全面，只有简单的借书，还书操作。</p><h2 id="三、编程工作总结"><a href="#三、编程工作总结" class="headerlink" title="三、编程工作总结"></a>三、编程工作总结</h2><p>本次实验需要设想一个客户端和服务器的交互类应用场景，在思考应用背景的时候我就很犹豫，害怕应用的交互功能过于复杂，害怕代码量过大，怕编写到一半发现根本实现不了而放弃，思考很久才最后确定图书管理系统这个应用，并且系统的设定和最后要实现想功能在编写过程中也进行很多修改和简化。所以我意识到系统前期的设计方面一定要进行全面分析，包括自身能力的评估，时间的限制，以及各模块的相互调用和交互的实现也需要考虑在内。<br>之前对于文件的<code>IO</code>操作还不是很熟悉，这次也了解了<code>fopen</code>、<code>fclose</code>、<code>fread</code>、<code>fwrite</code>等函数的参数构成，基本功能的实现，加深了对于文件读写功能的认识。<br>本来想将服务器和客户端建立<code>TCP</code>连接的过程，服务器包括套接字设置、端口绑定、设置监听、接收客户端连接，客户端包括设置套接字、绑定端口发送连接请求等分别封装成两端的函数<code>connection</code>（具体可以在附录中查看代码或截图，<code>connection()</code>函数代码我还保留着）。但调用时客户端总是过了一分钟左右后有反应，在客户端<code>connect()</code>函数出出错，显示连接时间超时，查看很多方法修改试了很多次，都没有成功。所以暂时将这些过程和函数写在<code>main</code>函数中偏偏就能连接成功，实在不知道为什么，所以现在只能写在主函数了（可能现在用<code>connection()</code>函数可以成功连接了，但是我没有试），降低了程序结构性。<br>虽然最后的程序编写出来依旧看上去很简陋，但是这也是自己第一次完成代码量稍大的项目对于自己来说也是一定程度的锻炼吧，但其实自己还是很期待完整的完成一次团队项目</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>服务器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;arpa/inet.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/types.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/socket.h&gt;</span><br><span class="hljs-comment">#include &lt;netinet/in.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/types.h&gt;</span><br><br><span class="hljs-comment">#define BOOKSIZE     2048</span><br><span class="hljs-comment">#define STUSIZE      1024</span><br>char buf[<span class="hljs-number">1024</span>];<span class="hljs-regexp">//</span>接收缓存区<br>char sendbuf[<span class="hljs-number">1024</span>];<span class="hljs-regexp">//</span>发送缓存区<br>int BookIndex=<span class="hljs-number">0</span>;  <span class="hljs-regexp">//</span>用于书本数组的下标<br>int StuIndex=<span class="hljs-number">0</span>;  <span class="hljs-regexp">//</span>用于学生数组的下标<br>struct Book<br>&#123;<br>char book_name[<span class="hljs-number">32</span>];<br>char book_author[<span class="hljs-number">32</span>];<br>int book_count;<span class="hljs-regexp">//</span>书籍数量<br>&#125;;<br>typedef struct Book book;<br><br>struct Student              <br>&#123;<br>char name[<span class="hljs-number">32</span>];<br>char *stu_book[<span class="hljs-number">5</span>];<span class="hljs-regexp">//</span>每个学生的个人借书名单<br>int count;<br>&#125;;                             <br>typedef struct Student stu;<br>book *BookList[BOOKSIZE] = &#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-regexp">//</span>结构体指针数组，存放各个结构体的首地址。<br>stu *StuList[STUSIZE] = &#123;<span class="hljs-number">0</span>&#125;;   <span class="hljs-regexp">//</span>结构体指针数组<br><br>void InitBook()  <span class="hljs-regexp">//</span>初始化<span class="hljs-number">5</span>本书<br>&#123;<br>BookList[BookIndex]=(book *)malloc(sizeof(book) * <span class="hljs-number">1</span>);   <br><span class="hljs-keyword">if</span> (NULL==BookList[BookIndex])<br>&#123;<br>printf(<span class="hljs-string">&quot;malloc failure!\n&quot;</span>);<br>&#125;<br>strcpy(BookList[BookIndex]-&gt;book_name,<span class="hljs-string">&quot;book1&quot;</span>);<br>strcpy(BookList[BookIndex]-&gt;book_author,<span class="hljs-string">&quot;Jack&quot;</span>);<br>BookList[BookIndex]-&gt;book_count=<span class="hljs-number">5</span>;                      <br>BookIndex++;<br><br>BookList[BookIndex]=(book *)malloc(sizeof(book) * <span class="hljs-number">1</span>);  <br><span class="hljs-keyword">if</span> (NULL==BookList[BookIndex])<br>&#123;<br>printf(<span class="hljs-string">&quot;malloc failure!\n&quot;</span>);<br>&#125;<br>strcpy(BookList[BookIndex]-&gt;book_name,<span class="hljs-string">&quot;book2&quot;</span>);<br>strcpy(BookList[BookIndex]-&gt;book_author,<span class="hljs-string">&quot;Tom&quot;</span>);<br>BookList[BookIndex]-&gt;book_count=<span class="hljs-number">3</span>;                  <br>BookIndex++;<br><br>BookList[BookIndex]=(book *)malloc(sizeof(book) * <span class="hljs-number">1</span>);   <br><span class="hljs-keyword">if</span> (NULL==BookList[BookIndex])<br>&#123;<br>printf(<span class="hljs-string">&quot;malloc failure!\n&quot;</span>);<br>&#125; <br>strcpy(BookList[BookIndex]-&gt;book_name,<span class="hljs-string">&quot;book3&quot;</span>);<br>strcpy(BookList[BookIndex]-&gt;book_author,<span class="hljs-string">&quot;Jerry&quot;</span>);<br>BookList[BookIndex]-&gt;book_count=<span class="hljs-number">2</span>;                              <br>BookIndex++;<br><br>BookList[BookIndex]=(book *)malloc(sizeof(book) * <span class="hljs-number">1</span>);   <br><span class="hljs-keyword">if</span> (NULL==BookList[BookIndex])<br>&#123;<br>printf(<span class="hljs-string">&quot;malloc failure!\n&quot;</span>);<br>&#125; <br>strcpy(BookList[BookIndex]-&gt;book_name,<span class="hljs-string">&quot;book4&quot;</span>);<br>strcpy(BookList[BookIndex]-&gt;book_author,<span class="hljs-string">&quot;Herbert&quot;</span>);<br>BookList[BookIndex]-&gt;book_count=<span class="hljs-number">10</span>;                              <br>BookIndex++;<br><br>BookList[BookIndex]=(book *)malloc(sizeof(book) * <span class="hljs-number">1</span>);   <br><span class="hljs-keyword">if</span> (NULL==BookList[BookIndex])<br>&#123;<br>printf(<span class="hljs-string">&quot;malloc failure!\n&quot;</span>);<br>&#125; <br>strcpy(BookList[BookIndex]-&gt;book_name,<span class="hljs-string">&quot;book4&quot;</span>);<br>strcpy(BookList[BookIndex]-&gt;book_author,<span class="hljs-string">&quot;John&quot;</span>);<br>BookList[BookIndex]-&gt;book_count=<span class="hljs-number">7</span>;                              <br>BookIndex++;<br>&#125;<br><br>int connection()<br>&#123;<br>int flag=<span class="hljs-number">1</span>;<span class="hljs-regexp">//</span>连接成功的标志<br>int s_fd,c_fd;<span class="hljs-regexp">//</span>服务器和客户套接字标识符<br>int s_len,c_len;<span class="hljs-regexp">//</span>消息长度<br><span class="hljs-regexp">//</span>服务器和客户套接字地址<br>struct sockaddr_in s_addr;<br>struct sockaddr_in c_addr;<br>s_len=sizeof(s_addr);<br>c_len=sizeof(c_addr);<br><span class="hljs-regexp">//</span>创建套接字<br><span class="hljs-keyword">if</span>( (s_fd = socket(AF_INET,SOCK_STREAM,<span class="hljs-number">0</span>) )&lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;socket error\n&quot;</span>);<br>flag = -<span class="hljs-number">1</span>;<br>&#125;<br>s_addr.sin_family=AF_INET;<span class="hljs-regexp">//</span>设置服务器套接字地址的地址域<br>s_addr.sin_port=htons(<span class="hljs-number">8077</span>);<span class="hljs-regexp">//</span>设置服务器套接字端口<br>s_addr.sin_addr.s_addr=INADDR_ANY;<span class="hljs-regexp">//</span>设置服务器套接字地址<br><span class="hljs-regexp">//</span>将套接字与端口绑定<br><span class="hljs-keyword">if</span>( bind(s_fd,(struct sockaddr*)&amp;s_addr,sizeof(s_addr)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;bind error\n&quot;</span>);<br>flag = -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-regexp">//</span>设置监听<br><span class="hljs-keyword">if</span>( listen(s_fd,<span class="hljs-number">5</span>) &lt; <span class="hljs-number">0</span> )<br>&#123;<br>perror(<span class="hljs-string">&quot;listen error\n&quot;</span>);<br>flag = -<span class="hljs-number">1</span>;<br>&#125;<br>printf(<span class="hljs-string">&quot;-----\n&quot;</span>);<br><span class="hljs-regexp">//</span>接收客户端连接<br><span class="hljs-keyword">if</span>( (c_fd = accept(s_fd,(struct sockaddr*)&amp;c_addr,(socklen_t *__restrict)&amp;c_len)) &lt; <span class="hljs-number">0</span> )<br>&#123;<br>perror(<span class="hljs-string">&quot;accept error\n&quot;</span>);<br>flag = -<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>( flag &lt; <span class="hljs-number">0</span> ) c_fd=-<span class="hljs-number">1</span>;<br>return c_fd;<br>&#125;<br><br><span class="hljs-regexp">//</span>显示菜单界面<br>void showmenu()<br>&#123;<br>int i;<br>char *menu[] = &#123;<span class="hljs-string">&quot;1.借书\t\t2.还书\n&quot;</span><br><span class="hljs-string">&quot;3.图书情况\t4.退出系统\n&quot;</span>&#125;;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;sizeof(menu)/sizeof(menu[<span class="hljs-number">0</span>]);i++) printf(<span class="hljs-string">&quot;%s\n&quot;</span>,menu[i]);<br>&#125;<br><br><span class="hljs-regexp">//</span>服务器借书函数<br>void BorrowBook(int fd)<br>&#123;<br>char stu_name[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-regexp">//</span>学生姓名<br>char book_name[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<span class="hljs-regexp">//</span>书名<br><br>read(fd,stu_name,sizeof(stu_name));<br>int i, j;     <br><span class="hljs-regexp">//</span>搜索学生名单，判断该学生是否借过书<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; StuIndex; i++)<br>&#123;<br><span class="hljs-keyword">if</span> (strcmp(StuList[i]-&gt;name,stu_name)==<span class="hljs-number">0</span>)   <span class="hljs-regexp">//</span>该学生之前借过书<br>&#123;<br><span class="hljs-keyword">if</span> (StuList[i]-&gt;count&gt;=<span class="hljs-number">5</span>)   <span class="hljs-regexp">//</span>一个人最多借<span class="hljs-number">5</span>本<br>&#123;<br>strcpy(sendbuf,<span class="hljs-string">&quot;可借数目已经达到上限，无法借出\n\n&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>return;<br>&#125;<br><span class="hljs-keyword">else</span>   <span class="hljs-regexp">//</span>借过书，且数量没有超过<span class="hljs-number">5</span>本<br>&#123;<br>strcpy(sendbuf,<span class="hljs-string">&quot;您之前借过书，请输入书名\n&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>read(fd,book_name,sizeof(book_name));<br><span class="hljs-regexp">//</span>sleep(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> (j=<span class="hljs-number">0</span>;j&lt;BookIndex;j++)<span class="hljs-regexp">//</span>判断书是否可借<br>&#123;<br><span class="hljs-keyword">if</span> (strcmp(BookList[j]-&gt;book_name,book_name)==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (BookList[j]-&gt;book_count==<span class="hljs-number">0</span>)<br>&#123;<br>strcpy(sendbuf,<span class="hljs-string">&quot;剩余0本，不可借\n&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>return;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (j==BookIndex-<span class="hljs-number">1</span>)<br>&#123;<br>strcpy(sendbuf,<span class="hljs-string">&quot;书名不存在\n&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>return;<br>&#125;<br>&#125;<br>BookList[j]-&gt;book_count--;       <span class="hljs-regexp">//</span>借书成功，库存减少<br><br>int k;<br><span class="hljs-regexp">//</span>将节约借阅的书籍加入该学生的借书名单中<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;StuList[i]-&gt;count+<span class="hljs-number">1</span>;k++)<br>&#123;<br><br><span class="hljs-keyword">if</span>(StuList[i]-&gt;stu_book[k]==<span class="hljs-number">0</span>)<br>&#123;<br>StuList[i]-&gt;stu_book[k] = (char *)malloc(sizeof(char) * <span class="hljs-number">1</span>); <br>strcpy(StuList[i]-&gt;stu_book[k],book_name);<br>&#125;<br>&#125;<br>StuList[i]-&gt;count++;<br>    strcpy(sendbuf,<span class="hljs-string">&quot;借书成功\n&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>return;<br>&#125;<br>&#125;<br>&#125;<br><br><br><span class="hljs-regexp">//</span>如果遍历数组结束，没有匹配到，说明没有借过书<br>strcpy(sendbuf,<span class="hljs-string">&quot;您之前没有借过书，请输入书名\n&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br><span class="hljs-regexp">//</span>sleep(<span class="hljs-number">2</span>);<br>read(fd,book_name,sizeof(book_name));<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;BookIndex;i++)     <span class="hljs-regexp">//</span>判断书本是否存在<br>&#123;<br><span class="hljs-keyword">if</span>(strcmp(BookList[i]-&gt;book_name,book_name)==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(BookList[i]-&gt;book_count==<span class="hljs-number">0</span>)<br>&#123;<br>strcpy(sendbuf,<span class="hljs-string">&quot;剩余0本，不可借\n&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>return;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>BookList[i]-&gt;book_count--; <span class="hljs-regexp">//</span>减少一本<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (i==BookIndex-<span class="hljs-number">1</span>)<br>&#123;<br>strcpy(sendbuf,<span class="hljs-string">&quot;书名不存在\n&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>return;<br>&#125;<br>&#125;<br><span class="hljs-regexp">//</span>录入借书学生的信息<br>StuList[StuIndex]=(stu *)malloc(sizeof(stu) * <span class="hljs-number">1</span>); <br>int count0;<br><span class="hljs-keyword">for</span>(count0=<span class="hljs-number">0</span>;count0&lt;<span class="hljs-number">5</span>;count0++)StuList[StuIndex]-&gt;stu_book[count0]=<span class="hljs-number">0</span>;<br>StuList[StuIndex]-&gt;stu_book[<span class="hljs-number">0</span>]=(char *)malloc(sizeof(char) * <span class="hljs-number">1</span>); <br>StuList[StuIndex]-&gt;count=<span class="hljs-number">0</span>;     <br>strcpy(StuList[StuIndex]-&gt;name,stu_name);<br>strcpy(StuList[StuIndex]-&gt;stu_book[<span class="hljs-number">0</span>],book_name);<br>StuList[StuIndex]-&gt;count++;    <br><br>StuIndex++;<br>strcpy(sendbuf,<span class="hljs-string">&quot;借书成功\n&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>&#125;<br><br><span class="hljs-regexp">//</span>服务器还书函数<br>void ReturnBook(int fd)<br>&#123;<br>char stu_name[<span class="hljs-number">32</span>];<span class="hljs-regexp">//</span>学生姓名<br>char book_name[<span class="hljs-number">32</span>];<span class="hljs-regexp">//</span>书名<br>read(fd,stu_name,sizeof(stu_name));<br>int i,j,k;<br><span class="hljs-regexp">//</span>搜索借书记录<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;StuIndex;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(strcmp(StuList[i]-&gt;name,stu_name)==<span class="hljs-number">0</span>&amp;&amp;StuList[i]-&gt;count!=<span class="hljs-number">0</span>)   <span class="hljs-regexp">//</span>有该学生的借书记录<br>&#123;<br>strcpy(sendbuf,<span class="hljs-string">&quot;请输入书名：&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>fun:<br><span class="hljs-keyword">if</span>(read(fd,book_name,sizeof(book_name))&lt;<span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;read error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;BookIndex;j++)    <span class="hljs-regexp">//</span>判断书本是否存在<br>&#123;<br><span class="hljs-keyword">if</span>(strcmp(BookList[j]-&gt;book_name,book_name)==<span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;StuList[i]-&gt;count;k++)<br>&#123;<br><span class="hljs-keyword">if</span>(strcmp(StuList[i]-&gt;stu_book[k],book_name)==<span class="hljs-number">0</span>)<br>&#123;<br>StuList[i]-&gt;stu_book[k]=<span class="hljs-number">0</span>;<br>free(StuList[i]-&gt;stu_book[k]);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>strcpy(sendbuf,<span class="hljs-string">&quot;书名输入错误，请重新输入：&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>goto fun;<br>&#125;<br>&#125;<br><span class="hljs-regexp">//</span>还书成功<br>StuList[i]-&gt;count--;<br>BookList[j]-&gt;book_count++;<br>strcpy(sendbuf,<span class="hljs-string">&quot;还书成功\n\n&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>return;<br>&#125;<br><span class="hljs-regexp">//</span>输入书名错误<br><span class="hljs-keyword">if</span>(j==BookIndex-<span class="hljs-number">1</span> )<br>&#123;<br>strcpy(sendbuf,<span class="hljs-string">&quot;书名输入错误，请重新输入：&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>goto fun;<br>&#125;<br>&#125;   <br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-regexp">//</span>没有该学生的借书记录<br><span class="hljs-keyword">if</span>(i==StuIndex-<span class="hljs-number">1</span>||StuIndex==<span class="hljs-number">0</span>)<br>&#123;<br>strcpy(sendbuf,<span class="hljs-string">&quot;没有你的借书记录\n\n&quot;</span>);<br>write(fd,sendbuf,sizeof(sendbuf));<br>&#125;<br>printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-regexp">//</span>将书籍信息写入BookInfo.txt文件中<br>void ShowBook()<br>&#123;<br>char *book_info[] = &#123;<span class="hljs-string">&quot;书名&quot;</span>,<span class="hljs-string">&quot;作者&quot;</span>,<span class="hljs-string">&quot;剩余本数&quot;</span>&#125;;<br>int i;<br>FILE *fp;<br>fp = fopen(<span class="hljs-string">&quot;BookInfo.txt&quot;</span>,<span class="hljs-string">&quot;w+&quot;</span>);<br>fprintf(fp,<span class="hljs-string">&quot;%s\t\t%s\t\t%s\n&quot;</span>,book_info[<span class="hljs-number">0</span>],book_info[<span class="hljs-number">1</span>],book_info[<span class="hljs-number">2</span>]);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;BookIndex;i++)<br>&#123;<br>fprintf(fp,<span class="hljs-string">&quot;%s\t\t%s\t\t%d\n&quot;</span>,BookList[i]-&gt;book_name,BookList[i]-&gt;book_author,BookList[i]-&gt;book_count);<br>&#125;<br>fclose(fp);<br>printf(<span class="hljs-string">&quot;图书信息已写入BookInfo.txt文件\n\n&quot;</span>);<br>&#125;<br><br>int main()<br>&#123;<br>InitBook();<br><span class="hljs-regexp">//i</span>nt fd = connection();<br><br>int s_fd,c_fd;<span class="hljs-regexp">//</span>服务器和客户套接字标识符<br>int s_len,c_len;<span class="hljs-regexp">//</span>消息长度<br><span class="hljs-regexp">//</span>服务器和客户套接字地址<br>struct sockaddr_in s_addr;<br>struct sockaddr_in c_addr;<br>s_len=sizeof(s_addr);<br>c_len=sizeof(c_addr);<br><span class="hljs-regexp">//</span>创建套接字<br><span class="hljs-keyword">if</span>( (s_fd = socket(AF_INET,SOCK_STREAM,<span class="hljs-number">0</span>) )&lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;socket error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>s_addr.sin_family=AF_INET;<span class="hljs-regexp">//</span>设置服务器套接字地址的地址域<br>s_addr.sin_port=htons(<span class="hljs-number">8077</span>);<span class="hljs-regexp">//</span>设置服务器套接字端口<span class="hljs-number">8077</span><br>s_addr.sin_addr.s_addr=INADDR_ANY;<span class="hljs-regexp">//</span>设置服务器套接字地址<br><span class="hljs-regexp">//</span>将套接字与端口绑定<br><span class="hljs-keyword">if</span>( bind(s_fd,(struct sockaddr*)&amp;s_addr,sizeof(s_addr)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;bind error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-regexp">//</span>设置监听<br><span class="hljs-keyword">if</span>( listen(s_fd,<span class="hljs-number">10</span>) &lt; <span class="hljs-number">0</span> )<br>&#123;<br>perror(<span class="hljs-string">&quot;listen error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-regexp">//</span>接收客户端连接<br><span class="hljs-keyword">if</span>( (c_fd = accept(s_fd,(struct sockaddr*)&amp;c_addr,(socklen_t *__restrict)&amp;c_len)) &lt; <span class="hljs-number">0</span> )<br>&#123;<br>perror(<span class="hljs-string">&quot;accept error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>char buf[<span class="hljs-number">1024</span>];<br>char sendbuf[<span class="hljs-number">1024</span>]=<span class="hljs-string">&quot;已接收到消息&quot;</span>;<span class="hljs-regexp">//</span>服务器收到消息后的返回信息<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>showmenu();<br><span class="hljs-regexp">//</span>接收消息<br><span class="hljs-keyword">if</span>( (read(c_fd,buf,sizeof(buf))) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;read error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>int choice = strlen(buf)==<span class="hljs-number">1</span> ? buf[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(choice&lt;=<span class="hljs-number">4</span>&amp;&amp;choice&gt;=<span class="hljs-number">1</span>) printf(<span class="hljs-string">&quot;收到的请求序号：%d\n&quot;</span>,choice);<br><span class="hljs-keyword">else</span> printf(<span class="hljs-string">&quot;错误请求\n&quot;</span>);<br>switch(choice)<br>&#123;<br>case <span class="hljs-number">1</span>:<span class="hljs-regexp">//</span>借书<br>BorrowBook(c_fd);<br><span class="hljs-keyword">break</span>;<br>case <span class="hljs-number">2</span>:<span class="hljs-regexp">//</span>还书<br>ReturnBook(c_fd);<br><span class="hljs-keyword">break</span>;<br>case <span class="hljs-number">3</span>:<span class="hljs-regexp">//</span>图书情况<br>ShowBook();<br><span class="hljs-keyword">break</span>;<br>case <span class="hljs-number">4</span>:<span class="hljs-regexp">//</span>退出系统<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>close(c_fd);<br>close(s_fd);<br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;arpa/inet.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/types.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/socket.h&gt;</span><br><span class="hljs-comment">#include &lt;netinet/in.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/types.h&gt;</span><br>char sendbuf[<span class="hljs-number">1024</span>];<span class="hljs-regexp">//</span>发送缓存区<br>char buf[<span class="hljs-number">1024</span>];<span class="hljs-regexp">//</span>接收缓存区<br><br>int connection()<br>&#123;<br>int fd,newfd;<br>struct sockaddr_in addr;<span class="hljs-regexp">//</span>客户端套接字地址<br><span class="hljs-regexp">//</span>创建套接字<br><span class="hljs-keyword">if</span>( (fd=socket(AF_INET,SOCK_STREAM,<span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span> )<br>&#123;<br>perror(<span class="hljs-string">&quot;socket error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>addr.sin_family=AF_INET;<span class="hljs-regexp">//</span>设置客户端套接地址的地址域<br>addr.sin_port=htons(<span class="hljs-number">8077</span>);<span class="hljs-regexp">//</span>设置客户端套接字端口<span class="hljs-number">8077</span><br><span class="hljs-regexp">//</span>发送连接请求<br><span class="hljs-keyword">if</span>( ( newfd=connect(fd,(struct sockaddr*)&amp;addr,sizeof(addr)) ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br>perror(<span class="hljs-string">&quot;connect error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br>return fd;<br>&#125;<br><br><span class="hljs-regexp">//</span>显示菜单界面<br>void showmenu()<br>&#123;<br>int i;<br>char *menu[] = &#123;<span class="hljs-string">&quot;1.借书\t\t2.还书\n&quot;</span><br><span class="hljs-string">&quot;3.图书情况\t4.退出系统\n&quot;</span>&#125;;<br><span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>;i&lt;sizeof(menu)/sizeof(menu[<span class="hljs-number">0</span>]);i++) printf(<span class="hljs-string">&quot;%s\n&quot;</span>,menu[i]);<br>&#125;<br><br><span class="hljs-regexp">//</span>客户借书函数<br>void BorrowBook(int fd)<br>&#123;<br>char stu_name[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>char book_name[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>printf(<span class="hljs-string">&quot;请输入姓名：\n&quot;</span>);<br>scanf(<span class="hljs-string">&quot;%s&quot;</span>, stu_name);<br>write(fd,stu_name,sizeof(stu_name));<br><span class="hljs-regexp">//</span>sleep(<span class="hljs-number">1</span>);<br>read(fd,buf,sizeof(buf));<br>printf(<span class="hljs-string">&quot;%s&quot;</span>,buf);<br><span class="hljs-keyword">if</span>( strcmp(buf,<span class="hljs-string">&quot;可借数目已经达到上限，无法借出\n\n&quot;</span>) == <span class="hljs-number">0</span>) return;<br><span class="hljs-keyword">else</span><br>&#123;<br>scanf(<span class="hljs-string">&quot;%s&quot;</span>,book_name);<br>write(fd,book_name,sizeof(book_name));<br><span class="hljs-regexp">//</span>sleep(<span class="hljs-number">1</span>);<br>read(fd,buf,sizeof(buf));<br>printf(<span class="hljs-string">&quot;%s&quot;</span>,buf);<br>&#125;<br>printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-regexp">//</span>客户借书函数<br>void ReturnBook(int fd)<br>&#123;<br>char stu_name[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>char book_name[<span class="hljs-number">32</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>printf(<span class="hljs-string">&quot;请输入姓名：&quot;</span>);<br>scanf(<span class="hljs-string">&quot;%s&quot;</span>,stu_name);<br>write(fd,stu_name,sizeof(stu_name));<br>read(fd,buf,sizeof(buf));<br>printf(<span class="hljs-string">&quot;%s&quot;</span>,buf);<br><span class="hljs-keyword">if</span>(strcmp(buf,<span class="hljs-string">&quot;没有你的借书记录\n\n&quot;</span>) == <span class="hljs-number">0</span>) return;<br><span class="hljs-keyword">else</span><br>&#123;<br>scanf(<span class="hljs-string">&quot;%s&quot;</span>,book_name);<br>write(fd,book_name,sizeof(book_name));<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(read(fd,buf,sizeof(buf))&lt;<span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">&quot;read error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>printf(<span class="hljs-string">&quot;%s&quot;</span>,buf);<br><span class="hljs-keyword">if</span>(strcmp(buf,<span class="hljs-string">&quot;还书成功\n\n&quot;</span>) == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>scanf(<span class="hljs-string">&quot;%s&quot;</span>,book_name);<br>write(fd,book_name,sizeof(book_name));<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-regexp">//</span>打印BookInfo.txt文件里的书籍信息<br>void ShowBook(int fd)<br>&#123;<br>sleep(<span class="hljs-number">1</span>);<br>FILE *fp;<br>fp = fopen(<span class="hljs-string">&quot;BookInfo.txt&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>);<br>char buf[<span class="hljs-number">2048</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>fread(buf,sizeof(buf),<span class="hljs-number">1</span>,fp);<br>printf(<span class="hljs-string">&quot;%s\n&quot;</span>,buf);<br>&#125;<br><br>int main()<br>&#123;<br><span class="hljs-regexp">//i</span>nt fd = connection();<br>int fd,newfd;<br>struct sockaddr_in addr;<span class="hljs-regexp">//</span>客户端套接字地址<br><span class="hljs-regexp">//</span>创建套接字<br><span class="hljs-keyword">if</span>( (fd=socket(AF_INET,SOCK_STREAM,<span class="hljs-number">0</span>)) &lt; <span class="hljs-number">0</span> )<br>&#123;<br>perror(<span class="hljs-string">&quot;socket error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>addr.sin_family=AF_INET;<span class="hljs-regexp">//</span>设置客户端套接地址的地址域<br>addr.sin_port=htons(<span class="hljs-number">8077</span>);<span class="hljs-regexp">//</span>设置客户端套接字端口<span class="hljs-number">8077</span><br><span class="hljs-regexp">//</span>发送连接请求<br><span class="hljs-keyword">if</span>( ( newfd=connect(fd,(struct sockaddr*)&amp;addr,sizeof(addr)) ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br>perror(<span class="hljs-string">&quot;connect error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>char buf[<span class="hljs-number">1024</span>];<br>char sendbuf[<span class="hljs-number">1024</span>];<span class="hljs-regexp">//</span>服务器收到消息后的返回信息<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>showmenu();<br>printf(<span class="hljs-string">&quot;请输入相应的操作序号：&quot;</span>);<br>scanf(<span class="hljs-string">&quot;%s&quot;</span>,sendbuf);<br>send(fd,sendbuf,sizeof(sendbuf),<span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>发送选择信息<br>int choice = strlen(sendbuf)==<span class="hljs-number">1</span> ? sendbuf[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>;<br>switch(choice)<br>&#123;<br>case <span class="hljs-number">1</span>:<span class="hljs-regexp">//</span>借书<br>BorrowBook(fd);<br><span class="hljs-keyword">break</span>;<br>case <span class="hljs-number">2</span>:<span class="hljs-regexp">//</span>还书<br>ReturnBook(fd);<br><span class="hljs-keyword">break</span>;<br>case <span class="hljs-number">3</span>:<span class="hljs-regexp">//</span>图书情况<br>ShowBook(fd);<br><span class="hljs-keyword">break</span>;<br>case <span class="hljs-number">4</span>:<span class="hljs-regexp">//</span>退出系统<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">break</span>;<br>default:<span class="hljs-regexp">//</span>输入错误<br>printf(<span class="hljs-string">&quot;输入序号错误\n\n&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>close(fd);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux C</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>连接查询</title>
    <link href="/2022/10/26/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/"/>
    <url>/2022/10/26/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们同时需要两张表的信息时，我们该怎么写查询语句呢？这时我们就可以使用连接查询，将两张表“连接”起来，让返回的查询结果中包含两张表的数据，连接查询包括内连接和外链接查询。</p><h2 id="内连接查询"><a href="#内连接查询" class="headerlink" title="内连接查询"></a>内连接查询</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用内连接查询数据表中学生姓名和对应的班级。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：<br>1.什么是内连接查询；<br>2.如何使用内连接查询。</p><h4 id="内连接查询-1"><a href="#内连接查询-1" class="headerlink" title="内连接查询"></a>内连接查询</h4><ul><li><p>仅将两个表中满足连接条件的行组合起来作为结果集，称为内连接；</p></li><li><p>关键字：<code>[inner] join ...  on。</code></p></li></ul><p>语法：</p><p><code>表1 [inner] join 表2 on 表1.字段=表2.字段</code></p><p>语法解释：<br>从<code>表1</code>中取出每一条记录，去<code>表2</code>中与所有的记录进行匹配，匹配必须是某个条件在<code>表1</code>中与<code>表2</code>中相同，最终才会保留结果，否则不保留。<code>inner</code> 关键字可省略不写；<code>on</code> 表示连接条件：条件字段就是代表相同的业务含义（如下面两张表中的 <code>employee.dept_id</code> 和 <code>department.id</code>），大多数情况下为两张表中的主外键关系。<br>内连接查询的使用<br>现在我们有两张表，数据如下：<br><code>employee</code>表数据：</p><table><thead><tr><th>id</th><th>name</th><th>dept_id</th></tr></thead><tbody><tr><td>1</td><td>Nancy</td><td>4</td></tr><tr><td>2</td><td>Tod</td><td>2</td></tr><tr><td>3</td><td>Carly</td><td>1</td></tr><tr><td>4</td><td>Allen</td><td>2</td></tr><tr><td>5</td><td>Mary</td><td>(null)</td></tr></tbody></table><p><code>department</code>表数据：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>开发部</td></tr><tr><td>2</td><td>测试部</td></tr><tr><td>3</td><td>运维部</td></tr><tr><td>4</td><td>销售部</td></tr></tbody></table><p>现在想要查询出员工姓名以及其对应的部门名称，我们就使用内连接来进行查询。</p><ul><li>我们可以将关联查询思路分为三步：</li></ul><p>1.确定所连接的表，</p><p>2.确定所要查询的字段，</p><p>3.确定连接条件与连接方式。<br><img src="/img/MySQL/MySQL/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/1-1.png"></p><p>其中，没有部门的员工和部门没有员工的部门都没有被查出来，这就是内连接的特点，只查询在连接表中有对应的记录，其中<code>dept.id=emp.dept_id</code>是连接条件。</p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧编辑器补充代码，查询数据表中学生姓名以及对应的班级名称，将其对应的列名分别另命名为<code>studentName</code>和<code>className</code>。</p><p>我们为你提供了两张表，内容如下：</p><p><code>tb_student</code>表数据：</p><table><thead><tr><th>id</th><th>name</th><th>class_id</th></tr></thead><tbody><tr><td>1</td><td>Emma</td><td>2</td></tr><tr><td>2</td><td>Mary</td><td>4</td></tr><tr><td>3</td><td>Allen</td><td>(null)</td></tr><tr><td>4</td><td>Kevin</td><td>1</td></tr><tr><td>5</td><td>Rose</td><td>2</td></tr><tr><td>6</td><td>James</td><td>1</td></tr></tbody></table><p><code>tb_class</code>表数据：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>软件1631</td></tr><tr><td>2</td><td>软件1632</td></tr><tr><td>3</td><td>测试1631</td></tr><tr><td>4</td><td>测试1632</td></tr></tbody></table><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">studentName</span>    className<br>   <span class="hljs-attribute">Kevin</span>       软件<span class="hljs-number">1631</span><br>   <span class="hljs-attribute">James</span>       软件<span class="hljs-number">1631</span><br>   <span class="hljs-attribute">Emma</span>        软件<span class="hljs-number">1632</span><br>   <span class="hljs-attribute">Rose</span>        软件<span class="hljs-number">1632</span><br>   <span class="hljs-attribute">Mary</span>        测试<span class="hljs-number">1632</span><br></code></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE School;<br><br>########## 查询数据表中学生姓名和对应的班级 ##########<br>#请在此处添加实现代码<br>########## Begin ##########<br>select tb_student.name <span class="hljs-keyword">as</span> studentName, tb_class.name <span class="hljs-keyword">as</span> className <span class="hljs-keyword">from</span> tb_class join tb_student on tb_student.class_id = tb_class.id;<br><br><br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="外连接查询"><a href="#外连接查询" class="headerlink" title="外连接查询"></a>外连接查询</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用外连接查询数据表中所有班级和对应班级里学生的姓名。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：<br>1.什么是外连接查询；<br>2.如何使用外连接查询。</p><h4 id="外连接查询-1"><a href="#外连接查询-1" class="headerlink" title="外连接查询"></a>外连接查询</h4><ul><li><p>以某张表为主，取出里面的所有记录，然后每条与另外一张表进行连接，不管能不能匹配上条件，最终都会保留。能匹配，正确保留；不能匹配，其它表的字段都置空（<code>null</code>），称为外连接。</p></li><li><p>外连接查询分为左外连接查询和右外连接查询；</p></li><li><p>关键字：<code>left/right [outer] join ... on</code>。</p></li></ul><p>语法：</p><p><code>表1 left/right [outer]  join 表2 on 表1.字段=表2.字</code>段<br>语法解释：<br>左外连接：在内连接的基础上，还包含<code>表1</code>中所有不符合条件的数据行，并在其中的<code>表2</code>列填写 <code>NULL</code>；</p><p>右外连接：在内连接的基础上，还包含<code>表2</code>中所有不符合条件的数据行，并在其中的<code>表1</code>列填写<code> NULL</code>。</p><h4 id="外连接查询的使用"><a href="#外连接查询的使用" class="headerlink" title="外连接查询的使用"></a>外连接查询的使用</h4><p>我们仍使用如下两张数据表：</p><p><code>employee</code>表数据：</p><table><thead><tr><th>id</th><th>name</th><th>dept_id</th></tr></thead><tbody><tr><td>1</td><td>Nancy</td><td>4</td></tr><tr><td>2</td><td>Tod2</td><td></td></tr><tr><td>3</td><td>Carly</td><td>1</td></tr><tr><td>4</td><td>Allen</td><td>2</td></tr><tr><td>5</td><td>Mary</td><td>(null)</td></tr></tbody></table><p><code>department</code>表数据：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>开发部</td></tr><tr><td>2</td><td>测试部</td></tr><tr><td>3</td><td>运维部</td></tr><tr><td>4</td><td>销售部</td></tr></tbody></table><p>例如查询所有员工姓名以及他所在部门，在<strong>内连接</strong>中<code>Mary</code>没有被查出，因为他没有对应的部门，现在想把<code>Mary</code>也查出来，就要使用<strong>左外连接</strong>。<br><img src="/img/MySQL/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/2-1.png"></p><p>此查询语句以<code>employee</code>为主表查询，因此最终记录至少不少于主表已有的记录数。</p><p>右外连接是同理的，只是基准表的位置变化了而已。<br><img src="/img/MySQL/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/2-2.png"></p><p>我们在这里只是将<code>left</code>修改成了<code>right</code>,但是基准表变化了，是以<code>department</code>表的数据去匹配<code>employee</code>表，所以左外连接能做到的查询，右外连接也能做到，仅展现的效果有所不同。</p><p>虽然左外连接和右外连接有主表差异，但左外连接和右外连接可以互转，如上面的右外连接也等效于如下查询语句，只需将基准表换一下：<br><img src="/img/MySQL/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/2-3.png"></p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧编辑器补充代码，分别使用<strong>左外连接</strong>和<strong>右外连接</strong>查询数据表中所有学生姓名和对应的班级名称，查询结果列分别另命名为<code>studentName</code>和<code>className</code>。</p><p>我们为你提供了两张表，内容如下：</p><p><code>tb_student</code>表数据：</p><table><thead><tr><th>id</th><th>name</th><th>class_id</th></tr></thead><tbody><tr><td>1</td><td>Emma</td><td>2</td></tr><tr><td>2</td><td>Mary</td><td>4</td></tr><tr><td>3</td><td>Allen</td><td>(null)</td></tr><tr><td>4</td><td>Kevin</td><td>1</td></tr><tr><td>5</td><td>Rose</td><td>2</td></tr><tr><td>6</td><td>James</td><td>1</td></tr></tbody></table><p><code>tb_class</code>表数据：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>软件1631</td></tr><tr><td>2</td><td>软件1632</td></tr><tr><td>3</td><td>测试1631</td></tr><tr><td>4</td><td>测试1632</td></tr></tbody></table><p><strong>注意</strong>：请使用 <code>tb_student</code> 作为左表，<code>tb_class</code> 作为右表。</p><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">studentName</span>    className<br><span class="hljs-attribute">Emma</span>    软件<span class="hljs-number">1632</span><br><span class="hljs-attribute">Mary</span>    测试<span class="hljs-number">1632</span><br><span class="hljs-attribute">Allen</span>    NULL<br><span class="hljs-attribute">Kevin</span>    软件<span class="hljs-number">1631</span><br><span class="hljs-attribute">Rose</span>    软件<span class="hljs-number">1632</span><br><span class="hljs-attribute">James</span>    软件<span class="hljs-number">1631</span><br><span class="hljs-attribute">studentName</span>    className<br><span class="hljs-attribute">Kevin</span>    软件<span class="hljs-number">1631</span><br><span class="hljs-attribute">James</span>    软件<span class="hljs-number">1631</span><br><span class="hljs-attribute">Emma</span>    软件<span class="hljs-number">1632</span><br><span class="hljs-attribute">Rose</span>    软件<span class="hljs-number">1632</span><br><span class="hljs-attribute">NULL</span>    测试<span class="hljs-number">1631</span><br><span class="hljs-attribute">Mary</span>    测试<span class="hljs-number">1632</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE School;<br><br>########## 使用左外连接查询所有学生姓名和对应的班级 ##########<br><br>#请在此处添加实现代码<br>########## Begin ##########<br>select tb_student.name <span class="hljs-keyword">as</span> studentName , tb_class.name <span class="hljs-keyword">as</span> className <span class="hljs-keyword">from</span> tb_student left join tb_class on tb_student.class_id = tb_class.id;<br><br><br><br>########## End ##########<br><br>########## 使用右外连接查询所有学生姓名和对应的班级 ##########<br><br>#请在此处添加实现代码<br>########## Begin ##########<br>select tb_student.name <span class="hljs-keyword">as</span> studentName , tb_class.name <span class="hljs-keyword">as</span> className <span class="hljs-keyword">from</span> tb_student right join tb_class on tb_student.class_id = tb_class.id;<br><br><br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="复合条件连接查询"><a href="#复合条件连接查询" class="headerlink" title="复合条件连接查询"></a>复合条件连接查询</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用连接查询，查询所有班级里分数在<code>90</code>分以上的学生的姓名和学生的成绩以及学生所在的班级。</p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何编写复合条件连接查询语句。</p><h4 id="复合条件连接查询-1"><a href="#复合条件连接查询-1" class="headerlink" title="复合条件连接查询"></a>复合条件连接查询</h4><ul><li>复合条件连接查询，就是在连接查询的过程中，通过添加过滤条件来限制查询结果，使查询结果更加精确。<br>如下两张数据表：</li></ul><p><code>employee</code>表数据：</p><table><thead><tr><th>id</th><th>name</th><th>dept_id</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>Nancy</td><td>3</td><td>18</td></tr><tr><td>2</td><td>Tod</td><td>2</td><td>22</td></tr><tr><td>3</td><td>Carly</td><td>1</td><td>19</td></tr><tr><td>4</td><td>Allen</td><td>2</td><td>24</td></tr></tbody></table><p><code>department</code>表数据：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>开发部</td></tr><tr><td>2</td><td>测试部</td></tr><tr><td>3</td><td>运维部</td></tr></tbody></table><p>要求查询员工姓名和所在部门名称，使用内连接查询，将查询结果按照年龄升序排序：<br><img src="/img/MySQL/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/3-1.png"></p><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧编辑器补充代码，查询所有班级里分数在<code>90</code>分以上的学生的姓名和学生的成绩以及学生所在的班级，其中学生的姓名和学生所在班级分别另命名为<code>studentName</code>和<code>className</code>。</p><p>我们为你提供了两张表，内容如下：</p><p><code>tb_student</code>表数据：</p><table><thead><tr><th>id</th><th>name</th><th>class_id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>Emma</td><td>2</td><td>89</td></tr><tr><td>2</td><td>Mary</td><td>4</td><td>92</td></tr><tr><td>4</td><td>Kevin</td><td>1</td><td>76</td></tr><tr><td>5</td><td>Rose</td><td>3</td><td>68</td></tr><tr><td>6</td><td>James</td><td>1</td><td>99</td></tr></tbody></table><p><code>tb_class</code>表数据：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>软件1631</td></tr><tr><td>2</td><td>软件1632</td></tr><tr><td>3</td><td>测试1631</td></tr><tr><td>4</td><td>测试1632</td></tr></tbody></table><h3 id="测试说明-2"><a href="#测试说明-2" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">studentName</span>    score    className<br>   <span class="hljs-attribute">James</span>        <span class="hljs-number">99</span>       软件<span class="hljs-number">1631</span><br>   <span class="hljs-attribute">Mary</span>         <span class="hljs-number">92</span>       测试<span class="hljs-number">1632</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE School;<br><br>########## 查询所有班级里分数在<span class="hljs-number">90</span>分以上的学生的姓名和学生的成绩以及学生所在的班级 ##########<br>#请在此处添加实现代码<br>########## Begin ##########<br>select tb_student.name <span class="hljs-keyword">as</span> studentName, tb_student.score,tb_class.name <span class="hljs-keyword">as</span> className <span class="hljs-keyword">from</span> tb_student join tb_class on tb_student.class_id=tb_class.id <span class="hljs-keyword">where</span> tb_student.score &gt; <span class="hljs-number">90</span>;<br><br><br><br>########## End ##########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>软工实践选题报告</title>
    <link href="/2022/10/25/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%B7%B5%E9%80%89%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <url>/2022/10/25/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%B7%B5%E9%80%89%E9%A2%98%E6%8A%A5%E5%91%8A/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="2022秋软工实践-团队展示与选题报告"><a href="#2022秋软工实践-团队展示与选题报告" class="headerlink" title="2022秋软工实践 团队展示与选题报告"></a>2022秋软工实践 团队展示与选题报告</h1><table><thead><tr><th align="left"><strong>作业所属课程</strong></th><th align="left"><strong><a href="https://bbs.csdn.net/forums/fzusdn">fzusdn社区-CSDN社区云</a></strong></th></tr></thead><tbody><tr><td align="left">作业要求</td><td align="left"><a href="https://bbs.csdn.net/topics/608626989">第一次团队编程作业 团队展示+选题报告+需求分析-CSDN社区</a></td></tr><tr><td align="left">作业的目标</td><td align="left">展示团队成员风采，完成选题并进行对应的需求分析</td></tr><tr><td align="left">团队名称</td><td align="left">银耳椰椰队</td></tr><tr><td align="left">团队成员学号</td><td align="left">032002214、031702139、032002134、032002226、032002410、032002412、032002416、032002603、032004150、032004151</td></tr></tbody></table><h2 id="一、团队展示"><a href="#一、团队展示" class="headerlink" title="一、团队展示"></a>一、团队展示</h2><h3 id="1-队名"><a href="#1-队名" class="headerlink" title="1. 队名"></a>1. 队名</h3><p>我们的队名是：银耳椰椰队</p><p>队名灵感来源于我们第一次开会时见到的奶茶名字，我们希望我们团队能和谐友爱，快快乐乐地完成之后的所有任务，一起“耶耶”。</p><h3 id="2-项目规划及描述"><a href="#2-项目规划及描述" class="headerlink" title="2. 项目规划及描述"></a>2. 项目规划及描述</h3><p>许多校友可能因为很久没有回归校园，不熟悉校园的新变化。我们希望开发一款小程序满足校友们的这些需求，使得校友们可以通过小程序重新熟悉现在的福大，并获得所需要的资讯来合理规划院庆时自己的行程，同时也可以在一定程度上满足校友们的社交需求，帮助校友们重新联系上失联了的老同学。</p><p>我们希望以福大地图为主要载体，当校友们点击地图上各种不同建筑、经典时，会给出相应的介绍及照片，同时校友们也可以到对应的地点拍照打卡，与其他校友一起分享照片，未到场的校友也可以拍照进行云打卡。除此之外也会提供找校友、留言板、通告资讯等基础功能。</p><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%B7%B5%E9%80%89%E9%A2%98%E6%8A%A5%E5%91%8A/%E5%9B%BE1.png"></p><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%B7%B5%E9%80%89%E9%A2%98%E6%8A%A5%E5%91%8A/%E5%9B%BE2.jpg"></p><p>我们决定使用：</p><ul><li>前端：通过微信小程序的wxml和wxss进行开发</li><li>后端：使用python进行开发</li><li>数据维护：利用数据库进行数据维护</li></ul><h3 id="3-团队的首次合照"><a href="#3-团队的首次合照" class="headerlink" title="3. 团队的首次合照"></a>3. 团队的首次合照</h3><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%B7%B5%E9%80%89%E9%A2%98%E6%8A%A5%E5%91%8A/%E5%90%88%E7%85%A7.jpg"></p><h3 id="4-团队的愿景"><a href="#4-团队的愿景" class="headerlink" title="4. 团队的愿景"></a>4. 团队的愿景</h3><p>我们希望我们的小程序能帮助校友们回忆起曾经美好的校园生活。</p><p>不论是来现场参加院庆的校友，亦或是未能出席的校友，我们都希望“忆昔”能够让校友们更深切地感受到福大校园这些年来的变化，同时让失联的校友们重新取得联系。</p><h2 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h2><h3 id="1-迭代记录表格"><a href="#1-迭代记录表格" class="headerlink" title="1. 迭代记录表格"></a>1. 迭代记录表格</h3><table><thead><tr><th>记录</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>版本号</td><td>日期</td><td>迭代内容</td><td>提交人员</td></tr><tr><td>v0.1</td><td>2022&#x2F;10&#x2F;19</td><td>完成初步需求分析和功能设计</td><td></td></tr><tr><td>v0.2</td><td>2022&#x2F;10&#x2F;20</td><td>增加思维导图和logo设计</td><td>郑燕燕</td></tr><tr><td>v0.3</td><td>2022&#x2F;10&#x2F;22</td><td>增加“假定与约束”</td><td>黄智鑫</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="2-项目介绍"><a href="#2-项目介绍" class="headerlink" title="2.  项目介绍"></a>2.  项目介绍</h3><h4 id="2-1-项目名称及内涵"><a href="#2-1-项目名称及内涵" class="headerlink" title="2.1 项目名称及内涵"></a>2.1 项目名称及内涵</h4><p>小程序名:“忆昔”</p><p>“携来百侣曾游，忆往昔峥嵘岁月稠。”意思为：回想过去，我和我的同学，经常携手结伴来到这里游玩。在一起商讨国家大事，那无数不平凡的岁月至今还萦绕在我的心头。</p><p>入学那天，你踏入了福大，迎来了大学四年时光。毕业了，同学们各奔东西，踏上了属于自己的旅途。今天，欣逢院庆得以故地重游，回忆那四年的点点滴滴，你脑海中挥之不去的是讲台上老师的慈祥面容，耳畔似乎回响着他们的谆谆教诲。你还记得每次上下课，校道上人潮拥挤，桂花香扑面而来。还记得福友阁的欢声笑语，不三不四湖的草长莺飞，纸鸢飘飘。还记得院楼前吭吭哧哧的水泥板路，通宵达旦的实验楼。它们存在于你的记忆中，美好而又深刻。今天，你回到了生活了四年的地方，你多么希望，可以再看看装载着你的青春的校园，福大的每处风景是否一如初见；再见见曾经的老师和同学，他们过得怎样；再聊一聊那些年你们的故事藏着的酸甜苦辣……</p><p>可是毕业多年的你或许已经忘记了自己的学号，忘记了偌大的校园各个景点怎么走。面对不断翻新、变得越来越好的校园，你由衷欣喜却又手足无措。第一次来参加院庆，你是不是希望有个小助手帮助你更好的参加活动、参观校园呢?我们的小程序“忆昔”可以帮助你达成这个愿望<strong>。</strong></p><h4 id="2-2-项目简介"><a href="#2-2-项目简介" class="headerlink" title="2.2 项目简介"></a>2.2 项目简介</h4><p>忆昔是一个以交互式地图为主要载体的提供资讯服务并满足一定的社交需求的项目。该项目通过微信小程序来实现，可以帮助参加活动的校友获得规划行程所需的资讯、引导校友熟悉校园和帮助校友寻找同学和同伴。该项目也可以帮助活动的管理者更好地管理活动和引导游客参与活动。游客通过登陆账号来获取服务，而管理者可以通过游客登录的信息来管理活动。</p><h3 id="3-项目标志"><a href="#3-项目标志" class="headerlink" title="3. 项目标志"></a>3. 项目标志</h3><p>项目logo如下</p><p><img src="https://img-blog.csdnimg.cn/b8866e50eff741c19ce77c5ece868b5f.png"></p><h3 id="4-思维导图"><a href="#4-思维导图" class="headerlink" title="4. 思维导图"></a>4. 思维导图</h3><p><img src="https://img-blog.csdnimg.cn/6c0ac7e8914e4d59b5edde7f150dfc2d.jpeg"></p><h3 id="5-类图"><a href="#5-类图" class="headerlink" title="5. 类图"></a>5. 类图</h3><p><img src="https://img-blog.csdnimg.cn/861d53937a154209b9993408fa900fb2.png"></p><h3 id="6-功能描述"><a href="#6-功能描述" class="headerlink" title="6. 功能描述"></a>6. 功能描述</h3><p>功能的需求上可以按游客模式和管理者模式进行划分</p><h4 id="6-1-游客模式"><a href="#6-1-游客模式" class="headerlink" title="6.1 游客模式"></a>6.1 游客模式</h4><p>游客需求的功能主要分为两大类：资讯类和社交类</p><h5 id="6-1-1-游客模式资讯类"><a href="#6-1-1-游客模式资讯类" class="headerlink" title="6.1.1 游客模式资讯类"></a>6.1.1 游客模式资讯类</h5><table><thead><tr><th>编号</th><th>模块名称</th><th>功能描述</th><th>操作方法（实现功能）</th></tr></thead><tbody><tr><td>1</td><td>校园资讯</td><td>用户可以根据需要获取所需的信息，包括但不局限于校史院史、校园新闻、校园公告</td><td>用户通过点击对应的按钮跳转到相应的资讯整合界面并自行浏览（搜索栏？）</td></tr><tr><td>2</td><td>探索校园</td><td>用户可以在XX的引导下了解校园环境的方方面面</td><td>利用主体的交互式地图的特性，在点击对应的建筑或区域时返回对应的介绍信息（搜索栏？）</td></tr><tr><td>3</td><td>找同学（找班级）</td><td>用户可以通过一定的信息来寻找满足条件的对象，并获得对方登录的信息</td><td>通过用户认证把用户信息录入系统，然后输入搜索信息并进行匹配，最后返回满足条件的对象录入的信息</td></tr></tbody></table><h5 id="6-1-2-游客模式社交类"><a href="#6-1-2-游客模式社交类" class="headerlink" title="6.1.2 游客模式社交类"></a>6.1.2 游客模式社交类</h5><table><thead><tr><th>编号</th><th>模块名称</th><th>功能描述</th><th>操作方法（实现功能）</th></tr></thead><tbody><tr><td>1</td><td>参与活动</td><td>用户可以获得正在进行或即将进行的线上及线下活动的资讯并进行预约或报名</td><td>通过按钮跳转到活动资讯整合界面，通过报名或预约按钮把用户信息加入系统中对应活动的报名表（搜索栏？）</td></tr><tr><td>2</td><td>虚拟合影</td><td>用户可以上传个人照片来获得和标志性物品的合影</td><td>用户上传个人照片，通过按钮选择系统中预存的匹配的图片进行合成，并返回合成的照片</td></tr><tr><td>3</td><td>留言板</td><td>用户可以发布留言(例如感想或是对母校的祝福)</td><td>通过按钮跳转到留言界面并可以上传留言</td></tr><tr><td>4</td><td>社区功能</td><td>用户可以建立自己的社区和发布帖子并通过帖子进行交流，也可以私信交流</td><td>？</td></tr><tr><td>5</td><td>娱乐</td><td>交互式地图可以加入收集和随机事件的要素，可以引入排行榜和成就系统提高探索校园的趣味性</td><td>通过按钮将交互式地图切换到游戏模式，并利用定位系统使用户在到达特定区域时触发特定的事件并进行记录，记录的结果会反馈到排行榜和成就系统上</td></tr></tbody></table><h4 id="6-2-管理员模式"><a href="#6-2-管理员模式" class="headerlink" title="6.2 管理员模式"></a>6.2 管理员模式</h4><p>管理员模式在具备以上功能的同时还满足以下需求</p><table><thead><tr><th>编号</th><th>模块名称</th><th>功能描述</th><th>操作方法（实现功能）</th></tr></thead><tbody><tr><td>1</td><td>修改活动报名表</td><td>管理员对报名表具有增删改查的权限</td><td>通过接口按钮实现数据库的操控</td></tr><tr><td>2</td><td>修改资讯板块</td><td>管理员可以在资讯整合界面上传或删除信息</td><td>通过接口按钮实现页面操作</td></tr><tr><td>3</td><td>消息通知</td><td>管理员可以通过XX向报名表中的用户或附近的用户推送消息</td><td>通过接口按钮实现消息推送</td></tr></tbody></table><h3 id="7-验收标准"><a href="#7-验收标准" class="headerlink" title="7. 验收标准"></a>7. 验收标准</h3><h4 id="7-1-功能效果的验收"><a href="#7-1-功能效果的验收" class="headerlink" title="7.1 功能效果的验收"></a>7.1 功能效果的验收</h4><table><thead><tr><th>编号</th><th>模块功能</th><th>使用操作</th><th>预期结果</th></tr></thead><tbody><tr><td>1</td><td>校园资讯</td><td>在主界面点击功能按钮进入对应界面</td><td>进入对应的资讯整合界面</td></tr><tr><td>2</td><td>探索校园</td><td>在主界面地图上点击对应的触发项</td><td>弹出对应的资料</td></tr><tr><td>3</td><td>找同学（找班级）</td><td>在功能界面选择信息输入</td><td>返回符合条件的对象的资料</td></tr><tr><td>4</td><td>参与活动</td><td>在功能界面进入活动界面并点击按钮进行加入</td><td>在对应的报名表中加入新增用户的信息</td></tr><tr><td>5</td><td>虚拟合影</td><td>在功能界面上传个人照片并选择背景</td><td>返回正确合成的照片</td></tr><tr><td>6</td><td>管理员相关功能</td><td>设计一个管理员模块，实现对数据的增删改查</td><td>1.   能用较为稳定的完成前后端数据的传输   2.   使管理员具有对数据库内数据增删改查的最高权限   3.   前后端的接口应能稳定使用</td></tr></tbody></table><h4 id="7-2-界面效果的验收"><a href="#7-2-界面效果的验收" class="headerlink" title="7.2 界面效果的验收"></a>7.2 界面效果的验收</h4><ul><li><p>界面元素的名称、标签应该易懂，用词准确，避免使用模楞两可的字眼，要与同一界面上的其他元素易于区分。理想的情况是用户不用查阅教程就能知道该界面的功能并进行相关的正确操作。</p></li><li><p>软件界面在布局上应足够合理;在界面的视觉效果上应尽量简约，以保证软件的方便性，同时对加载的图片和皮肤的处理上也应显得大方整洁。</p></li></ul><h4 id="7-3-软件稳定性的验收"><a href="#7-3-软件稳定性的验收" class="headerlink" title="7.3 软件稳定性的验收"></a>7.3 软件稳定性的验收</h4><ul><li><p>功能上的稳定性:要在保证数据处理准确的同时确保多任务、数据定位和数据查找等功能运行正常且稳定。</p></li><li><p>软件本身的稳定性:要确保软件不出现崩溃、卡死等情况;在对软件窗口进行处理时，软件界面不会出现断纹、控件错位等不统一的情况。</p></li></ul><h3 id="8-腾讯在线文档连接"><a href="#8-腾讯在线文档连接" class="headerlink" title="8. 腾讯在线文档连接"></a>8. 腾讯在线文档连接</h3><p><a href="https://docs.qq.com/doc/DZUpUVWlxZmRJbVll?scene=febd9803cf50936817d7e6a8Sm9po1">https://docs.qq.com/doc/DZUpUVWlxZmRJbVll?scene=febd9803cf50936817d7e6a8Sm9po1</a></p>]]></content>
    
    
    <categories>
      
      <category>软件工程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单表查询（三）</title>
    <link href="/2022/10/24/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2022/10/24/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>文章主要介绍如何使用关键字<code>ORDER BY</code>、<code>GROUP BY</code>对查询结果进行排序和分组的，以及如何使用关键字<code>LIMIT</code>限制查询结果的数量。</p><h2 id="对查询结果进行排序"><a href="#对查询结果进行排序" class="headerlink" title="对查询结果进行排序"></a>对查询结果进行排序</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：以成绩的<strong>降序</strong>显示学生成绩表中所有信息。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：</p><ol><li>结果排序的关键字；</li><li>指定排序方向的关键字。</li></ol><h4 id="对查询结果排序"><a href="#对查询结果排序" class="headerlink" title="对查询结果排序"></a>对查询结果排序</h4><p>我们知道在<code>MySQL</code>中从数据表中读取数据都是使用<code>SELECT</code>语句。<br>如果我们需要对读取的语句进行排序，我们就可以使用<code>Order By</code>子句来设定你想要按照的字段进行排序并返回结果。</p><p>语法：</p><p><code>SELECT 字段名 FROM 表名 ORDER BY 字段名 [ASC[DESC]];</code><br>你还可以根据自己的需求添加<code>WHERE</code>、<code>LIKE</code>子句来设置条件，再对结果过进行排序显示。</p><p>现有<code>user</code>表数据如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>Tom</td><td>32</td></tr><tr><td>2</td><td>Nancy</td><td>18</td></tr><tr><td>3</td><td>Allen</td><td>24</td></tr><tr><td>4</td><td>Jason</td><td>23</td></tr></tbody></table><p>我们需要查询表中信息，要求按照年龄的<strong>升序</strong>进行排序：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%89%EF%BC%89/1-1.png"></p><h4 id="指定排序方向"><a href="#指定排序方向" class="headerlink" title="指定排序方向"></a>指定排序方向</h4><p>从上面的查询语句中我们并未看到有任何表示<strong>排序</strong>方向的关键字，在默认情况下，它是按<strong>升序</strong>排列的。</p><ul><li><code>ASC</code> 升序关键字</li><li><code>DESC</code> 降序关键字</li></ul><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧编辑器<code>Begin-End</code>处补充代码，查询学生成绩表中<code>1</code>班同学的所有信息并以<strong>成绩降序</strong>的方式显示结果。</p><p>我们已经为你提供了学生成绩表：<br><code>tb_score</code>表数据：</p><table><thead><tr><th>stu_id</th><th>class_id</th><th>name</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>Jack</td><td>81</td></tr><tr><td>2</td><td>1</td><td>David</td><td>74</td></tr><tr><td>3</td><td>1</td><td>Mason</td><td>92</td></tr><tr><td>4</td><td>2</td><td>Ethan</td><td>89</td></tr><tr><td>5</td><td>1</td><td>Gina</td><td>65</td></tr></tbody></table><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">stu_id</span>    class_id    name    score<br>   <span class="hljs-attribute">3</span>        <span class="hljs-number">1</span>        Mason      <span class="hljs-number">92</span><br>   <span class="hljs-attribute">2</span>        <span class="hljs-number">1</span>        David      <span class="hljs-number">74</span><br>   <span class="hljs-attribute">5</span>        <span class="hljs-number">1</span>        Gina       <span class="hljs-number">65</span><br></code></pre></td></tr></table></figure><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE School;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## 查询<span class="hljs-number">1</span>班同学的所有信息以成绩降序的方式显示结果 ##########<br>select * <span class="hljs-keyword">from</span> tb_score <span class="hljs-keyword">where</span> class_id=<span class="hljs-number">1</span> order by score desc;<br><br>########## End ##########<br><br></code></pre></td></tr></table></figure><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：对班级表中的班级名称进行分组查询。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你只需要掌握分组查询的单独使用。</p><p>但是在实际开发中一般不会用到，本章节只作为对分组查询的了解。往后继续学习，我们会介绍分组查询与其他查询一起结合使用。</p><h4 id="分组查询的单独使用"><a href="#分组查询的单独使用" class="headerlink" title="分组查询的单独使用"></a>分组查询的单独使用</h4><p>分组查询的关键字是<code>Group By</code>，查询的是每个分组中 首次出现的一条记录。</p><p>语法：</p><p><code>SELECT 字段名 FROM 表名 GROUP BY 字段名;</code><br>例如：<br>现有<code>user</code>表数据：</p><table><thead><tr><th>id</th><th>name</th><th>sex</th></tr></thead><tbody><tr><td>1</td><td>Tom</td><td>男</td></tr><tr><td>2</td><td>Nancy</td><td>女</td></tr><tr><td>3</td><td>Allen</td><td>Null</td></tr><tr><td>4</td><td>Jason</td><td>男</td></tr></tbody></table><p>我们对表中数据的性别进行分组查询：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%89%EF%BC%89/2-1.png"></p><p>可以看出，返回了<code>3</code>条记录，分别是<code>sex</code>字段值为<code>Null</code>、女、男的记录，查询结果按照<code>sex</code>字段中不同的值进行了<strong>分类，只显示每个分组中的一条记录</strong>，意义不大，一般情况下，<code>GROUP BY</code>都和聚合函数一起使用。</p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧编辑器<code>Begin-En</code>d&#96;处补充代码，对班级表中的班级名称进行分组查询。</p><p>我们已经为你提供了班级表信息：<br><code>tb_class</code>表数据：</p><table><thead><tr><th>stu_id</th><th>class_id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>367</td><td>Jack</td></tr><tr><td>2</td><td>366</td><td>David</td></tr><tr><td>3</td><td>366</td><td>Mason</td></tr><tr><td>4</td><td>367</td><td>Ethan</td></tr><tr><td>5</td><td>366</td><td>Gina</td></tr></tbody></table><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">stu_id    class_id    name<br> <span class="hljs-number"> 2 </span>       <span class="hljs-number"> 366 </span>      David<br> <span class="hljs-number"> 1 </span>       <span class="hljs-number"> 367 </span>      Jack<br></code></pre></td></tr></table></figure><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE School;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## 对班级名称进行分组查询 ##########<br>select * <span class="hljs-keyword">from</span> tb_class group by class_id;<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="使用-LIMIT-限制查询结果的数量"><a href="#使用-LIMIT-限制查询结果的数量" class="headerlink" title="使用 LIMIT 限制查询结果的数量"></a>使用 LIMIT 限制查询结果的数量</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用<code>LIMIT</code>关键字查询班级中第<code>2</code>名到第<code>5</code>名的学生信息，并根据学生成绩进行降序排序。</p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：<code>LIMIT</code>的基本使用。</p><h4 id="LIMIT的使用"><a href="#LIMIT的使用" class="headerlink" title="LIMIT的使用"></a><code>LIMIT</code>的使用</h4><p>在我们查询大量数据结果时，会返回很多条数据，有需要的记录可能就其中的一条或者几条。比如，实现分页功能，若每页显示<code>10</code>条记录，每次查询就只需要<code>10</code>条记录。<br>在<code>MySQL</code>中，提供了<code>LIMIT</code>关键字，用来限制查询结果的数量。</p><p>语法：<br><code>SELECT 字段名 FROM 表名 LIMIT [OFFSET,] 记录数;</code><br>参数说明：</p><ul><li><p>第一个参数，<code>OFFSET</code>，可选参数，表示<strong>偏移量</strong>，如果不指定默认值为<code>0</code>，表示从查询结果的第一条记录开始，若偏移量为<code>1</code>，则从查询结果中的第二条记录开始，以此类推。</p></li><li><p>第二个参数，记录数，表示返回查询结果的条数。</p></li></ul><p>现有<code>employee</code>表数据如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>Tom</td><td>23</td></tr><tr><td>2</td><td>Allen</td><td>45</td></tr><tr><td>3</td><td>Nancy</td><td>32</td></tr><tr><td>4</td><td>Jack</td><td>27</td></tr><tr><td>5</td><td>Rose</td><td>29</td></tr><tr><td>6</td><td>Mary</td><td>18</td></tr></tbody></table><p>查询<code>employee</code>表中前<code>4</code>条数据：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%89%EF%BC%89/3-1.png"></p><p>从第二条记录开始往后查看4条数据（不包含第二条）：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%89%EF%BC%89/3-2.png"></p><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>在右侧编辑器<code>Begin-End</code>处补充代码，查询班级中第<code>2</code>名到第<code>5</code>名的学生信息，并根据学生成绩进行降序排序。</p><p>我们已经为你提供了学生成绩表：<br><code>tb_score</code>表数据：</p><table><thead><tr><th>id</th><th>name</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>Jack</td><td>89</td></tr><tr><td>2</td><td>David</td><td>73</td></tr><tr><td>3</td><td>Mason</td><td>62</td></tr><tr><td>4</td><td>Ethan</td><td>93</td></tr><tr><td>5</td><td>Gina</td><td>76</td></tr><tr><td>6</td><td>Dorris</td><td>98</td></tr><tr><td>7</td><td>kain</td><td>86</td></tr><tr><td>8</td><td>Alice</td><td>91</td></tr></tbody></table><h3 id="测试说明-2"><a href="#测试说明-2" class="headerlink" title="测试说明"></a>测试说明</h3><p>平台会对你编写的代码进行测试：</p><p>预期输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span>    name    score<br><span class="hljs-attribute">4</span>     Ethan    <span class="hljs-number">93</span><br><span class="hljs-attribute">8</span>     Alice    <span class="hljs-number">91</span><br><span class="hljs-attribute">1</span>     Jack     <span class="hljs-number">89</span><br><span class="hljs-attribute">7</span>     kain     <span class="hljs-number">86</span><br></code></pre></td></tr></table></figure><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE School;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## 查询班级中第<span class="hljs-number">2</span>名到第<span class="hljs-number">5</span>名的学生信息 ##########<br>select * <span class="hljs-keyword">from</span> tb_score order by score desc limit <span class="hljs-number">1</span>,<span class="hljs-number">4</span>;<br><br>########## End ##########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux网络编程及文件操作</title>
    <link href="/2022/10/21/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%8F%8A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/10/21/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%8F%8A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>了解和熟悉Linux 环境下基于套接口的通信方式。本地进程间通信方<br>式局限在单一计算机内，基于套接口的通讯方式不仅可以实现单机内的进<br>程间通信，还可以实现不同计算机进程之间的通信。<br>文件操作是Linux 系统中最常见的操作之一，熟悉Linux 的文件系统及<br>其操作的相关系统调用，了解和掌握基于文件描述符和基于数据流的文件<br>I&#x2F;O 操作方式。</p><h3 id="tcp连接"><a href="#tcp连接" class="headerlink" title="tcp连接"></a>tcp连接</h3><p>TCP协议：是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能。</p><p>关键词：三次握手，可靠，基于字节流。<br><img src="/img/Linux/Linux%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%8F%8A%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/%E6%8F%92%E5%9B%BE.png"></p><h4 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h4><p>服务器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*使用面向连接的套接口实现通信*/</span><br><span class="hljs-regexp">/*套接口方式不仅可以实现单机内进程间通信，还可以实现不同计算机进程之间通信*/</span><br><span class="hljs-regexp">/*先运行tcp-server程序，端口号作为参数，实现server程序的监听。*/</span><br><span class="hljs-regexp">/*再运行tcp-client程序，以server所在的“ip地址127.0.0.1”或“主机名（localhost）”为第一参数，相同的端口号作为第二参数连接server*/</span><br><br><span class="hljs-regexp">/*tcp-server.c */</span><br><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;errno.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;netdb.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/types.h&gt;</span><br><span class="hljs-comment">#include &lt;netinet/in.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/socket.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;arpa/inet.h&gt;</span><br><span class="hljs-comment">#define MAXSIZE 1024     /*定义数据缓冲区大小*/</span><br><br>int main(int argc, char *argv[])<br>&#123;<br>int sockfd,new_fd;   <span class="hljs-regexp">/*定义存放套接口描述符的变量 */</span><br>struct sockaddr_in server_addr;   <span class="hljs-regexp">/*定义服务器端套接口数据结构server_addr */</span><br>struct sockaddr_in client_addr;   <span class="hljs-regexp">/*定义客户端套接口数据结构client_addr */</span><br>int sin_size,portnumber;<br>char buf[MAXSIZE];     <span class="hljs-regexp">/*定义发送数据缓冲区*/</span><br><span class="hljs-keyword">if</span>(argc!=<span class="hljs-number">2</span>)<br>&#123;<br>fprintf(stderr,<span class="hljs-string">&quot;Usage:%s portnumber\a\n&quot;</span>,argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((portnumber=atoi(argv[<span class="hljs-number">1</span>]))&lt;<span class="hljs-number">0</span>)<br>&#123;  <span class="hljs-regexp">/*获得命令行的第二个参数--端口号，atoi()把字符串转换成整型数*/</span><br>fprintf(stderr,<span class="hljs-string">&quot;Usage:%s portnumber\a\n&quot;</span>,argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((sockfd=socket(AF_INET,SOCK_STREAM,<span class="hljs-number">0</span>))==-<span class="hljs-number">1</span>)<span class="hljs-regexp">/*服务器端开始建立socket描述符*/</span><br>&#123;<br>fprintf(stderr,<span class="hljs-string">&quot;Socket error:%s\n\a&quot;</span>,strerror(errno));<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-regexp">/*服务器端填充 sockaddr结构*/</span><br>bzero(&amp;server_addr,sizeof(struct sockaddr_in)); <span class="hljs-regexp">/*先将套接口地址数据结构清零*/</span><br>server_addr.sin_family=AF_INET;<span class="hljs-regexp">/*设为TCP/</span>IP地址族*/<br>server_addr.sin_addr.s_addr=htonl(INADDR_ANY);<span class="hljs-regexp">/*设置本机地址并从主机字节序转换为网络字节序*/</span><br>server_addr.sin_port=htons(portnumber);<span class="hljs-regexp">/*设置端口号并从主机字节序转换为网络字节序*/</span><br><span class="hljs-keyword">if</span>(bind(sockfd,(struct sockaddr *)(&amp;server_addr),sizeof(struct sockaddr))==-<span class="hljs-number">1</span>)<span class="hljs-regexp">/*调用bind函数绑定指定的端口号和ip地址到服务器创建的套接口*/</span><br>&#123;<br>fprintf(stderr,<span class="hljs-string">&quot;Bind error:%s\n\a&quot;</span>,strerror(errno));<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(listen(sockfd,<span class="hljs-number">5</span>)==-<span class="hljs-number">1</span>)  <span class="hljs-regexp">/*端口绑定成功，监听sockfd描述符，设置同时处理的最大连接请求数为5 */</span><br>&#123;<br>fprintf(stderr,<span class="hljs-string">&quot;Listen error:%s\n\a&quot;</span>,strerror(errno));<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)      <span class="hljs-regexp">/*服务器阻塞，等待接收连接请求，直到客户程序发送连接请求*/</span><br>&#123;<br>sin_size=sizeof(struct sockaddr_in);<br><span class="hljs-keyword">if</span>((new_fd=accept(sockfd,(struct sockaddr *)(&amp;client_addr),&amp;sin_size))==-<span class="hljs-number">1</span>)  <span class="hljs-regexp">/*调用accept接受一个连接请求并返回一个新的套接口描述符*/</span><br>&#123;<br>fprintf(stderr,<span class="hljs-string">&quot;Accept error:%s\n\a&quot;</span>,strerror(errno));<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>fprintf(stderr,<span class="hljs-string">&quot;Server get connection from %s\n&quot;</span>,(inet_ntoa(client_addr.sin_addr)));   <span class="hljs-regexp">/*TCP连接已建立，打印申请连接的客户机的IP地址,IP地址从网络字节序转换为十进制数*/</span><br>printf(<span class="hljs-string">&quot;Connected successful, please input the masage[&lt;1024 bytes]:\n&quot;</span>);    <span class="hljs-regexp">/*提示用户输入将要发送的数据，长度小于缓冲区的长度，即1024字节*/</span><br>       <br><span class="hljs-keyword">if</span>(fgets(buf, sizeof(buf), stdin) != buf) <span class="hljs-regexp">/*从标准输入即键盘输入的数据存放在buf缓冲区*/</span><br>&#123;  <br>         printf(<span class="hljs-string">&quot;fgets error!\n&quot;</span>);<br>         <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(write(new_fd,buf,strlen(buf))==-<span class="hljs-number">1</span>)   <span class="hljs-regexp">/*调用write发送数据*/</span><br>&#123;<br>fprintf(stderr,<span class="hljs-string">&quot;Write Error:%s\n&quot;</span>,strerror(errno));<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>close(new_fd);  <span class="hljs-regexp">/*本次通信已结束，关闭客户端的套接口，并循环下一次等待*/</span><br>&#125;<br>close(sockfd);  <span class="hljs-regexp">/*服务器进程结束，关闭服务器端套接口*/</span><br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*使用面向连接的套接口实现通信*/</span><br><span class="hljs-regexp">/*套接口方式不仅可以实现单机内进程间通信，还可以实现不同计算机进程之间通信*/</span><br><span class="hljs-regexp">/*先运行tcp-server程序，端口号作为参数，实现server程序的监听。*/</span><br><span class="hljs-regexp">/*再运行tcp-client程序，以server所在的“ip地址127.0.0.1”或“主机名（localhost）”为第一参数，相同的端口号作为第二参数连接server*/</span><br><br><span class="hljs-regexp">/*tcp-client.c */</span><br><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;errno.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;netdb.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/types.h&gt;</span><br><span class="hljs-comment">#include &lt;netinet/in.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/socket.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><br>int main(int argc, char *argv[])<br>&#123;<br>int sockfd;<br>char buffer[<span class="hljs-number">1024</span>];<br>struct sockaddr_in server_addr; <span class="hljs-regexp">/*定义服务器端套接口数据结构server_addr */</span><br>struct hostent *host;<span class="hljs-regexp">/*定义一个hostent结构的指针 */</span><br>int portnumber,nbytes;<br><span class="hljs-keyword">if</span>(argc!=<span class="hljs-number">3</span>)<br>&#123;<br>fprintf(stderr,<span class="hljs-string">&quot;Usage:%s hostname portnumber\a\n&quot;</span>,argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((host=gethostbyname(argv[<span class="hljs-number">1</span>]))==NULL)<span class="hljs-regexp">/*通过域名或主机名得到包含地址的hostent指针 */</span><br>&#123;  <span class="hljs-regexp">/*获得命令行的第二个参数-主机名*/</span><br>fprintf(stderr,<span class="hljs-string">&quot;Gethostname error\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((portnumber=atoi(argv[<span class="hljs-number">2</span>]))&lt;<span class="hljs-number">0</span>)<br>&#123;  <span class="hljs-regexp">/*获得命令行的第三个参数--端口号，atoi()把字符串转换成整型数*/</span><br>fprintf(stderr,<span class="hljs-string">&quot;Usage:%s hostname portnumber\a\n&quot;</span>,argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-regexp">/* 客户程序开始建立 sockfd描述符 */</span><br><span class="hljs-keyword">if</span>((sockfd=socket(AF_INET,SOCK_STREAM,<span class="hljs-number">0</span>))==-<span class="hljs-number">1</span>)<br>&#123;<br>fprintf(stderr,<span class="hljs-string">&quot;Socket Error:%s\a\n&quot;</span>,strerror(errno));<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>); <br>&#125; <br><span class="hljs-regexp">/*客户程序填充服务端的资料*/</span><br>bzero(&amp;server_addr,sizeof(server_addr));<br>server_addr.sin_family=AF_INET;<br>server_addr.sin_port=htons(portnumber);<br>server_addr.sin_addr=*((struct in_addr *)host-&gt;h_addr);<br><span class="hljs-regexp">/*客户程序发起连接请求*/</span><br><span class="hljs-keyword">if</span>(connect(sockfd,(struct sockaddr *)(&amp;server_addr),sizeof(struct sockaddr))==-<span class="hljs-number">1</span>)<br>&#123;<br>fprintf(stderr,<span class="hljs-string">&quot;Connect Error:%s\a\n&quot;</span>,strerror(errno));<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-regexp">/*连接成功，调用read读取服务器发送来的数据*/</span><br><span class="hljs-keyword">if</span>((nbytes=read(sockfd,buffer,<span class="hljs-number">1024</span>))==-<span class="hljs-number">1</span>)<br>&#123;<br>fprintf(stderr,<span class="hljs-string">&quot;Read Error:%s\n&quot;</span>,strerror(errno));<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125; <br>buffer[nbytes]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>printf(<span class="hljs-string">&quot;I have received:%s\n&quot;</span>,buffer);   <span class="hljs-regexp">/*输出接收到的数据*/</span><br>close(sockfd);   <span class="hljs-regexp">/*结束通信*/</span> <br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h4><p>服务器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*先运行tcp-server程序，再运行tcp-client程序*/</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span><span class="hljs-comment">// 包含套接字函数库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span><span class="hljs-comment">// 包含AF_INET相关结构</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span><span class="hljs-comment">// 包含AF_INET相关操作的函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PORT 3339</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">char</span> sendbuf[<span class="hljs-number">256</span>]=<span class="hljs-string">&quot;OK&quot;</span>;<br>   <span class="hljs-type">char</span> buf[<span class="hljs-number">256</span>];<br>   <span class="hljs-type">int</span> s_fd, c_fd;<span class="hljs-comment">// 服务器和客户套接字标识符</span><br>   <span class="hljs-type">int</span> s_len, c_len;<span class="hljs-comment">// 服务器和客户消息长度</span><br>   <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> s_addr;<span class="hljs-comment">// 服务器套接字地址</span><br>   <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> c_addr;<span class="hljs-comment">// 客户套接字地址</span><br>   s_fd = <span class="hljs-built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>); <span class="hljs-comment">// 创建套接字</span><br>   s_addr.sin_family = AF_INET;<span class="hljs-comment">// 定义服务器套接字地址中的地址域为IPv4</span><br>   s_addr.sin_addr.s_addr=<span class="hljs-built_in">htonl</span>(INADDR_ANY); <span class="hljs-comment">// 定义套接字地址</span><br>   s_addr.sin_port = <span class="hljs-built_in">htons</span>(PORT); <span class="hljs-comment">// 定义服务器套接字端口</span><br>   s_len = <span class="hljs-built_in">sizeof</span>(s_addr);<br>   <span class="hljs-built_in">bind</span>(s_fd, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;s_addr, s_len);<span class="hljs-comment">// 绑定套接字与设置的端口号</span><br>   <span class="hljs-built_in">listen</span>(s_fd, <span class="hljs-number">10</span>); <span class="hljs-comment">//监听，最大连接请求设为10</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请稍候，等待客户端发送数据\n&quot;</span>);<br>   c_len = <span class="hljs-built_in">sizeof</span>(c_addr); <span class="hljs-comment">//接收客户端连接请求</span><br>   c_fd = <span class="hljs-built_in">accept</span>(s_fd,(<span class="hljs-keyword">struct</span> sockaddr *) &amp;c_addr,(<span class="hljs-type">socklen_t</span> *__restrict) &amp;c_len);<br>   <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-built_in">recv</span>(c_fd,buf,<span class="hljs-number">256</span>,<span class="hljs-number">0</span>)&gt;<span class="hljs-number">0</span>) <span class="hljs-comment">//接收消息recv(c_fd,buf,256,0)&gt;0</span><br>&#123;<br>      <span class="hljs-comment">//read(c_fd,buf,256,0)</span><br>      <span class="hljs-comment">//buf[sizeof(buf)+1]=&#x27;\0&#x27;;</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到客户端消息:\n %s\n&quot;</span>,buf);<span class="hljs-comment">//输出到终端</span><br>      <span class="hljs-built_in">send</span>(c_fd,sendbuf,<span class="hljs-built_in">sizeof</span>(sendbuf),<span class="hljs-number">0</span>);<span class="hljs-comment">//回复消息</span><br>      &#125;<br>   &#125;<br>   <span class="hljs-built_in">close</span>(c_fd);<span class="hljs-comment">// 关闭连接</span><br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*先运行tcp-server程序，再运行tcp-client程序*/</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span> <span class="hljs-comment">// 包含套接字函数库</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span> <span class="hljs-comment">// 包含AF_INET相关结构</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span> <span class="hljs-comment">// 包含AF_INET相关操作的函数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PORT 3339</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-type">int</span> sockfd; <span class="hljs-comment">// 客户套接字标识符</span><br>   <span class="hljs-type">int</span> len; <span class="hljs-comment">// 客户消息长度</span><br>   <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sockaddr_in</span> addr; <span class="hljs-comment">// 客户套接字地址</span><br>   <span class="hljs-type">int</span> newsockfd;<br>   <span class="hljs-type">char</span> buf[<span class="hljs-number">256</span>]=<span class="hljs-string">&quot;come on!&quot;</span>;<span class="hljs-comment">//要发送的消息</span><br>   <span class="hljs-type">int</span> len2;<br>   <span class="hljs-type">char</span> rebuf[<span class="hljs-number">256</span>];  <br>   sockfd = <span class="hljs-built_in">socket</span>(AF_INET,SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-comment">// 创建套接字</span><br>   addr.sin_family = AF_INET; <span class="hljs-comment">// 客户端套接字地址中的域</span><br>   addr.sin_addr.s_addr=<span class="hljs-built_in">htonl</span>(INADDR_ANY);   <br>   addr.sin_port = <span class="hljs-built_in">htons</span>(PORT); <span class="hljs-comment">// 客户端套接字端口</span><br>   len = <span class="hljs-built_in">sizeof</span>(addr);<br>   newsockfd = <span class="hljs-built_in">connect</span>(sockfd, (<span class="hljs-keyword">struct</span> sockaddr *) &amp;addr, len);<span class="hljs-comment">//发送连接服务器的请求</span><br>   <span class="hljs-keyword">if</span> (newsockfd == <span class="hljs-number">-1</span>) &#123;<br>      <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;连接失败&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>   &#125;<br>   len2=<span class="hljs-built_in">sizeof</span>(buf);<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入要发送的数据:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,buf);<br>    <span class="hljs-built_in">send</span>(sockfd,buf,len2,<span class="hljs-number">0</span>); <span class="hljs-comment">//发送消息</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">recv</span>(sockfd,rebuf,<span class="hljs-number">256</span>,<span class="hljs-number">0</span>)&gt;<span class="hljs-number">0</span>)<span class="hljs-comment">//接收新消息</span><br>    &#123;<br><span class="hljs-comment">//rebuf[sizeof(rebuf)+1]=&#x27;\0&#x27;;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;收到服务器消息:\n%s\n&quot;</span>,rebuf);<span class="hljs-comment">//输出到终端</span><br>    &#125;<br>&#125;<br>   <span class="hljs-built_in">close</span>(sockfd);<span class="hljs-comment">// 关闭连接</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件I-x2F-O操作"><a href="#文件I-x2F-O操作" class="headerlink" title="文件I&#x2F;O操作"></a>文件I&#x2F;O操作</h3><h4 id="例子1-1"><a href="#例子1-1" class="headerlink" title="例子1"></a>例子1</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*基于文件描述符的操作*/</span><br><span class="hljs-regexp">/*程序中创建出的文件，可使用“od -td1 -tc -Ad 文件名”方式查看其内容结构 */</span><br>/*-td1选项表示将文件中的字节以十进制的形式列出来，每组一个字节。<br>-tc选项表示将文件中的ASCII码以字符形式列出来。<br>输出结果最左边的一列是文件中的地址，-Ad选项要求以十进制显示文件中的地址。*/<br><br><span class="hljs-comment">#include &lt;sys/types.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/stat.h&gt;</span><br><span class="hljs-comment">#include &lt;fcntl.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><br><span class="hljs-comment">#define FILENAME &quot;test&quot;    /*要进行操作的文件*/</span><br><span class="hljs-comment">#define FLAGS O_WRONLY | O_CREAT | O_TRUNC</span><br><span class="hljs-regexp">/*定义参数FLAGS：以读写方式打开文件，向文件添加内容时从文件尾开始写*/</span><br><span class="hljs-comment">#define MODE 0600</span><br><br>int main(void)<br>&#123;<br>    char buf1[ ] = &#123;<span class="hljs-string">&quot;abcdefghij&quot;</span>&#125;;    <span class="hljs-regexp">/*缓冲区1，长度为10*/</span><br>    char buf2[ ] = &#123;<span class="hljs-string">&quot;1234567890&quot;</span>&#125;;  <span class="hljs-regexp">/*缓冲区2，长度为10*/</span><br>    int fd;                       <span class="hljs-regexp">/*文件描述符*/</span><br>    int count;<br>    const char *pathname = FILENAME;    <span class="hljs-regexp">/*指向需要进行操作的文件的路径名*/</span><br>    <span class="hljs-keyword">if</span>((fd=open(pathname,FLAGS,MODE))==-<span class="hljs-number">1</span>)   <span class="hljs-regexp">/*调用open函数打开文件*/</span><br>     &#123;<br>        printf(<span class="hljs-string">&quot;error,open file failed!\n&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);   <span class="hljs-regexp">/*出错退出*/</span><br>     &#125;<br>    count = strlen(buf1);                <span class="hljs-regexp">/*缓冲区1的长度*/</span><br>    <span class="hljs-keyword">if</span>(write(fd,buf1,count)!=count)       <span class="hljs-regexp">/*调用write函数将缓冲区1的数据写入文件*/</span><br>    &#123;<br>       printf(<span class="hljs-string">&quot;error,write file failed!\n&quot;</span>);<br>       <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);   <span class="hljs-regexp">/*写出错，退出*/</span><br>    &#125;<br>    system(<span class="hljs-string">&quot;cat test&quot;</span>);<span class="hljs-regexp">//</span>使用cat命令显示文件内容<br>    printf(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">if</span>(lseek(fd,<span class="hljs-number">5</span>,SEEK_SET)==-<span class="hljs-number">1</span>) <br>    <span class="hljs-regexp">/*调用lseek函数定位文件，偏移量为5，从文件开头计算偏移值*/</span><br>    &#123;<br>       printf(<span class="hljs-string">&quot;error,lseek failed!\n&quot;</span>);<br>       <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);   <span class="hljs-regexp">/*出错退出*/</span><br>    &#125;<br>    count = strlen(buf2);                <span class="hljs-regexp">/*缓冲区2的长度*/</span><br>    <span class="hljs-keyword">if</span>(write(fd,buf2,count)!=count)       <span class="hljs-regexp">/*调用write函数将缓冲区2的数据写入文件*/</span><br>    &#123;<br>       printf(<span class="hljs-string">&quot;error,write file failed!\n&quot;</span>);<br>       <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);   <span class="hljs-regexp">/*写出错，退出*/</span><br>    &#125;<br>    system(<span class="hljs-string">&quot;cat test&quot;</span>);<span class="hljs-regexp">//</span>使用cat命令显示文件内容<br>    printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例子2-1"><a href="#例子2-1" class="headerlink" title="例子2"></a>例子2</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*基于流的I/</span>O操作--打开关闭文件流的操作*/<br><span class="hljs-regexp">/*基于流的I/</span>O操作比基于文件描述符的I<span class="hljs-regexp">/O操作更简单方便一些*/</span><br><span class="hljs-regexp">/*参阅《LinuxC编程一站式学习》第25章C标准库第2节标准IO库函数的内容*/</span><br><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;fcntl.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><br>int main(void)<br>&#123;<br>    FILE *fp;<br>    int fd;<br>    <br>    <span class="hljs-keyword">if</span>( (fp = fopen(<span class="hljs-string">&quot;hello.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)) == NULL)<br>    &#123;   <span class="hljs-regexp">/*以只写方式打开文件，并清空文件。若没有此文件，则创建它。路径为当前目录下，也可使用绝对路径。打开成功返回文件指针。--基于流的方式*/</span><br>        printf (<span class="hljs-string">&quot;fail to open 1!\n&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);          <span class="hljs-regexp">/*出错退出*/</span><br>    &#125;<br>    fprintf(fp, <span class="hljs-string">&quot;Hello! I like Linux C program!\n&quot;</span>); <br>        <span class="hljs-regexp">/*向该流输出一段信息，这段信息会保存到打开的文件上，形成文件文件*/</span><br>    fclose(fp);               <span class="hljs-regexp">/*操作完毕，关闭流*/</span><br>    <br>    <span class="hljs-keyword">if</span>( (fd = open(<span class="hljs-string">&quot;hello.txt&quot;</span>, O_RDWR)) == -<span class="hljs-number">1</span>)<br>      &#123;  <span class="hljs-regexp">/*以读写的方式打开文件--基于文件描述符的方式*/</span><br>         printf (<span class="hljs-string">&quot;fail to open!\n&quot;</span>);<br>         <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);         <span class="hljs-regexp">/*出错退出*/</span><br>      &#125;<br>    <br>    <span class="hljs-keyword">if</span>((fp = fdopen(fd, <span class="hljs-string">&quot;a+&quot;</span>)) == NULL)<br>      &#123;  <span class="hljs-regexp">/*在打开的文件上打开一个流，基于已存在的文件描述符打开流，并从文件尾开始读写。*/</span><br>        <span class="hljs-regexp">/*其中w代表write，r代表read，a代表append，+代表更新*/</span><br>         printf (<span class="hljs-string">&quot;fail to open stream!\n&quot;</span>);<br>         <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);         <span class="hljs-regexp">/*出错退出*/</span><br>      &#125;<br>    fprintf(fp, <span class="hljs-string">&quot;I am doing Linux C programs!\n&quot;</span>);<br>         <span class="hljs-regexp">/*向该流输出一段信息，这段信息会保存到打开的文件上*/</span><br>    fclose(fp);             <span class="hljs-regexp">/*关闭流，文件也被关闭*/</span><br>    system(<span class="hljs-string">&quot;cat hello.txt&quot;</span>);<span class="hljs-regexp">//</span>使用cat命令显示文件内容<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*流文件指针位置的定位操作*/</span><br><span class="hljs-comment">/*程序中创建出的文件非纯文本文件，可使用“od -td1 -tc -Ad 文件名”方式查看其内容 */</span><br><span class="hljs-comment">/*-td1选项表示将文件中的字节以十进制的形式列出来，每组一个字节。</span><br><span class="hljs-comment">-tc选项表示将文件中的ASCII码以字符形式列出来。</span><br><span class="hljs-comment">输出结果最左边的一列是文件中的地址，-Ad选项要求以十进制显示文件中的地址。*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">stu</span><br>&#123;<br><span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">struct</span> <span class="hljs-title class_">stu</span> mystu[<span class="hljs-number">3</span>]=&#123;&#123;<span class="hljs-string">&quot;Jim&quot;</span>,<span class="hljs-number">14</span>&#125;,&#123;<span class="hljs-string">&quot;Jam&quot;</span>,<span class="hljs-number">15</span>&#125;,&#123;<span class="hljs-string">&quot;Lily&quot;</span>,<span class="hljs-number">19</span>&#125;&#125;;<br>   <span class="hljs-keyword">struct</span> <span class="hljs-title class_">stu</span> mystuout;<br>   FILE *fp;<br>   <span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> errno; <br>   <span class="hljs-type">char</span> file[]=<span class="hljs-string">&quot;record.txt&quot;</span>;<br>   <span class="hljs-type">int</span> i,j;<br>   <span class="hljs-type">long</span> k;<br>   <span class="hljs-type">fpos_t</span> pos1,pos2;<br>  <br>   fp=<span class="hljs-built_in">fopen</span>(file,<span class="hljs-string">&quot;w&quot;</span>);<br>   <span class="hljs-keyword">if</span>(fp==<span class="hljs-literal">NULL</span>)<br>   &#123;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cant&#x27;t open file %s.\n&quot;</span>,file);<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;errno:%d\n&quot;</span>,errno);<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR  :%s\n&quot;</span>,<span class="hljs-built_in">strerror</span>(errno));<br>     <span class="hljs-keyword">return</span>(<span class="hljs-number">1</span>);<br>   &#125;<br>   <span class="hljs-keyword">else</span><br>   &#123;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s was opened.\n&quot;</span>,file);   <br>&#125;<br> <br>    i=<span class="hljs-built_in">fwrite</span>(mystu,<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> stu),<span class="hljs-number">3</span>,fp);<span class="hljs-comment">//创建的文件内容为二进制文件，非纯文本文件.</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d students was written.\n&quot;</span>,i);<br>    <span class="hljs-built_in">fclose</span>(fp);<br><br><span class="hljs-comment">/*以下为按指定要求读出记录*/</span><br><br>   fp=<span class="hljs-built_in">fopen</span>(file,<span class="hljs-string">&quot;r&quot;</span>);<br>   <span class="hljs-keyword">if</span>(fp==<span class="hljs-literal">NULL</span>)<br>   &#123;<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;cant&#x27;t open file %s.\n&quot;</span>,file);<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;errno:%d\n&quot;</span>,errno);<br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERR  :%s\n&quot;</span>,<span class="hljs-built_in">strerror</span>(errno));<br>     <span class="hljs-keyword">return</span>(<span class="hljs-number">1</span>);<br>   &#125;<br><br><br>   k=<span class="hljs-built_in">ftell</span>(fp);<span class="hljs-comment">//ftell函数可得到当前文件指针位置</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前指针位置为%ld .\n&quot;</span>,k);<br><br>   <span class="hljs-built_in">fseek</span>(fp,<span class="hljs-number">1</span>*<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> stu),SEEK_SET);<span class="hljs-comment">//从文件开始（SEEK_SET）移动指针至1个结构体的偏移量</span><br>   <br>   <span class="hljs-built_in">fgetpos</span>(fp,&amp;pos1);<span class="hljs-comment">//另外一种得到当前文件指针位置的方法</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;移动指针后的当前指针位置为%f .\n&quot;</span>,(<span class="hljs-type">float</span>)pos1.__pos);<br>  <br>   j=<span class="hljs-built_in">fread</span>(&amp;mystuout,<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> stu),<span class="hljs-number">1</span>,fp);<span class="hljs-comment">//从文件流中读1个结构体的长度的内容至mystuout</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d students was read.\n&quot;</span>,j);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NAME:%s\tAGE:%d\n&quot;</span>,mystuout.name,mystuout.age);<br><br>   k=<span class="hljs-built_in">ftell</span>(fp);<span class="hljs-comment">//得到当前文件指针位置</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;读出记录后的当前指针位置为%ld .\n&quot;</span>,k);<br><br>   j=<span class="hljs-built_in">fread</span>(&amp;mystuout,<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> stu),<span class="hljs-number">1</span>,fp);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d students was read.\n&quot;</span>,j);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NAME:%s\tAGE:%d\n&quot;</span>,mystuout.name,mystuout.age);<br><br>   pos2.__pos=(<span class="hljs-type">long</span>)(<span class="hljs-number">1</span>*<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> stu));<span class="hljs-comment">//设置移动量为一个结构体</span><br>   <span class="hljs-built_in">fsetpos</span>(fp,&amp;pos2);<span class="hljs-comment">//另外一种移动文件指针位置的方法</span><br>  <br>   k=<span class="hljs-built_in">ftell</span>(fp);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;再次移动指针后的当前指针位置为%ld .\n&quot;</span>,k);<br><br>   j=<span class="hljs-built_in">fread</span>(&amp;mystuout,<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> stu),<span class="hljs-number">1</span>,fp);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d students was read.\n&quot;</span>,j);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NAME:%s\tAGE:%d\n&quot;</span>,mystuout.name,mystuout.age);<br><br>   k=<span class="hljs-built_in">ftell</span>(fp);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;再次读记录后的当前指针位置为%ld .\n&quot;</span>,k);<br><br>   <span class="hljs-built_in">fclose</span>(fp);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例子4"><a href="#例子4" class="headerlink" title="例子4"></a>例子4</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*一个简单的员工档案管理系统，可以实现简单的员工资料增加、删除及查询*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ARFILE <span class="hljs-string">&quot;./usr.ar&quot;</span><span class="hljs-comment">//指定档案文件的路径名称</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">arstruct</span><span class="hljs-comment">//员工资料结构</span><br>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span> tele[<span class="hljs-number">21</span>];<br>&#125;;<br><br><br><span class="hljs-comment">/*删除员工函数==================================*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">removeuser</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">arstruct</span> ar;<br>    FILE *fp;<br>    FILE *fpn;<br>    <span class="hljs-keyword">if</span>((fpn = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;./tmpfile&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((fp = <span class="hljs-built_in">fopen</span>(ARFILE,<span class="hljs-string">&quot;r&quot;</span>)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(&amp;ar,<span class="hljs-number">0x00</span>,<span class="hljs-built_in">sizeof</span>(ar));<span class="hljs-comment">//清空结构</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入员工姓名:&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(name,<span class="hljs-number">0x00</span>,<span class="hljs-built_in">sizeof</span>(name));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,name);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fread</span>(&amp;ar,<span class="hljs-built_in">sizeof</span>(ar),<span class="hljs-number">1</span>,fp) == <span class="hljs-number">1</span>)<span class="hljs-comment">//循环复制，与输入姓名相匹配的不复制</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(name,ar.name) != <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-built_in">fwrite</span>(&amp;ar,<span class="hljs-built_in">sizeof</span>(ar),<span class="hljs-number">1</span>,fpn);<span class="hljs-comment">//不相同，则复制</span><br>        &#125;<br>        <span class="hljs-built_in">memset</span>(&amp;ar,<span class="hljs-number">0x00</span>,<span class="hljs-built_in">sizeof</span>(ar));<br>    &#125;<br>    <span class="hljs-built_in">fclose</span>(fp);<br>    <span class="hljs-built_in">fclose</span>(fpn);<br>    <span class="hljs-built_in">remove</span>(ARFILE);<span class="hljs-comment">//删除原档案文件</span><br>    <span class="hljs-built_in">rename</span>(<span class="hljs-string">&quot;./tmpfile&quot;</span>,ARFILE);<span class="hljs-comment">//复制好的新文件重命名为档案文件</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除员工资料成功,按任意键继续...\n&quot;</span>);<br><br>    <span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//清楚缓冲区残留的\n</span><br>    <span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//等待回车</span><br>&#125;<br><br><span class="hljs-comment">/*查询员工函数==================================*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">queryuser</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> found;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">arstruct</span> ar;<br>    FILE *fp;<br>    <span class="hljs-keyword">if</span>((fp = <span class="hljs-built_in">fopen</span>(ARFILE,<span class="hljs-string">&quot;r&quot;</span>)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(&amp;ar,<span class="hljs-number">0x00</span>,<span class="hljs-built_in">sizeof</span>(ar));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入员工姓名:&quot;</span>);<br>    <span class="hljs-built_in">memset</span>(name,<span class="hljs-number">0x00</span>,<span class="hljs-built_in">sizeof</span>(name));<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,name);<br>    found=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fread</span>(&amp;ar,<span class="hljs-built_in">sizeof</span>(ar),<span class="hljs-number">1</span>,fp) == <span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(name,ar.name) == <span class="hljs-number">0</span>)<br>        &#123;<br>            found=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-built_in">memset</span>(&amp;ar,<span class="hljs-number">0x00</span>,<span class="hljs-built_in">sizeof</span>(ar));<br>    &#125;<br>    <span class="hljs-built_in">fclose</span>(fp);<br>    <span class="hljs-keyword">if</span>(found)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名=%s\n&quot;</span>,ar.name);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;年龄=%d\n&quot;</span>,ar.age);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;手机=%s\n&quot;</span>,ar.tele);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没有员工%s的数据\n&quot;</span>,name);<br>    &#125;<br><br>    <span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//清楚缓冲区残留的\n</span><br>    <span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//等待回车</span><br>&#125;<br><br><span class="hljs-comment">/*增加员工函数==================================*/</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insertuser</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">arstruct</span> ar;<br>    FILE *fp;<br>    <span class="hljs-keyword">if</span>((fp = <span class="hljs-built_in">fopen</span>(ARFILE,<span class="hljs-string">&quot;a&quot;</span>)) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(&amp;ar,<span class="hljs-number">0x00</span>,<span class="hljs-built_in">sizeof</span>(ar));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入员工姓名:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,ar.name);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入员工年龄:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;(ar.age));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入员工手机号码:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,ar.tele);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">fwrite</span>(&amp;ar,<span class="hljs-built_in">sizeof</span>(ar),<span class="hljs-number">1</span>,fp) &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;fwrite&quot;</span>);<br>        <span class="hljs-built_in">fclose</span>(fp);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">fclose</span>(fp);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;增加新员工成功,按任意键继续...\n&quot;</span>);<br><br>    <span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//清楚缓冲区残留的\n</span><br>    <span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//等待回车</span><br>&#125;<br><br><span class="hljs-comment">/*主程序，输出结果==================================*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[2J&quot;</span>);<span class="hljs-comment">//清屏。也可使用system(&quot;clear&quot;)  </span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     *员工档案管理系统*\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------\n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     1.录入新员工档案      \n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     2.查看员工档案          \n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     3.删除员工档案          \n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     0.退出系统            \n&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------\n&quot;</span>);<br>        <span class="hljs-keyword">switch</span>((c=<span class="hljs-built_in">getchar</span>()))<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>                <span class="hljs-built_in">insertuser</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>                <span class="hljs-built_in">queryuser</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>                <span class="hljs-built_in">removeuser</span>();<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;0&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux C</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单表查询（二）</title>
    <link href="/2022/10/21/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/10/21/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>文章主要如何使用通配符进行内容查询、如何去除重复结果和查询空值以及如何进行多条件查询。</p><h2 id="带-LIKE-的字符匹配查询"><a href="#带-LIKE-的字符匹配查询" class="headerlink" title="带 LIKE 的字符匹配查询"></a>带 LIKE 的字符匹配查询</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用通配符%检索数据表中指定字段的数据。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何使用通配符%模糊匹配数据内容。</p><p>在前面的检所操作中，我们讲述了如何进行比较查询或者是范围查询，但如果我们想查找所有包含字符<code>ir</code>的内容该么办呢？用之前的方法好像行不通了。在这里，我们需要用通配符进行匹配查找。而执行匹配查找的关键字就是<code>LIKE</code>。<br><code>SQL</code>语句支持很多种通配符，其中可以和LIKE一起搭配使用的就是通配符<code>%</code>和<code>_</code>了。</p><h4 id="使用通配符-模糊匹配数据内容"><a href="#使用通配符-模糊匹配数据内容" class="headerlink" title="使用通配符%模糊匹配数据内容"></a>使用通配符<code>%</code>模糊匹配数据内容</h4><p>百分号通配符%可以匹配任意长度的字符，甚至包括零字符。</p><p>语法规则为： <code>SELECT 字段名 FROM 表名 WHERE 字段名 LIKE &#39;字符%&#39;;</code> 。 其中<code>%</code>的位置可以根据需要在字符间变化。<br><strong>举个例子</strong><br>假设我们现在有一张表<code>Mall_products</code>，内容如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/1-1.png"></p><p>我们将使用<code>LIKE</code>关键字和通配符%检索出所有商品名称带<code>ir</code>的商品信息。</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Mall_products<br><span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%ir%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/1-2.png"></p><p><strong>分析：</strong><br>该语句查询的结果返回所有商品的名字中间带<code>ir</code>字符的所有信息。通配符%告诉<code>MySQL</code>，返回字符串中间带<code>ir</code>字符的记录，不管<code>ir</code>前面和后面分别有多少字符。</p><p>通配符<code>%</code>可以放在不同的位置以满足你查询的需要，仔细想想，如果我们想要查找商品名称以<code>B</code>开头的所有记录，<code>%</code>应该放在哪里？</p><p>查询过程如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/1-3.gif"></p><h4 id="使用通配符-模糊匹配数据内容-1"><a href="#使用通配符-模糊匹配数据内容-1" class="headerlink" title="使用通配符_模糊匹配数据内容"></a>使用通配符<code>_</code>模糊匹配数据内容</h4><p>下划线通配符<code>_</code>与百分号通配符<code>%</code>类似，也用于模糊匹配。但是区别在于下划线通配符<code>_</code>只能模糊匹配<code>1个</code>字符。如果你执意想用下划线通配符<code>_</code>匹配多个字符，那只能多用几个<code>_</code>咯！</p><p>语法规则为： <code>SELECT 字段名 FROM 表名 WHERE 字段名 LIKE &#39;字符_&#39;;</code> 。 其中<code>_</code>的位置可以根据需要在字符间变化。<br><strong>举个例子</strong><br>假设我们现在有一张表<code>Mall_products</code>，内容如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/1-4.png"></p><p>我们将使用<code>LIKE</code>关键字和通配符<code>_</code>检索出所有商品名称以<code>r</code>结尾，且前边有9个字母的商品信息。</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Mall_products<br><span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;_________r&#x27;</span>;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/1-5.png"></p><p>看到查询结果中<code>prod_name</code>对应的<code>Teddy bear</code>，大家可能注意到了，我们把空格也当成了一个字符来计算。</p><p>查询过程如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/1-6.gif"></p><p>好了，下面轮到你们来上手试试了！</p><h4 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h4><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码；</p><p>我们为你新建了一个数据表<code>tb_emp</code>，结构如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/1-7.png"></p><p>请你查询所有<code>Name</code>以字母<code>C</code>为起始的员工的<code>Name</code>和<code>Salary</code>的内容；<br>测试说明<br>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/1-8.png"></p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>######### Begin #########<br>select Name,Salary <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> Name like <span class="hljs-string">&#x27;C%&#x27;</span><br><br>######### End #########<br><br></code></pre></td></tr></table></figure><h2 id="查询空值与去除重复结果"><a href="#查询空值与去除重复结果" class="headerlink" title="查询空值与去除重复结果"></a>查询空值与去除重复结果</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用关键字<code>IS NULL</code>检索数据表中指定的字段的空值；使用关键字<code>DISTINCT</code>检索数据表中指定的不重复的内容。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：<br>1.如何使用关键字<code>IS NULL</code>检索数据表中的空值，<br>2.使用关键字<code>DISTINCT</code>检索数据表中不重复的内容。</p><h4 id="查询空值"><a href="#查询空值" class="headerlink" title="查询空值"></a>查询空值</h4><p>在数据表创建之初，创建者可以指定某个字段是否为空值<code>NULL</code>。注意了，这个<code>NULL</code>既不代表<code>0</code>，也不代表空字符，而是代表一种未知的状态，比如不适用或者放着等将来有合适数据了再添加进去。</p><p>语法规则为： <code>SELECT 字段名 FROM 表名 WHERE 字段名 IS NULL;</code> 。<br><strong>举个例子</strong><br>假设我们现在有一张表<code>Mall_products</code>，内容如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2-1.png"></p><p>我们将使用<code>IS NULL</code>关键字检索出所有<code>prod_country</code>字段为<code>NULL</code>的商品信息。</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Mall_products<br><span class="hljs-keyword">WHERE</span> prod_country <span class="hljs-keyword">IS</span> <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2-2.png"></p><p>查询过程如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2-3.gif"></p><p>可以看到，结果成功显示了<code>prod_country</code>字段为<code>NULL</code>的商品信息。与关键字<code>IS NULL</code>查询结果相反的是关键字<code>IS NOT NULL</code>，我们来看看实际操作的效果。</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Mall_products<br><span class="hljs-keyword">WHERE</span> prod_country <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2-4.png"></p><p>查询过程如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2-5.gif"></p><p>可以看到，查出来了<code>prod_country</code>字段的非<code>NULL</code>记录。</p><h4 id="去除重复结果"><a href="#去除重复结果" class="headerlink" title="去除重复结果"></a>去除重复结果</h4><p>有的时候，出于对数据分析的要求，分析人员需要消除数据表中重复的数据，那么如何消除呢？别担心，<code>SQL</code>语句也贴心的为你准备好了消除重复数据的关键字<code>DISTINCT</code>。</p><p>语法规则为： <code>SELECT DISTINCT 字段名 FROM 表名;</code> 。<br><strong>举个例子</strong><br>假设我们现在有一张表<code>Mall_products</code>，内容如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2-6.png"></p><p>可以从表中看到，除了字段<code>ID</code>没有重复项，剩下的字段里都出现了重复项。</p><p>我们将使用<code>DISTINCT</code>关键字去除<code>prod_name</code>字段中的重复数据。</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> prod_name, prod_country, prod_price<br><span class="hljs-keyword">FROM</span> Mall_products;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2-7.png"></p><p>查询过程如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2-8.gif"></p><p>可以看到，使用了关键字<code>DISTINCT</code>后，我们返回的记录都不再有重复值。</p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码：</p><p>我们为你新建了一个数据表<code>tb_emp</code>，内容如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2-9.png"></p><ul><li><p>使用关键字<code>IS NULL</code>返回数据表中字段<code>DeptId</code>为<code>NULL</code>的所有字段的内容，注意，返回的是指定行所有字段的内容；</p></li><li><p>使用关键字<code>DISTINCT</code>返回数据表中字段<code>Name</code>不重复的内容，注意，只需返回字段<code>Name</code>的内容。</p></li></ul><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/2-10.png"></p><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>######### Begin #########<br>select * <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> DeptId is null;<br><br>######### End #########<br><br>######### Begin #########<br>select distinct Name <span class="hljs-keyword">from</span> tb_emp;<br><br>######### End #########<br></code></pre></td></tr></table></figure><h2 id="带-AND-与-OR-的多条件查询"><a href="#带-AND-与-OR-的多条件查询" class="headerlink" title="带 AND 与 OR 的多条件查询"></a>带 AND 与 OR 的多条件查询</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用关键字<code>AND</code>检索数据表中指定的字段的内容；使用关键字<code>IN</code>检索数据表中指定的字段的内容。</p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：<br>1.如何使用关键字<code>AND</code>检索数据表中指定的字段的内容，<br>2.使用关键字<code>IN</code>检索数据表中指定的字段的内容。</p><h4 id="带AND关键字的多条件查询"><a href="#带AND关键字的多条件查询" class="headerlink" title="带AND关键字的多条件查询"></a>带<code>AND</code>关键字的多条件查询</h4><p>大家在前两章使用<code>WHERE</code>关键字限定查询内容的时候，有没有注意到我们使用的都是单一条件查询。有没有同学曾经在检索的时候觉得力不从心：“我需要的结果只用单一条件查询是得不到的呀！”</p><p>比如，我既想要成熟苹果中直径大于<code>5cm</code>的苹果的品种，又想要成熟苹果果色为黄色的苹果的品种。这两个条件如何综合在一起进行检索呢？</p><p><code>MySQ</code>L在<code>WHERE</code>子句中使用<code>AND</code>操作符限制只有满足所有条件的查询才会被返回。可以使用<code>AND</code>连接两个甚至更多个查询条件，多个条件表达式之间用<code>AND</code>分开。</p><p>语法规则为： <code>SELECT 字段名 FROM 表名 WHERE 表达式1 AND 表达式2;</code> 。<br><strong>举个例子</strong><br>假设我们现在有一张表<code>Mall_products</code>，内容如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/3-1.png"></p><p>我们想要查询表中哪些商品不仅商品名中带有<code>toy</code>字符，单价又同时大于<code>5</code>，并列出他们的商品信息。</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Mall_products<br><span class="hljs-keyword">WHERE</span> prod_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%toy%&#x27;</span> <span class="hljs-keyword">AND</span> prod_price &gt; <span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/3-2.png"></p><p>查询过程如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/3-3.gif"></p><p><strong>分析：</strong><br>在这个例子中，<code>WHERE</code>子句中的条件分为了两部分，<code>AND</code>关键字指示<code>MySQL</code>返回所有同时满足两个条件的内容。单独满足带<code>toy</code>字符后者单独满足价格大于<code>5</code>都得不到我们想要查询的结果。</p><p><strong>小提示</strong>： 可以同时添加多个过滤条件，增加条件的同时只需增加一个 <code>AND</code> 关键字。</p><h4 id="带OR关键字的多条件查询"><a href="#带OR关键字的多条件查询" class="headerlink" title="带OR关键字的多条件查询"></a>带<code>OR</code>关键字的多条件查询</h4><p>与<code>AND</code>相反，在WHERE声明中使用<code>OR</code>关键字表示只需满足两个条件中的其中一个条件即可返回结果。</p><p>语法规则为： <code>SELECT 字段名 FROM 表名 WHERE 表达式1 OR 表达式2;</code> 。<br><strong>举个例子</strong><br>假设我们现在有一张表<code>Mall_products</code>，内容如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/3-4.png"></p><p>我们想要查询表中商品<code>ID</code>为<code>BNBG01</code>或<code>BR01</code>的名称和单价。</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span>  ID, prod_name, prod_price<br><span class="hljs-keyword">FROM</span> Mall_products<br><span class="hljs-keyword">WHERE</span> ID = <span class="hljs-string">&#x27;BNBG01&#x27;</span> <span class="hljs-keyword">OR</span> ID = <span class="hljs-string">&#x27;BR01&#x27;</span>;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/3-5.png"></p><p>查询过程如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/3-6.gif"></p><p><strong>分析：</strong><br>在这个例子里，关键字<code>OR</code>告诉<code>MySQL</code>只需要满足其中一个条件就可以返回结果，恩，很幸运的是它两个条件都能满足，所以返回了所有条件的结果。这里我们如果使用关键字<code>AND</code>，将不会得到任何结果。</p><p><strong>小提示</strong>： <code>OR</code> 可以和 <code>AND</code> 一起使用。但是 <code>AND</code> 的优先级要高于 <code>OR</code> 的优先级！<br>在这里我们不得不提到关键字<code>IN</code>，它能实现与<code>OR</code>相同的功能。</p><p><strong>比如以下代码的功能和该例中的代码功能是一样的：</strong></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">SELECT</span>  ID, prod_name, prod_price<br><span class="hljs-keyword">FROM</span> Mall_products<br><span class="hljs-keyword">WHERE</span> ID I<span class="hljs-meta">N</span>(<span class="hljs-string">&#x27;BNBG01&#x27;</span>, <span class="hljs-string">&#x27;BR01&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>小提示</strong>： 虽然两种写法功能一样，但是我们更推荐使用 <code>IN</code> 关键字。因为它不仅逻辑清晰，执行的速度也会快于 <code>OR</code> 关键字。更重要的是，使用 <code>IN</code> 关键字，我们以后可以执行更加复杂的嵌套语句。<br>好了，下面轮到你们来上手试试了！</p><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码：</p><p>我们为你新建了一个数据表<code>tb_emp</code>，内容如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/3-7.png"></p><p>结构如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/3-8.png"></p><ul><li><p>使用关键字<code>AND</code>返回数据表中字段<code>DeptId</code>为<code>301</code>并且薪水大于<code>3000</code>的所有字段的内容，其中<code>DeptId</code>的倒数第二个字母为<code>i</code>的大写；</p></li><li><p>使用关键字<code>IN</code>返回数据表中字段<code>DeptId</code>为<code>301</code>和<code>303</code>的所有字段的内容。</p></li></ul><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%BA%8C%EF%BC%89/3-9.png"></p><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>######### Begin #########<br>select * <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> DeptId=<span class="hljs-number">301</span> and Salary&gt;<span class="hljs-number">3000</span>;<br><br>######### End #########<br><br>######### Begin #########<br>select * <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> DeptId <span class="hljs-keyword">in</span> (<span class="hljs-number">301</span>,<span class="hljs-number">303</span>);<br><br>######### End #########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单表查询（一）</title>
    <link href="/2022/10/20/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/10/20/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>数据查询是数据库操作中使用做多，最重要的内容。为什么这么说呢？因为我们不仅仅要对数据进行存储，我们还要时不时的把不同的信息“翻出来”为我们所用。<code>MySQL</code>为我们提供了功能强大的语句来实现这些操作。</p><p>文章主要介绍如何使用<code>SELECT</code>语句查询数据表中的如何使用<code>SELECT</code>语句查询数据表中的一列或多列数据、使用<code>SELECT</code>语句和关键字进行范围查询。<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/%E6%8F%92%E5%9B%BE.png"></p><h2 id="基本查询语句"><a href="#基本查询语句" class="headerlink" title="基本查询语句"></a>基本查询语句</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><ul><li>用<code>SELECT</code>语句检索数据表中指定字段的数据；</li><li>用<code>SELECT</code>语句检索数据表中所有字段的数据。</li></ul><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：<br>1.如何获取数据表中指定字段的数据；<br>2.如何获取数据表中的所有数据。</p><h4 id="查询数据表中指定字段的内容"><a href="#查询数据表中指定字段的内容" class="headerlink" title="查询数据表中指定字段的内容"></a>查询数据表中指定字段的内容</h4><p><code>MySQL</code>从数据表中查询数据的基本语句为<code>SELECT</code>语句。</p><p><code>SELECT</code>语句的可选参数比较多，让我们先从最简单的开始，带大家一步一步的深入<code>SELECT</code>语句的使用。</p><p>SELECT 基本语法规则为：<code> SELECT 字段名 FROM 表名;</code> 。<br><strong>举个例子</strong><br>假设我们现在有一张表<code>Mall_products</code>，内容如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/1-1.png"></p><p>我们需要从数据表中查询所有商品的名称，你们想想该怎么写？</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> Mall_products;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/1-2.png"></p><p>查询过程如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/1-3.gif"></p><p><strong>分析：</strong><br>在该例子中，我们使用了<code>SELECT</code>语句从<code>Mall_products</code>表中获取名称为<code>prod_name</code>字段下的所有产品名称，字段名称需要紧跟在<code>SELECT</code>关键字之后。</p><p>然而事实上，我们查询数据的时候，往往需要同时查询<code>多个字段</code>下的内容。这时，我们只需要在<code>字段之间</code>加入逗号<code>,</code>即可。</p><p>语法规则为： <code>SELECT 字段名1, 字段名2 FROM 表名;</code> 。<br><strong>举个例子</strong><br>假设我们现在有一张表<code>Mall_products</code>，内容与上例相同。我们需要从数据表中查询所有商品的名称和价格，你们想想该怎么写？</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> prod_name, prod_price<br><span class="hljs-keyword">FROM</span> Mall_products;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/1-4.png"></p><p><strong>小提示</strong>： <code>MySQL</code> 中的 <code>SQL</code> 语句对关键字的大小写不敏感， <code>SELECT</code> 和 <code>select</code> 是一样的。 但是许多开发者更喜欢将关键字大写，表名和字段名使用小写，养成这种习惯，以后写出来的脚本就更容易阅读和维护了。</p><h4 id="查询数据表中的所有内容"><a href="#查询数据表中的所有内容" class="headerlink" title="查询数据表中的所有内容"></a>查询数据表中的所有内容</h4><p>如果我们不记得字段名字了，我们还可以查看整张表的内容。这时候，只需要我们用星号<code>*</code>来代替字段的名字，就会得到一整张表的内容。</p><p>语法规则为： <code>SELECT * FROM 表名;</code><br><strong>举个例子</strong><br>假设我们现在有一张表<code>Mall_products</code>。一开始我们并不知道表里都有什么，所以想要查看整张数据表的内容，你们想想该怎么写？</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Mall_products;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/1-5.png"></p><p><strong>小提示</strong>： 虽然使用星号 <code>*</code> 看起来是一件很方便的事情，但是建议大家在不想获取整张表的情况下，还是使用字段名来进行查询。因为很显然，它会降低查询的效率。<br>好了，下面轮到你们来上手试试了！</p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码：</p><p>我们为你新建了一个数据表<code>tb_emp</code>，结构如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/1-6.png"></p><ul><li>请你查询字段<code>Name</code>和<code>Salary</code>的内容；</li><li>请你查询整张表的内容。</li></ul><p>测试说明<br>我会对你编写的代码进行测试，若与预期输出一致则算通关。</p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## retrieving the Name and Salary ##########<br>select Name ,Salary <span class="hljs-keyword">from</span> tb_emp;<br><br>########## retrieving all the table ##########<br>select * <span class="hljs-keyword">from</span> tb_emp;<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="带-IN-关键字的查询"><a href="#带-IN-关键字的查询" class="headerlink" title="带 IN 关键字的查询"></a>带 IN 关键字的查询</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用<code>IN</code>关键字检索数据表中指定的数据内容。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何使用关键字<code>IN</code>提取数据表中的指定数据内容。</p><h4 id="带IN关键字的查询"><a href="#带IN关键字的查询" class="headerlink" title="带IN关键字的查询"></a>带<code>IN</code>关键字的查询</h4><p><code>IN</code>关键字被用在WHERE语句的后边，用来过滤你所需要查询的内容。更形象的说，<code>IN</code>关键字的使用情形就像点名，点到谁谁就要站出来。<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/2-1.png"></p><p>语法规则为： <code>SELECT 字段名 FROM 表名 WHERE 字段名 IN (n1,n2,n3,...);</code> 。<br>其中，括号内的数字必须为INT格式的数字。被“点到名”的这些括号里数字对应的内容，都要乖乖的站到前边来展示给大家看。</p><p><strong>举个例子</strong><br>假设我们现在有一张表<code>Mall_products</code>，内容如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/2-2.png"></p><p>我们会使用<code>IN</code>关键字检索出所有国家代码为<code>1</code>、<code>86</code>和<code>39</code>的商品信息。</p><p>查询代码如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> *<br><span class="hljs-attribute">FROM</span> Mall_products<br><span class="hljs-attribute">WHERE</span> prod_country IN (<span class="hljs-number">1</span>,<span class="hljs-number">87</span>,<span class="hljs-number">39</span>);<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/2-3.png"></p><p>查询过程如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/2-4.gif"></p><p>Oopes! 貌似我们刚才输入了三个数字，为什么只查询到了国家代码为<code>1</code>和<code>39</code>的数据内容，<code>87</code>去哪里了？</p><p>因为国家代号<code>87</code>的内容就压根没存在过啊，仔细看看表<code>Mall_products</code>就知道了。</p><h4 id="带NOT-IN关键字的查询"><a href="#带NOT-IN关键字的查询" class="headerlink" title="带NOT IN关键字的查询"></a>带<code>NOT IN</code>关键字的查询</h4><p>聪明的小伙伴一看<code>NOT</code>就知道了，我们是要取反了。刚才我们是在查询括号中出现的内容，加了<code>NOT</code>取反后，就意味着，我们要查询的是除了括号中出现内容外的所有内容。</p><p>语法规则为： <code>SELECT 字段名 FROM 表名 WHERE 字段名 NOT IN (n1,n2,n3,...); </code>。<br><strong>举个例子</strong><br>我们还使用刚才的表<code>Mall_products</code>。现在我们想要查询除了国家代码为<code>86</code>的所有国家的产品内容。</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Mall_products<br><span class="hljs-keyword">WHERE</span> prod_country <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">86</span>);<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/2-5.png"></p><p>好了，下面轮到你们来上手试试了！</p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码:</p><p>我们为你新建了一个数据表<code>tb_emp</code>，结构如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/2-6.png"></p><ul><li>请你查询当<code>Id</code>不等于<code>1</code>时，字段<code>Name</code>和<code>Salary</code>的内容;</li></ul><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/2-7.png"></p><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## retrieving the Name and Salary <span class="hljs-keyword">with</span> IN statement ##########<br>select Name,Salary <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> Id not <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>);<br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="带-BETWEEN-AND-的范围查询"><a href="#带-BETWEEN-AND-的范围查询" class="headerlink" title="带 BETWEEN AND 的范围查询"></a>带 BETWEEN AND 的范围查询</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：使用BETWEEN AND关键字检索数据表中指定的数据内容。</p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何使用关键字<code>BETWEEN AND</code>提取数据表中的指定数据内容。</p><h4 id="带BETWEEN-AND关键字的查询"><a href="#带BETWEEN-AND关键字的查询" class="headerlink" title="带BETWEEN AND关键字的查询"></a>带<code>BETWEEN AND</code>关键字的查询</h4><p>我们已经学会了如何用<code>IN</code>关键字精确查询数据表中的内容，但是在很多时候，我们仅仅是想知道在某一范围内有多少符合条件的数据，这就不得不使用到关键字<code>BETWEEN AND</code>了。</p><p><code>BETWEEN AND</code>需要两个参数支持，一个是范围的开始值，另一个就是结束值了。如果字段值满足指定的范围查询条件，就返回这些满足条件的数据内容。</p><p>语法规则为： <code>SELECT 字段名 FROM 表名 WHERE 字段名 BETWEEN n1 AND n2;</code> 。<br><strong>举个例子</strong><br>假设我们现在有一张表<code>Mall_products</code>，内容如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/3-1.png"></p><p>我们将使用<code>BETWEEN AND</code>关键字检索出所有国家代码为<code>1~50</code>的商品的信息。</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Mall_products<br><span class="hljs-keyword">WHERE</span> prod_country <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">50</span>;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/3-2.png"></p><p>查询过程如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/3-3.gif"></p><p>可以看到，返回结果包含了国家代码从<code>1~50之</code>间的字段值。尤其值得注意的是，端点值<code>1</code>也包含在返回结果中。</p><h4 id="带NOT-BETWEEN-AND关键字的查询"><a href="#带NOT-BETWEEN-AND关键字的查询" class="headerlink" title="带NOT BETWEEN AND关键字的查询"></a>带<code>NOT BETWEEN AND</code>关键字的查询</h4><p>像上一关介绍的关键字<code>IN</code>一样，我们还可以对关键字<code>BETWEEN AND</code>进行取反，表示查询指定范围之外的值。</p><p>语法规则为： <code>SELECT 字段名 FROM 表名 WHERE 字段名 NOT BETWEEN n1 AND n2;</code> 。<br><strong>举个例子</strong><br>我们依然使用表Mall_products。现在我们想要查询除了国家代码为1~50的所有国家的产品内容。</p><p>查询代码如下：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> Mall_products<br><span class="hljs-keyword">WHERE</span> prod_country <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">50</span>;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/3-4.png"></p><p>由结果可以看出，返回的结果只有大于国家代码<code>50</code>的内容。</p><p>怎么样？简单吧！好了，下面轮到你们来上手试试了！</p><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码：</p><p>我们为你新建了一个数据表<code>tb_emp</code>，结构如下：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/3-5.png"></p><ul><li>请你查询当字段<code>Salary</code>范围在<code>3000~5000</code>时，字段<code>Name</code>和<code>Salary</code>的内容。</li></ul><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%EF%BC%88%E4%B8%80%EF%BC%89/3-6.png"></p><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## retrieving the Name and Salary <span class="hljs-keyword">with</span> BETWEEN AND statement ##########<br>select Name,Salary <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> Salary between <span class="hljs-number">3000</span> and <span class="hljs-number">5000</span>;<br><br><br>########## End ##########<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库和表的基本操作（二）</title>
    <link href="/2022/10/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/10/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>MySQL</code>为我们提供了丰富的数据库管理语句，包括向数据表中插入(<code>INSERT</code>)数据内容的语句，修改(<code>UPDATE</code>)数据内容的语句和删除(<code>DELETE</code>)数据内容的语句。</p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：为表同时插入多条我们规定的记录。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何为表一次性插入多条记录。</p><h4 id="为表的所有字段插入数据"><a href="#为表的所有字段插入数据" class="headerlink" title="为表的所有字段插入数据"></a>为表的所有字段插入数据</h4><p>向表中插入数据最简单的方法就是使用<code>INSERT</code>语句。<code>INSERT</code>语句需要你声明要插入内容的表(<code>table</code>)名和内容(<code>values</code>)。</p><p>语法规则：<code>INSERT INTO 表名 (字段名) VALUES (内容);</code><br><strong>举个例子</strong>：<br>假设我们现在有一张空表<code>MyUser</code>如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/1-1.png"></p><p>接下来，我们要往空表中插入一条内容，插入(<code>INSERT</code>)语句为：<br>i<code>nsert into MyUser(name,age) values(&#39;zhnagsan&#39;,18);</code><br>结果为：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/1-2.png"></p><p>插入过程如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/1-3.png"></p><p>我们检索到了一条数据的结果，一条完整的内容已经被填入了空表中。</p><p><strong>分析：</strong><br>在插入数据时，我们指定了所有的字段名，这样的好处是：即使我们打乱了原本字段的排列顺序，只要插入的数据与之匹配，插入都不会出错。其实，还有一种偷懒的办法，就是我们可以不填字段名，但是这样的话，就必须老老实实的按字段顺序来填入相应的数据。</p><h4 id="为表的指定字段插入数据"><a href="#为表的指定字段插入数据" class="headerlink" title="为表的指定字段插入数据"></a>为表的指定字段插入数据</h4><p>有的时候，我们并不想往某个字段内插入完完整整的值，或者说，有的时候我们并没有完整的数据可以整整齐齐插入某个字段。这时候就需要我们只为指定好的字段插入数据了，其他的我们都不用管。换句话说，就是：<br>为表的指定字段插入数据，就是在INSERT中只向部分插入值，而其他字段的值为表定义时的默认值。</p><p><strong>举个例子</strong></p><p>假设我们现在有一张空表 <code>MyUser</code> 如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/1-4.png"></p><p>我们忽略字段 <code>age</code>，为表 <code>MyUser</code> 插入内容:<br><code>insert into MyUser(name) values(&#39;lisi&#39;),(&#39;fawaikuangtu&#39;),(&#39;zhangsan&#39;);</code><br>结果为：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/1-5.png"></p><p>插入过程如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/1-6.png"></p><p>可以看到，由于我们建表时给字段 <code>age</code> 设置的默认值为 <code>Null</code>，所以插入数据时忽略该字段，就会默认给它赋值为空。</p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码：</p><ul><li><p>我们为你新建了一个空数据表<code>tb_emp</code>，请你为它同时添加3条数据内容；</p></li><li><p>空数据表结构如下，注意<code>字段3</code> 为<code>DeptId</code>，倒数第二个字母为大写的<code>i</code>：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/1-7.png"></p></li><li><p>需要你同时添加的数据内容为： （注意，是同时插入多条记录）<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/1-8.png"></p></li></ul><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/1-9.png"></p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## bundle insert the value ##########<br>insert into tb_emp value (<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Nancy&#x27;</span>,<span class="hljs-number">301</span>,<span class="hljs-number">2300.00</span>),(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;Tod&#x27;</span>,<span class="hljs-number">303</span>,<span class="hljs-number">5600.00</span>),(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;Carly&#x27;</span>,<span class="hljs-number">301</span>,<span class="hljs-number">3200.00</span>);<br><br><br>########## End ##########<br>SELECT * FROM tb_emp;<br></code></pre></td></tr></table></figure><h2 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>有道是：人生在世，孰能无过。过而能改，善莫大焉!</p><p>本关就为各位着重介绍数据的更新（<code>UPDATE</code>）。</p><p>本关任务：将数据表中原有的数据修改为本关指定的数据。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何使用<code>update</code>来修改已有的数据。</p><h4 id="更新表中指定的内容"><a href="#更新表中指定的内容" class="headerlink" title="更新表中指定的内容"></a>更新表中指定的内容</h4><p>通过上一关的学习，我们已经掌握了<code>INSERT</code>操作！同样，<code>UPDATE</code>操作也很简单，只要记住<code>UPDATE</code>语句三要素就能轻松掌握，它们分别是:</p><ul><li>需要更新的<code>表（table）名</code>；</li><li>需要更新的<code>字段（column）</code>名和它的<code>新内容（value）</code>；</li><li>决定更新哪一条<code>内容（value）</code>的过滤条件。</li></ul><p>语法规则为： <code>UPDATE 表名 SET 字段名1 = 内容1, 字段名2 = 内容2, 字段名3 = 内容3 WHERE 过滤条件;</code> 。<br><strong>举个例子</strong><br>我们现在有一张表<code>Mall_products2</code>，内容如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/2-1.png"></p><p>现在我们想把<code>Span</code>换成<code>Pakistan</code>，当然，地区代码也要换为<code>92</code> 。</p><p>更新(<code>UPDATE</code>)语句为：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">UPDATE Mall_products2<br><span class="hljs-keyword">SET</span> country_name <span class="hljs-comment">=</span> <span class="hljs-comment">&quot;Pakistan&quot;</span><span class="hljs-comment">, country_id = 92</span><br>WHERE <span class="hljs-comment">id = 2</span>;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/2-2.png"></p><p>插入过程如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/2-3.gif"></p><p>看上去不难吧，快来练练手吧！</p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码：</p><ul><li>我们为你新建了一个数据表<code>tb_emp</code>，并添加了3条数据内容；</li><li>3条数据内容如下表所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/2-4.png"></li></ul><p>请你将<code>Carly</code>改为<code>Tracy</code>，相应的，<code>301</code>改为<code>302</code>，<code>3200.00</code>改为<code>4300.00</code>。<br><strong>注意</strong>：<code>字段3</code>为<code>DeptId</code>，倒数第二个字母为大写的<code>i</code>。</p><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/2-5.png"></p><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight plaintext"><figcaption><span>Company;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs USE"><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## update the value ##########<br>update tb_emp set Name=&#x27;Tracy&#x27;,Salary=4300.00 ,DeptId=302 where id = 3;<br><br><br>########## End ##########<br>SELECT * FROM tb_emp;<br></code></pre></td></tr></table></figure><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：删除表中的指定行。</p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何删除指定行的数据。</p><h4 id="删除表中的指定行"><a href="#删除表中的指定行" class="headerlink" title="删除表中的指定行"></a>删除表中的指定行</h4><p>从数据表中删除数据内容需要使用<code>DELETE</code>语句，它需要WHERE语句来配合它来指定我们究竟应该删除哪些数据内容。</p><p>语法规则为：<code> DELETE FROM 表名 WHERE 条件语句;</code> 。<br>我们可以指定删除某一行的数据内容，当然，我们还可以指定删除很多行的数据内容，区别就在于条件语句。那么在接下来的例子里，我们来看看很多行内容是怎么删除的。</p><p><strong>举个例子</strong><br>我们现在有一张表<code>Mall_products2</code>，内容如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/3-1.png"></p><p>现在我们想把包含<code>Span</code>和<code>Italy</code>的这两行数据内容同时删除，删除（<code>DELETE</code>）语句为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">DELETE <span class="hljs-keyword">FROM</span> Mall_products2 <br>WHERE <span class="hljs-attribute">id</span>=2 <span class="hljs-keyword">OR</span> <span class="hljs-attribute">id</span>=3;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/3-2.png"></p><p>删除过程如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/3-3.gif"></p><p>聪明如你，删除多行内容的例子都看懂了，我想删除某一行的数据内容对你们来说简直易如反掌！</p><h4 id="删除表中的所有行"><a href="#删除表中的所有行" class="headerlink" title="删除表中的所有行"></a>删除表中的所有行</h4><p>删除表中的所有行就更简单了。如果需要删除表中所有的行，只需要省略<code>WHERE</code>语句即可。</p><p>语法规则为： <code>DELETE FROM 表名;</code> 。<br><strong>举个例子</strong><br>我们现在有一张表<code>Mall_products2</code>，内容如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/3-4.png"></p><p>现在我们想把表<code>Mall_products2</code>的所有数据内容同时删除，删除（<code>DELETE</code>）语句为：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Mall_products2;<br></code></pre></td></tr></table></figure><p>结果为：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/3-5.png"></p><p>删除过程如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/3-6.gif"></p><p><strong>小提示</strong>： <code>TRUNCATE TABLE</code> 语句也可以用来删除表中的所有记录。但是与 <code>DELETE</code> 不同的是，<code>TRUNCATE TABLE</code> 语句直接删除的是表，而不是表中的内容，删除结束后还会重新创建一个表。所以它的执行速度会比 <code>DELETE</code> 语句快。 语法为：<code>TRUNCATE TABLE 表名;</code><br>好了，数据的删除就介绍到这里了，是不是跃跃欲试呢？</p><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器<code>Begin-End</code>处补充代码：</p><ul><li>我们为你新建了一个数据表<code>tb_emp</code>，并添加了3条数据内容；</li><li>3条数据内容如下表所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/3-7.png"></li></ul><p>请你将<code>Salary</code>大于<code>3000</code>的数据行删除。</p><h3 id="测试说明-2"><a href="#测试说明-2" class="headerlink" title="测试说明"></a>测试说明</h3><p>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%BA%8C%EF%BC%89/3-8.png"></p><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## delete the value ##########<br>delete <span class="hljs-keyword">from</span> tb_emp <span class="hljs-keyword">where</span> Salary&gt;<span class="hljs-number">3000</span>;<br><br><br>########## End ##########<br><br>SELECT * FROM tb_emp;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据库和表的基本操作（一）</title>
    <link href="/2022/10/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/10/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>主要内容：查看表结构与修改表名、修改字段名与字段数据类型、添加与删除字段、修改字段的排列位置、删除表的外键约束<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/%E6%8F%92%E5%9B%BE.png"></p><h2 id="查看表结构与修改表名"><a href="#查看表结构与修改表名" class="headerlink" title="查看表结构与修改表名"></a>查看表结构与修改表名</h2><h3 id="任务描述"><a href="#任务描述" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：修改表名，并能顺利查询到修改后表的结构。</p><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：<br>1.如何查看表的结构；<br>2.如何修改表的名称。</p><h4 id="查看数据表基本结构"><a href="#查看数据表基本结构" class="headerlink" title="查看数据表基本结构"></a>查看数据表基本结构</h4><p>有强迫症或健忘症的小伙伴们在建好数据库和表以后，通常会怀疑自己刚才是不是敲错了，怎么办？如果不是使用图形界面是不是就没法查看啦？</p><p>不存在的，这就告诉你查看口令：<code>DESCRIBE</code><br>语法规则为:<code>DESCRIBE 表名；</code></p><p>大小写不敏感哟！<br><code>DESCRIBE</code>可以查看表的字段信息，包括：字段名、字段数据类型、是否为主键、是否有默认值等。</p><p>比如本岛主新建了一个名叫<code>Products</code>的表，结构如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/Products.png"></p><p>现在来看看“现场”，用<code>DESCRIBE</code>查表的结构是这样的。<br>其中，该结构中各个字段的含义分别为：</p><p><code>NULL</code>：表示该列是否能存储 NULL 值；</p><p><code>Key</code>：表示该列是否已编制索引；</p><p><code>PRI</code>：表示该列是此表主键的一部分；</p><p><code>UNI</code>：表示该列是 UNIQUE 索引的一部分；</p><p><code>MUL</code>：表示在列中某个给定值允许出现多次；</p><p><code>Default</code>：表示该列是否有默认值，如果有的话值是多少；</p><p><code>Extra</code>：表示可以获取的与给定列有关的附加信息。<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/%E5%9B%BE1.gif"></p><h4 id="查看数据表详细结构"><a href="#查看数据表详细结构" class="headerlink" title="查看数据表详细结构"></a>查看数据表详细结构</h4><p>什么？你发现表建错了，你想知道错在哪里了？<br>那就用<code>SHOW CREATE TABLE</code>语句吧。</p><p>语法规则为：<code>SHOW CREATE TABLE 表名;</code> 。<br>还是刚才那个例子，让我们看看<code>SHOW CREATE TABLE</code>有什么能耐。<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/%E5%9B%BE2.gif"><br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/%E5%9B%BE3.png"><br>可以看到，使用 <code>SHOW CREATE TABLE</code> 语句，不仅仅可以返回给我们建表时所写的详细语句，而且还可以查看存储引擎和字符编码。<br>再告诉大家一个小诀窍，是不是觉得返回的结果排版有点乱。我们加上<code>\G</code>后效果就会有所改善哟，来看看！<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/%E5%9B%BE4.gif"></p><h4 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h4><p>随着表越来越多，有时候你会后悔之前的数据表的名字根本没有认真斟酌过，想要重新命名一下，可以做到吗？</p><p>答案是：可以！<code>MySQL</code>是通过<code>ALTER TABLE</code>语句来修改表名的。</p><p>语法规则为：<code>ALTER TABLE 旧表名 RENAME 新表名;</code> 。<br>举个例子，我们先用<code>SHOW TABLES</code>看看我们的数据库中有什么表吧。<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/%E5%9B%BE5.png"><br>可以看到，我们目前已经有了两张表，分别叫<code>Products</code>和<code>tb_emp</code>。</p><p>接下来，我们使用<code>ALTER TABLE</code>为<code>Products</code>改名。<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/%E5%9B%BE6.gif"></p><p>改名成功！<code>Products</code>成功变成了<code>Mall_products</code>。<br>接下来你们可以自行体验一下了！</p><h3 id="编程要求"><a href="#编程要求" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器补充代码：</p><ul><li><p>把数据表<code>tb_emp</code>改名为<code>jd_emp</code>；</p></li><li><p>查看该数据库下数据表的列表；</p></li><li><p>查看数据表<code>jd_emp</code>的基本结构。</p></li></ul><p><strong>测试说明</strong><br>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/%E5%9B%BE7.png"></p><h3 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## modify the table name ##########<br>alter table tb_emp rename jd_emp;<br><br><br>########## show tables <span class="hljs-keyword">in</span> this database ##########<br>show tables;<br><br><br>########## describe the table ##########<br>describe jd_emp;<br><br><br>########## End ##########<br></code></pre></td></tr></table></figure><h2 id="修改字段名与字段数据类型"><a href="#修改字段名与字段数据类型" class="headerlink" title="修改字段名与字段数据类型"></a>修改字段名与字段数据类型</h2><h3 id="任务描述-1"><a href="#任务描述-1" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：修改表中的字段名，并修改字段的数据类型。</p><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：1.如何修改字段名；2.如何修改字段的数据类型。</p><h4 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h4><p>有时，在我们建好一张表后会突然发现，哎呀！字段名貌似写错了！怎么办？要删了表再重新建一个新表吗？还是要删了这个字段再新建一个新的字段？<br>都不用，<code>MySQL</code> 中修改字段名称也有专门的语句，接近于自然语言，很好记忆。</p><p>语法规则为： <code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 新数据类型;</code> 。<br>举个例子：<br>现在我们要把表<code>Mall_products</code>中的字段<code>prod_id</code>改名为<code>ID</code>。表结构如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/2-1.png"></p><p>输入命令：<code>ALTER TABLE Mall_products CHANGE prod_id ID varchar(20);</code>。执行过程如下所示。简单吧！<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/2-2.gif"></p><p><strong>小提示</strong>： 如果不需要修改字段的数据类型，可以把新字段的数据类型设置为和原来一样，但是！千万不要空着它！</p><h4 id="修改字段数据类型"><a href="#修改字段数据类型" class="headerlink" title="修改字段数据类型"></a>修改字段数据类型</h4><p>随着存储的数据越来越多，数据库新人可能会发现，哎呀，当初预留的数据类型已经不能满足要求了，或者当初预留的字符太少了，怎么办？怎么修改？规则来了。</p><p>语法规则为： <code>ALTER TABLE 表名 MODIFY 字段名 数据类型;</code> 。<br>举个例子：<br>现在我们要把表<code>Mall_products</code>中的字段<code>ID</code>的数据类型改为<code>varchar(30)</code>。表结构如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/2-3.png"></p><p>输入命令：<code>ALTER TABLE Mall_products MODIFY ID varchar(30);</code>。执行过程如下所示。<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/2-4.gif"></p><p><code>ID</code>的数据类型<code>varchar(20)</code>成功变成了<code>varchar(30)</code>。<br>接下来你们可以自行体验一下了！</p><h3 id="编程要求-1"><a href="#编程要求-1" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器补充代码:</p><ul><li>把数据表<code>tb_emp</code>的字段Id改名为<code>prod_id</code>，数据类型不变；</li><li>把数据表<code>tb_emp</code>字段<code>Name</code>的数据类型改为<code>varchar(30)</code>。</li></ul><p>数据表结构如下:<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/2-5.png"></p><h3 id="测试说明"><a href="#测试说明" class="headerlink" title="测试说明"></a>测试说明</h3><p>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/2-6.png"></p><h3 id="我的代码-1"><a href="#我的代码-1" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## change the column name ##########<br>alter table tb_emp change Id prod_id int(<span class="hljs-number">11</span>);<br><br><br>########## change the data type <span class="hljs-keyword">of</span> column ##########<br>alter table tb_emp modify Name varchar(<span class="hljs-number">30</span>);<br><br><br>########## End ##########<br><br>DESCRIBE tb_emp;<br></code></pre></td></tr></table></figure><h2 id="添加与删除字段"><a href="#添加与删除字段" class="headerlink" title="添加与删除字段"></a>添加与删除字段</h2><h3 id="任务描述-2"><a href="#任务描述-2" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：分别在表的<strong>最后一列</strong>、<strong>第一列</strong>和<strong>指定列后</strong>添加新的字段，并删除表中的指定字段。</p><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：<br>1.如何在指定位置添加新的字段，<br>2.如何删除指定的字段。</p><h4 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h4><p>因为甲方的业务需求是不停变化的，所以在数据库操作中，添加字段可是常有的事。一个完整的字段包括：<code>字段名</code>、<code>数据类型</code>和<code>完整性约束</code>。</p><p>语法规则为： <code>ALTER TABLE 表名 ADD 新字段名 数据类型 [约束条件] [FIRST|AFTER] 已存在字段名;</code> 。<br>以下是在 <code>MySQL</code> 中常用的约束。</p><p><code>NOT NULL</code> 约束：确保某列不能有 NULL 值。</p><p><code>DEFAULT</code> 约束：当某列没有指定值时，为该列提供默认值。</p><p><code>UNIQUE</code> 约束：确保某列中的所有值是不同的。</p><p><code>PRIMARY Key</code> 约束：唯一标识数据库表中的各行&#x2F;记录。</p><p><code>CHECK</code> 约束：<code>CHECK</code> 约束确保某列中的所有值满足一定条件。</p><p><strong>在表的最后一列添加字段</strong><br>只要不做<code>[FIRST|AFTER]</code>的位置说明，在添加字段时<code>MySQL</code>会默认把新字段加入到表的最后一列。</p><p>举个例子：<br>现在我们要把字段<code>prod_country</code>添加到表<code>Mall_products</code>的最后一列。表结构如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/3-1.png"></p><p>输入命令：<br><code>ALTER TABLE Mall_products ADD prod_country varchar(30)</code>;<br>执行结果如下所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/3-2.png"></p><p><strong>在表的第一列添加字段</strong><br>如果我们想在第一列添加新的字段，只需做FIRST的位置说明。</p><p>举个例子：<br>现在我们要把字段<code>prod_country</code>添加到表<code>Mall_products</code>的第一列。</p><p>输入命令：<br><code>ALTER TABLE Mall_products ADD prod_country varchar(30) FIRST;</code><br>执行结果如下所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/3-3.png"></p><p><strong>在表的指定列后添加字段</strong><br>如果我们想在某一列后面添加新的字段，只需做<code>AFTER</code>的位置说明，然后注明你想让它添加在哪个字段的后面即可。</p><p>举个例子：<br>现在我们要把字段<code>prod_country</code>添加到表<code>Mall_products</code>的 <code>prod_name</code>字段的后面。</p><p>输入命令：<br><code>ALTER TABLE Mall_products ADD prod_country varchar(30) AFTER prod_name;</code><br>执行结果如下所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/3-4.png"></p><p>总之，想要添加新的字段，记住绿色框里的语法规则就能记住三种位置的添加方式。</p><h4 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h4><p>有添加的需求就会有删除的需求。删除一个字段就是将数据表中的某个字段从表中移除。</p><p>语法规则为： <code>ALTER TABLE 表名 DROP 字段名;</code> 。<br>举个例子：<br>现在我们要把字段<code>prod_price</code>从表<code>Mall_products</code>中删除。表结构如上图结果所示。</p><p>输入命令：<br><code>ALTER TABLE Mall_products DROP prod_price;</code><br>执行结果如下所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/3-5.png"></p><p>字段<code>prod_price</code>成功删除！<br>接下来你们可以自行体验一下了！</p><h3 id="编程要求-2"><a href="#编程要求-2" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器补充代码:</p><ul><li>在数据表<code>tb_emp</code>的<code>Name</code>字段后添加字段<code>Country</code>，数据格式为<code>varchar(20)</code>；</li><li>删除数据表<code>tb_emp</code>中的字段<code>Salary</code>。</li></ul><p>数据表结构如下:<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/3-6.png"></p><h3 id="测试说明-1"><a href="#测试说明-1" class="headerlink" title="测试说明"></a>测试说明</h3><p>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/3-7.png"></p><h3 id="我的代码-2"><a href="#我的代码-2" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## add the column ##########<br>alter table tb_emp add Country varchar(<span class="hljs-number">20</span>) after Name;<br><br> <br>########## delete the column ##########<br>alter table tb_emp drop Salary;<br><br><br>########## End ##########<br><br>DESCRIBE tb_emp;<br></code></pre></td></tr></table></figure><h2 id="修改字段的排列位置"><a href="#修改字段的排列位置" class="headerlink" title="修改字段的排列位置"></a>修改字段的排列位置</h2><h3 id="任务描述-3"><a href="#任务描述-3" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：修改表中某字段的顺序，分别将其排至表中的第一列与指定列之后。</p><h3 id="相关知识-3"><a href="#相关知识-3" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何将某字段排至表中的指定位置。</p><h4 id="修改字段的排列位置-1"><a href="#修改字段的排列位置-1" class="headerlink" title="修改字段的排列位置"></a>修改字段的排列位置</h4><p>在一个数据表被创建的时候，其字段的排列顺序就已被确定了。不能变了吗？怎么可能，一锤子买卖没人敢做。</p><p>我们可以通过<code>ALTER TABLE</code>来改变表中字段的相对位置。</p><p>语法规则为： <code>ALTER TABLE 表名 MODIFY 字段1 数据类型 FIRST|AFTER 字段2;</code> 。<br>其中，<code>字段1</code>指要修改位置的字段，<code>FIRST</code>与<code>AFTER </code>字段2为可选参数。</p><h4 id="修改字段为表的第一个字段"><a href="#修改字段为表的第一个字段" class="headerlink" title="修改字段为表的第一个字段"></a>修改字段为表的第一个字段</h4><p>如果我们想把字段的位置调整到第一列，只需做<code>FIRST</code>的位置说明。</p><p><strong>举个例子</strong><br>现在我们要把字段<code>prod_price</code>调整到表<code>Mall_products</code>的第一列。<code>Mall_products</code>表结构如下所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/4-1.png"></p><p>输入命令：<br><code>ALTER TABLE Mall_products MODIFY prod_price FLOAT FIRST;</code></p><p>执行过程如下所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/4-2.gif"></p><h4 id="修改字段到表的指定列之后"><a href="#修改字段到表的指定列之后" class="headerlink" title="修改字段到表的指定列之后"></a>修改字段到表的指定列之后</h4><p>还有一种位置调整的方法可以让你把想调整的字段放在除了第一列的任何位置。调整的时候需要做<code>AFTER 字段2</code>的&#96;位置说明。</p><p><strong>举个例子</strong><br>现在我们要把字段<code>prod_price</code>调整到字段<code>prod_country</code>的后面。<code>Mall_products</code>表结构如下所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/4-3.png"></p><p>输入命令：<br><code>ALTER TABLE Mall_products MODIFY prod_price FLOAT AFTER prod_country;</code></p><p>执行过程如下所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/4-4.gif"></p><p>调整成功！<br>接下来你们可以自行体验一下了！</p><h3 id="编程要求-3"><a href="#编程要求-3" class="headerlink" title="编程要求"></a>编程要求</h3><p>根据提示，在右侧编辑器补充代码:</p><p>将数据表<code>tb_emp</code>的<code>Name</code>字段移至第一列，数据格式不变；</p><p>将<code>DeptId</code>字段移至<code>Salary</code>字段的后边，数据格式不变。</p><p>数据表结构如下:<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/4-5.png"></p><h3 id="测试说明-2"><a href="#测试说明-2" class="headerlink" title="测试说明"></a>测试说明</h3><p>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/4-6.png"></p><h3 id="我的代码-3"><a href="#我的代码-3" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## modify the column to top ##########<br>alter table tb_emp modify Name varchar(<span class="hljs-number">25</span>) first;<br><br><br>########## modify the column to the rear <span class="hljs-keyword">of</span> another column ##########<br>alter table tb_emp modify DeptId int(<span class="hljs-number">11</span>) after Salary;<br><br><br>########## End ##########<br><br>DESCRIBE tb_emp;<br></code></pre></td></tr></table></figure><h2 id="删除表的外键约束"><a href="#删除表的外键约束" class="headerlink" title="删除表的外键约束"></a>删除表的外键约束</h2><h3 id="任务描述-4"><a href="#任务描述-4" class="headerlink" title="任务描述"></a>任务描述</h3><p>本关任务：删除表中的外键约束。</p><h3 id="相关知识-4"><a href="#相关知识-4" class="headerlink" title="相关知识"></a>相关知识</h3><p>为了完成本关任务，你需要掌握：如何删除表的外键约束</p><h4 id="删除表的外键约束-1"><a href="#删除表的外键约束-1" class="headerlink" title="删除表的外键约束"></a>删除表的外键约束</h4><p>我们曾在第一章中讲过外键的作用，以及如何创建一个表的外键。建立了外键我们就建立起了两张表的关联关系，那如果我想删除主表呢？为了确保数据库的正确性，我们必须先解除两个表之间的关联关系，那就是删除外键约束啦！让我们先来看看删除外键约束的语法规则。</p><p>语法规则为： <code>ALTER TABLE 表名 DROP FOREIGN KEY 外键约束名;</code> 。<br><strong>举个例子</strong>：<br>我们先建立了一个主表<code>country</code>，表结构如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/5-1.png"></p><p>然后建立一个有外键约束的子表<code>Mall_products2</code>，让它的键<code>country_id</code>作为外键关联到<code>country</code>的主键<code>id</code>。<code>SQL</code>语句如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Mall_products2<br>(<br>id <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">PRIMARY KEY</span>,<br>country_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>country_id <span class="hljs-type">INT</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">CONSTRAINT</span> prod_country <span class="hljs-keyword">FOREIGN KEY</span>(country_id) <span class="hljs-keyword">REFERENCES</span> country(id)<br>)<br></code></pre></td></tr></table></figure><p>上述语句成功执行后，在表<code>Mall_products2</code>上添加了名称为<code>prod_country</code>的外键约束，外键名称为<code>prod_country</code>，依赖于表<code>country</code>的主键<code>id</code>，从下图中可以看到，已经成功添加了表的外键：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/5-2.png"></p><p>M<code>all_products2</code>表结构如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/5-3.png"></p><p>下面开始删除外键约束，语句如下：<br><code>ALTER TABLE Mall_products2 DROP FOREIGN KEY prod_country;</code></p><p>使用<code>SHOW CREATE TABLE</code>查看表 <code>M</code>all_products2&#96; 的结构，结果如下：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/5-4.png"></p><p>我们可以看到，<code>FOREIGN KEY</code>不见了，外键约束删除成功！<br>接下来你们可以自行体验一下了！</p><h3 id="编程要求-4"><a href="#编程要求-4" class="headerlink" title="编程要求"></a>编程要求</h3><p>我们已经为你建立了主表<code>tb_dept</code>和子表<code>tb_emp</code>，在表<code>tb_emp</code>上添加了名称为<code>emp_dept</code>的外键约束，外键名称为<code>DeptId</code>，依赖于表<code>tb_dept</code>的主键<code>Id</code>，下面那是两张表的结构展示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/5-5.png"><br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/5-6.png"></p><p>请你根据提示，在右侧编辑器<code>Begin-End</code>中补充代码:</p><ul><li>删除数据表<code>tb_emp</code>的外键约束<code>emp_dept</code>。</li></ul><h3 id="测试说明-3"><a href="#测试说明-3" class="headerlink" title="测试说明"></a>测试说明</h3><p>我会对你编写的代码进行测试，最终结果会如下图所示：<br><img src="/img/MySQL/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%EF%BC%88%E4%B8%80%EF%BC%89/5-7.png"></p><h3 id="我的代码-4"><a href="#我的代码-4" class="headerlink" title="我的代码"></a>我的代码</h3><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clean">USE Company;<br><br>#请在此处添加实现代码<br>########## Begin ##########<br><br>########## delete the <span class="hljs-keyword">foreign</span> key ##########<br>alter table tb_emp drop <span class="hljs-keyword">foreign</span> key emp_dept;<br><br>########## End ##########<br>SHOW CREATE TABLE tb_emp \G;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>生成抽点名单</title>
    <link href="/2022/10/16/%E7%94%9F%E6%88%90%E6%8A%BD%E7%82%B9%E5%90%8D%E5%8D%95/"/>
    <url>/2022/10/16/%E7%94%9F%E6%88%90%E6%8A%BD%E7%82%B9%E5%90%8D%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p><strong>背景</strong><br>栋哥对大家第一次结对编程作业的原型设计感到很满意，为了尽快让同学们使用上软件，于是栋哥花一晚上时间开发了一个点名小程序。但是在上线运行过后，发现了一些问题：</p><p>大多数老师习惯在每次上课后或下课前的一小段时间内进行点名。<br>如果采用全点的方式，在这段时间里，后端服务器需要处理大量的请求，拥塞导致响应速度变慢，给点名小程序带来极差的使用体验。<br>采用随机抽点的方式，能够有效减少并发量，但是无法保证点名的质量，难以有效抓出没有到教室的同学。<br>所以栋哥急需大家设计一个算法来解决这个问题，要求能够最小化向后端发送的请求次数，最大化抓出缺勤同学的数量。</p><p><strong>具体要求</strong><br>定义5门课程，每个课程班级人数为90人，一学期共20次课。每门课程均有5-8位同学缺席了该学期80%的课，此外每次课程均还有0-3位同学由于各种原因缺席。</p><p><strong>参数定义：</strong><br>请求次数：定义在一次点名中，获取一位同学是否到达课堂的情况为一次请求。<br>有效点名：一位同学缺席该课程的一次课，算法在这次课上抽点到该同学，视为一次有效点名，一次课可包含多次有效点名。</p><p><strong>评价标准：</strong><br><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%94%9F%E6%88%90%E6%8A%BD%E7%82%B9%E5%90%8D%E5%8D%95/%E8%AF%84%E4%BB%B7%E6%A0%87%E5%87%86.png"></p><p><strong>输入</strong><br>五门课程的全部人员到勤信息</p><p><strong>输出</strong><br>E、五门课程的抽点方案</p><p><strong>要求</strong><br>最大化E，该标准将作为确定本次作业作业得分的主要依据之一<br>输入的数据，另外编写生成程序随机实现。<br>为输入输出设计标准化、通用化、可扩展的接口，能为该智能匹配程序模块后期可能的整合入系统提供便利。<br>输入输出的格式，如采用文本文件或数据库的方式输入，可自由讨论确定。<br>可为智能抽点算法额外的添加一些合理的辅助搜索信息，如绩点等，可自由讨论确定。<br>代码具有规范性。<br>实现的程序语言不做限制性要求。</p><h3 id="一、输入输出处理问题"><a href="#一、输入输出处理问题" class="headerlink" title="一、输入输出处理问题"></a>一、输入输出处理问题</h3><p>我们计划使用excel表格作为输入形式，需要自学如何实现文件读写。</p><h3 id="二、算法设计"><a href="#二、算法设计" class="headerlink" title="二、算法设计"></a>二、算法设计</h3><p>在考虑如何最大化E值上并尽量覆盖全体学生，我们经讨论后，思路为：<br>a.依据学生个人E值和个人总请求次数作为划分标准，将学生分为两类；<br>b.按不同比例从两类学生中抽点学生。</p><h3 id="三、使用过程"><a href="#三、使用过程" class="headerlink" title="三、使用过程"></a>三、使用过程</h3><h4 id="（一）环境搭建"><a href="#（一）环境搭建" class="headerlink" title="（一）环境搭建"></a>（一）环境搭建</h4><p>请自行搭建java环境</p><h4 id="（二）数据生成"><a href="#（二）数据生成" class="headerlink" title="（二）数据生成"></a>（二）数据生成</h4><p>将项目克隆到本地，找到CreateData.jar 文件（一般情况下在此路径：second_teamwork–&gt;RandInfo–&gt; CreateDate.jar）。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%94%9F%E6%88%90%E6%8A%BD%E7%82%B9%E5%90%8D%E5%8D%95/%E6%88%AA%E5%B1%8F1.png"><br>双击运行或在此目录下打开命令窗口输入 <code>java -jar CreateData.jar </code>。运行之后在D盘生成了5个班级信息表，如果运行后没有效果或者报错，请将此目录下的5个班级信息表（class1.xls ~ class5.xls）复制到D盘中。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%94%9F%E6%88%90%E6%8A%BD%E7%82%B9%E5%90%8D%E5%8D%95/%E6%88%AA%E5%B1%8F2.png"><br><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%94%9F%E6%88%90%E6%8A%BD%E7%82%B9%E5%90%8D%E5%8D%95/%E6%88%AA%E5%B1%8F4.png"></p><h4 id="（三）抽点方案"><a href="#（三）抽点方案" class="headerlink" title="（三）抽点方案"></a>（三）抽点方案</h4><p>运行CreateData.jar文件后，在项目中找到CreateList.jar文件（一般情况下在此路径：second_teamwork–&gt;CreateList–&gt; CreateList.jar）。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%94%9F%E6%88%90%E6%8A%BD%E7%82%B9%E5%90%8D%E5%8D%95/%E6%88%AA%E5%B1%8F3.png"><br>在此目录下打开命令窗口输入<code> java -jar CreateList.jar</code>,即可输出名单。<br><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%94%9F%E6%88%90%E6%8A%BD%E7%82%B9%E5%90%8D%E5%8D%95/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><h3 id="三、Github仓库地址及commit记录。"><a href="#三、Github仓库地址及commit记录。" class="headerlink" title="三、Github仓库地址及commit记录。"></a>三、Github仓库地址及commit记录。</h3><p><a href="https://github.com/casual-qian/second_teamwork">地址</a><br><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%94%9F%E6%88%90%E6%8A%BD%E7%82%B9%E5%90%8D%E5%8D%95/commit%E8%AE%B0%E5%BD%95.png"></p>]]></content>
    
    
    <categories>
      
      <category>软件工程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>初识MySQL</title>
    <link href="/2022/10/15/%E5%88%9D%E8%AF%86MySQL/"/>
    <url>/2022/10/15/%E5%88%9D%E8%AF%86MySQL/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>所有的网络应用都有基于数据的操作，数据的安全存储就靠数据库了，所以数据库在网络应用中的重要性是不言而喻的，一般在企业里进行开发都会使用到MySQL数据库，所以在之后我们将详细的学习MySQL数据库的用法。</p><p>MySQL是一种开放源代码的关系型数据库管理系统（RDBMS），MySQL数据库系统使用最常用的数据库管理语言–结构化查询语言（SQL）进行数据库管理。</p><p>由于MySQL是开放源代码的，因此任何人都可以在General Public License的许可下下载并根据个性化的需要对其进行修改。MySQL因为其速度、可靠性和适应性而备受关注。大多数人都认为在不需要事务化处理的情况下，MySQL是管理内容最好的选择。</p><p>MySQL这个名字，起源不是很明确。一个比较有影响的说法是，基本指南和大量的库和工具带有前缀“my”已经有10年以上，而且不管怎样，MySQL AB创始人之一的Monty Widenius的女儿也叫My。这两个到底是哪一个给出了MySQL这个名字至今依然是个迷，包括开发者在内也不知道。</p><p>MySQL的海豚标志的名字叫“sakila”，它是由MySQL AB的创始人从用户在“海豚命名”的竞赛中建议的大量的名字表中选出的。获胜的名字是由来自非洲斯威士兰的开源软件开发者Ambrose Twebaze提供。根据Ambrose所说，Sakila来自一种叫SiSwati的斯威士兰方言，也是在Ambrose的家乡乌干达附近的坦桑尼亚的Arusha的一个小镇的名字。<br>MySQL，虽然功能未必很强大，但因为它的开源、广泛传播，导致很多人都了解到这个数据库。它的历史也富有传奇性。</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><h3 id="一、连接数据库"><a href="#一、连接数据库" class="headerlink" title="一、连接数据库"></a>一、连接数据库</h3><p>输入命令：mysql -u用户名 -p密码<br>在平台上连接数据库：mysql -u用户名 -p密码 -h127.0.0.1</p><h3 id="二、创建数据库"><a href="#二、创建数据库" class="headerlink" title="二、创建数据库"></a>二、创建数据库</h3><p>连接上MySQL后就可以进行数据库的操作了，接下来我们创建一个名为TestDb的数据库：<br><img src="https://img-blog.csdnimg.cn/img_convert/da3f5054ad4e0948e5f935614c9244d6.png"><br>创建完数据库之后我们可以通过show databases;命令查看MySQL中已存在的数据库。<br><img src="https://img-blog.csdnimg.cn/img_convert/051b0e0a47a92e0f65eaccff8972c388.png"></p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p><strong>【注】在MySQL数据库中是不区分大小写的</strong><br><img src="https://img-blog.csdnimg.cn/img_convert/8d352209b2ffa90e060bfccbd867081e.png"></p><h3 id="一、创建数据库"><a href="#一、创建数据库" class="headerlink" title="一、创建数据库"></a>一、创建数据库</h3><p>CREATE DATABASE MyDb;</p><h3 id="二、选择数据库"><a href="#二、选择数据库" class="headerlink" title="二、选择数据库"></a>二、选择数据库</h3><p>USE MyDb;</p><h3 id="三、创建t-user表"><a href="#三、创建t-user表" class="headerlink" title="三、创建t_user表"></a>三、创建t_user表</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user<br>(<br>  id <span class="hljs-type">INT</span>,<br>  username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>  <span class="hljs-keyword">password</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>  phone <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">11</span>)<br>);<br></code></pre></td></tr></table></figure><h2 id="使用主键约束"><a href="#使用主键约束" class="headerlink" title="使用主键约束"></a>使用主键约束</h2><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>是表中一列或者多列的组合，主键约束（Primary Key Constraint）要求主键列的数据唯一，并且不允许为空，主键能够唯一的标识表中的每一条记录，可以结合外键来定义与不同数据表之间的关系。<br>怎么理解主键呢？我们知道数据库中的表可以存放很多数据，如果把表中的每一个数据比作一个人的话，那么<strong>表的主键</strong>就可以看做是<strong>人的身份证</strong>。</p><h4 id="添加主键约束"><a href="#添加主键约束" class="headerlink" title="添加主键约束"></a>添加主键约束</h4><p>有两种方式可以添加主键约束：<br>1.在定义列的同时指定主键；<br>2.在定义完字段之后再指定主键。</p><p>(1) 在定义列的同时指定主键：<br><img src="https://img-blog.csdnimg.cn/img_convert/46a7a19720362ba753f8bd30a95a0aaa.png"><br>(2) 在定义完所有列之后指定主键。<br><img src="https://img-blog.csdnimg.cn/img_convert/b190a25f95105153b3a0ee2c12c223ca.png"></p><h4 id="多字段联合主键"><a href="#多字段联合主键" class="headerlink" title="多字段联合主键"></a>多字段联合主键</h4><p>在开发中还有一种情况很常见，就是将几个字段联合在一起作为主键，那这个在代码中怎么实现呢？<br>举个例子，我们将员工的名字和部门ID联合起来作为主键：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_emp2<br>(<br><span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>),<br>deptId <span class="hljs-type">INT</span>,<br>salary <span class="hljs-type">FLOAT</span>,<br><span class="hljs-keyword">PRIMARY KEY</span>(<span class="hljs-type">name</span>,deptId)<br>)<br></code></pre></td></tr></table></figure><p>语句执行后，会将name和deptId字段组合成为表t_emp2的多字段组合主键。</p><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><h3 id="外部关键字"><a href="#外部关键字" class="headerlink" title="外部关键字"></a>外部关键字</h3><p>在以后我们统一将外部关键字叫做外键，外键就是另一张表中的主键。</p><p><strong>问</strong>：外键有啥用啊？<br><strong>答</strong>：外键的主要作用就是保持数据的一致性，完整性。</p><p><strong>再问</strong>：怎么保证的呢？<br><strong>答</strong>：看图。<br><img src="https://img-blog.csdnimg.cn/img_convert/55d3d471d89158367f4d8a098312b5c3.png"><br>如图有两张表，classId 是T_Student的外键，是T_class 表的主键， 如果我们要删除T_class 表中classId为1的字段，程序是会<strong>报错</strong>的，因为t_student表中有数据和classId为1的字段关联了，是不能删除的，这样子就保证了数据的<strong>一致性和完整性</strong>。</p><p><strong>继续问</strong>：那怎么才能删除呢？<br><strong>接着答</strong>：需要先删除T__student表中classId为1的两个字段。</p><p>如何给表添加外部关键字</p><p>在MySQL中给表中字段添加外键约束的语法规则如下：</p><p>CONSTRAINT 外键名 FOREIGN KEY 字段名 REFERENCES 主表名(主键名)<br>举个例子：现在有两张表，t_emp、t_dept如下。</p><p>t_dept表</p><table><thead><tr><th><strong>字段名称</strong></th><th><strong>数据类型</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>deptId</td><td>INT</td><td>部门编号</td></tr><tr><td>name</td><td>VARCHAR(22)</td><td>部门名称</td></tr><tr><td>location</td><td>VARCHAR(50)</td><td>部门位置</td></tr></tbody></table><p>t_emp表</p><table><thead><tr><th><strong>字段名称</strong></th><th><strong>数据类型</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>id</td><td>INT</td><td>员工编号</td></tr><tr><td>name</td><td>VARCHAR(22)</td><td>员工姓名</td></tr><tr><td>deptId</td><td>INT</td><td>部门ID(外键类型必须和对应主键类型一直)</td></tr></tbody></table><p>我们来创建两张表，并给员工表(t_emp)添加外键：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_dept<br>(<br>deptId <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">22</span>),<br><span class="hljs-keyword">location</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_emp<br>(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">22</span>),<br>deptId <span class="hljs-type">INT</span>,<br><span class="hljs-keyword">CONSTRAINT</span> fk_emp_dept1 <span class="hljs-keyword">FOREIGN KEY</span>(deptId) <span class="hljs-keyword">REFERENCES</span> t_dept(deptId)<br>);<br></code></pre></td></tr></table></figure><p>实际操作如图：<br><img src="https://img-blog.csdnimg.cn/img_convert/faef997fedf7605b9d6905e243a3db5f.png"></p><h2 id="添加常用约束"><a href="#添加常用约束" class="headerlink" title="添加常用约束"></a>添加常用约束</h2><p>在数据库的使用过程中我们经常要限制字段的取值，比如有些字我们不能让它为空，我们就需要添加非空约束。</p><h3 id="怎么添加唯一约束"><a href="#怎么添加唯一约束" class="headerlink" title="怎么添加唯一约束"></a>怎么添加唯一约束</h3><p>唯一约束（Unique Constraint）要求该列唯一，允许为空，但是只能有一个空值。唯一约束可以确保一列或者几列不出现重复值。</p><p>定义部门表的部门名称唯一，SQL语句如下：关键词 UNIQUE。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_dept(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">22</span>) <span class="hljs-keyword">UNIQUE</span>,<br><span class="hljs-keyword">location</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>)<br></code></pre></td></tr></table></figure><h3 id="怎么添加非空约束"><a href="#怎么添加非空约束" class="headerlink" title="怎么添加非空约束"></a>怎么添加非空约束</h3><p>关键词：NOT NULL；</p><p>例如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_dept(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">22</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">location</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>)<br></code></pre></td></tr></table></figure><h3 id="怎么使用默认约束"><a href="#怎么使用默认约束" class="headerlink" title="怎么使用默认约束"></a>怎么使用默认约束</h3><p>默认约束：即给字段一个默认值。<br>关键词：DEFAULT；</p><p>例如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_emp(<br>id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY KEY</span>,<br><span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">22</span>),<br>sex <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">2</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;男&#x27;</span><br>) <span class="hljs-keyword">DEFAULT</span> CHARSET=utf8;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>如果是添加字符串型默认值要使用单引号，如果是整型则不需要加任何符号；</li><li>如果要添加的是中文默认值，则需要加上DEFAULT CHARSET&#x3D;utf8;使用英文字符则不需要。<br>设置表的属性值自动增加</li></ul><p>在数据库应用中，经常有个需求就是，在每次插入新纪录时，系统自动生成字段的主键值，即：</p><table><thead><tr><th><strong>id</strong></th><th><strong>name</strong></th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr><tr><td>ID每次自动加一</td><td>姓名</td></tr><tr><td>…</td><td>XXX</td></tr><tr><td>10</td><td>XXX</td></tr></tbody></table><p>关键词：AUTO_INCREMENT，默认情况下初始值和增量都为1。</p><p>例如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_tmp<br>(<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY KEY</span> AUTO_INCREMENT,<br><span class="hljs-type">name</span> <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>)<br>)<br></code></pre></td></tr></table></figure><p>编程要求</p><p>在数据库MyDb中创建表t_user，表结构如下：</p><table><thead><tr><th>字段名称</th><th>数据类型</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>INT</td><td>用户ID，主键，自动增长</td></tr><tr><td>username</td><td>varchar(32)</td><td>用户名，非空，唯一</td></tr><tr><td>sex</td><td>varchar(4)</td><td>性别，默认“男”</td></tr></tbody></table><p>提示：若要给字段添加两个或者两个以上的约束，约束之间以空格隔开即可。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux进程通信</title>
    <link href="/2022/10/15/Linux%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/"/>
    <url>/2022/10/15/Linux%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Linux 作为一个多任务多进程的操作系统，各个进程间信息交互<br>不可避免，进程间通信可分为本地进程间通信和远程进程间通信。本地进<br>程间通信主要包括信号，管道，消息队列，信号量，共享内存等通信方式。</p><h3 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*使用命名管道FIFO机制实现客户到服务器之间传递数据的操作。多客户-单一服务器模式*/</span><br><span class="hljs-regexp">/*命名管道文件需创建在Linux文件系统内*/</span><br><span class="hljs-regexp">/*在一个终端窗口中运行fifo-server程序，然后在另外一个终端窗口运行fifo-client程序*/</span><br><br><span class="hljs-regexp">/*fifo-server.c */</span><br><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/stat.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;linux/stat.h&gt;</span><br><br><span class="hljs-comment">#define FIFO_FILE &quot;/tmp/MYFIFO&quot; /*命名管道的路径、文件名*/</span><br><br>int main()<br>&#123;<br>FILE *fp;<br>char readbuf[<span class="hljs-number">80</span>];<br><br><span class="hljs-keyword">if</span>((fp=fopen(FIFO_FILE,<span class="hljs-string">&quot;r&quot;</span>))==NULL)<span class="hljs-regexp">/*如果命名管道文件不存在，要先创建一个*/</span><br>&#123;<br>umask(<span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>清除文件创建时权限位的屏蔽作用<br>mknod(FIFO_FILE,S_IFIFO|<span class="hljs-number">0666</span>,<span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>创建FIFO文件<br>printf(<span class="hljs-string">&quot;create new fifo successed. \n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br> fclose(fp);<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>((fp=fopen(FIFO_FILE,<span class="hljs-string">&quot;r&quot;</span>))==NULL)<span class="hljs-regexp">/*打开命名管道文件*/</span><br> &#123;<br>printf(<span class="hljs-string">&quot;open fifo failed. \n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(fgets(readbuf,<span class="hljs-number">80</span>,fp)!=NULL)<span class="hljs-regexp">/*从命名管道文件中读数据*/</span><br>&#123;<br>printf(<span class="hljs-string">&quot;Received string :%s \n&quot;</span>, readbuf);<br>fclose(fp);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">if</span>(ferror(fp))<br>&#123;<br>printf(<span class="hljs-string">&quot;read fifo failed.\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>客户端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*使用命名管道FIFO机制实现客户到服务器之间传递数据的操作。多客户-单一服务器模式*/</span><br><span class="hljs-regexp">/*命名管道文件需创建在Linux文件系统内*/</span><br><span class="hljs-regexp">/*在一个终端窗口中运行fifo-server程序，然后在另外一个终端窗口运行fifo-client程序*/</span><br><br><span class="hljs-regexp">/*fifo-client.c */</span><br><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><br><span class="hljs-comment">#define FIFO_FILE &quot;/tmp/MYFIFO&quot;/*命名管道的路径、文件名*/</span><br><br>int main(int argc, char *argv[])<br>&#123;<br>FILE *fp;<br>int i;<br><span class="hljs-keyword">if</span>(argc&lt;=<span class="hljs-number">1</span>)<br>&#123;<br>printf(<span class="hljs-string">&quot;usage: %s &lt;message&gt;\n&quot;</span>,argv[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br> <br><span class="hljs-keyword">if</span>((fp=fopen(FIFO_FILE,<span class="hljs-string">&quot;w&quot;</span>))==NULL)<span class="hljs-regexp">/*打开命名管道文件*/</span><br>&#123;<br>printf(<span class="hljs-string">&quot;open fifo failed. \n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;argc;i++)<br>&#123;<br><span class="hljs-keyword">if</span>(fputs(argv[i],fp)==EOF)<br>&#123;<br>printf(<span class="hljs-string">&quot;write fifo error. \n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(fputs(<span class="hljs-string">&quot; &quot;</span>,fp)==EOF)<br>&#123;<br>printf(<span class="hljs-string">&quot;write fifo error. \n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>fclose(fp);<br>return <span class="hljs-number">0</span>;<br> <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>发送端</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*使用消息队列机制实现发送接收消息的操作。*/</span><br><span class="hljs-comment">/*在一个终端窗口中运行msg-send程序，然后在另外一个终端窗口运行msg-recieve程序*/</span><br><br><span class="hljs-comment">/*msg-send.c */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">my_msg</span><span class="hljs-comment">//消息的组成</span><br>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">int</span> my_msg_type;<span class="hljs-comment">//消息的类型域</span><br><span class="hljs-type">char</span> text[BUFSIZ];<span class="hljs-comment">//消息传递的数据域</span><br>&#125; msgbuf;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> running =<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> msgid;<br>msgid=<span class="hljs-built_in">msgget</span>((<span class="hljs-type">key_t</span>)<span class="hljs-number">1234</span>,<span class="hljs-number">0666</span> |IPC_CREAT);<span class="hljs-comment">//打开key值为1234的消息队列，如不存在则创建之</span><br><span class="hljs-keyword">if</span>(msgid==<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgget failed!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">while</span>(running)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter some text: &quot;</span>);<br><span class="hljs-built_in">fgets</span>(msgbuf.text,BUFSIZ,stdin);<span class="hljs-comment">//读入键盘输入的消息</span><br>msgbuf.my_msg_type=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">msgsnd</span>(msgid,(<span class="hljs-type">void</span> *)&amp;msgbuf, BUFSIZ, <span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<span class="hljs-comment">//发送消息</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgsnd failed!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strncmp</span>(msgbuf.text,<span class="hljs-string">&quot;end&quot;</span>,<span class="hljs-number">3</span>)==<span class="hljs-number">0</span>)<span class="hljs-comment">//输入end表示程序结束</span><br>running=<span class="hljs-number">0</span>;<br>&#125;<br>       <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接收端</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*使用消息队列机制实现发送接收消息的操作。*/</span><br><span class="hljs-comment">/*在一个终端窗口中运行msg-send程序，然后在另外一个终端窗口运行msg-recieve程序*/</span><br><br><span class="hljs-comment">/*msg-recieve.c */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/msg.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">my_msg</span><span class="hljs-comment">//消息的组成</span><br>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">int</span> my_msg_type;<span class="hljs-comment">//消息的类型域</span><br><span class="hljs-type">char</span> text[BUFSIZ];<span class="hljs-comment">//消息传递的数据域</span><br>&#125; msgbuf;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> running =<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> msgid;<br><span class="hljs-type">long</span> <span class="hljs-type">int</span> msg_to_receive=<span class="hljs-number">0</span>;<br>msgid=<span class="hljs-built_in">msgget</span>((<span class="hljs-type">key_t</span>)<span class="hljs-number">1234</span>,<span class="hljs-number">0666</span> |IPC_CREAT);<span class="hljs-comment">//打开key值为1234的消息队列，如不存在则创建之</span><br><span class="hljs-keyword">if</span>(msgid==<span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgget failed!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">while</span>(running)<br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">msgrcv</span>(msgid,(<span class="hljs-type">void</span> *)&amp;msgbuf, BUFSIZ,msg_to_receive, <span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<span class="hljs-comment">//接收消息</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgrcv failed!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You wrote : %s&quot;</span>, msgbuf.text);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strncmp</span>(msgbuf.text,<span class="hljs-string">&quot;end&quot;</span>,<span class="hljs-number">3</span>)==<span class="hljs-number">0</span>)<span class="hljs-comment">//收到end表示程序结束</span><br>running=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">msgctl</span>(msgid, IPC_RMID, <span class="hljs-number">0</span>)==<span class="hljs-number">-1</span>)<span class="hljs-comment">//删除消息队列</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;msgct(IPC_RMID)  failed!\n&quot;</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h3><p>写入端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*使用共享内存机制实现通信*/</span><br><span class="hljs-regexp">/*在一个终端窗口中先运行shm-write程序，然后在另外一个终端窗口运行shm-read程序*/</span><br><br><span class="hljs-regexp">/*shm-write.c */</span><br><br><span class="hljs-comment">#include &lt;sys/types.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/ipc.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/shm.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><br>int main()<br>&#123;<br>int shmid;<br>char c;<br>char *shmptr, *s;<br><span class="hljs-keyword">if</span>((shmid=shmget(<span class="hljs-number">1234</span>,<span class="hljs-number">256</span>,IPC_CREAT | <span class="hljs-number">0666</span>))&lt;<span class="hljs-number">0</span>)<span class="hljs-regexp">//</span>打开key值为<span class="hljs-number">1234</span>的共享内存，如不存在则创建之<br>&#123;<br>printf(<span class="hljs-string">&quot;shmget failed.\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((shmptr=shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))==(char*)-<span class="hljs-number">1</span>)<span class="hljs-regexp">//</span>附加此共享内存至自己的地址空间，返回内存区域的指针<br>&#123;<br>shmctl(shmid, IPC_RMID, (struct shmid_ds*)shmptr);<br>printf(<span class="hljs-string">&quot;shmat failed.\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">2</span>);<br>&#125;<br>s=shmptr;<span class="hljs-regexp">//</span> 写共享内存通过指针s操作<br><span class="hljs-keyword">for</span>(c=<span class="hljs-string">&#x27;a&#x27;</span>;c&lt;=<span class="hljs-string">&#x27;z&#x27;</span>;c++)<span class="hljs-regexp">//</span>写入<span class="hljs-number">26</span>个字母<br>*s++=c;<br>s=<span class="hljs-string">&#x27;\0&#x27;</span>;<br><span class="hljs-keyword">while</span>(*shmptr!=<span class="hljs-string">&#x27;*&#x27;</span>)<span class="hljs-regexp">//</span>等待直到读进程已写入“*”表示读完数据<br>sleep(<span class="hljs-number">1</span>);<br>shmctl(shmid, IPC_RMID, (struct shmid_ds*)shmptr);<span class="hljs-regexp">//</span>删除共享内存<br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*使用共享内存机制实现通信*/</span><br><span class="hljs-regexp">/*在一个终端窗口中先运行shm-write程序，然后在另外一个终端窗口运行shm-read程序*/</span><br><br><span class="hljs-regexp">/*shm-read.c */</span><br><br><span class="hljs-comment">#include &lt;sys/types.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/ipc.h&gt;</span><br><span class="hljs-comment">#include &lt;sys/shm.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br><br>int main()<br>&#123;<br><br>int shmid;<br>char c;<br>char*shmptr, *s;<br><span class="hljs-keyword">if</span>((shmid=shmget(<span class="hljs-number">1234</span>,<span class="hljs-number">256</span>, <span class="hljs-number">0666</span>))&lt;<span class="hljs-number">0</span>)<span class="hljs-regexp">//</span>打开key值为<span class="hljs-number">1234</span>的共享内存<br>&#123;<br>printf(<span class="hljs-string">&quot;shmget failed.\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>((shmptr=shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))==(char*)-<span class="hljs-number">1</span>)<span class="hljs-regexp">//</span>附加此共享内存至自己的地址空间<br>&#123;<br>shmctl(shmid,IPC_RMID,(struct shmid_ds*)shmptr);<br>printf(<span class="hljs-string">&quot;shmat failed.\n&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(s=shmptr;*s!=<span class="hljs-string">&#x27;\0&#x27;</span>;s++)<span class="hljs-regexp">//</span>读出<span class="hljs-number">26</span>个字母<br>putchar(*s);<br>printf(<span class="hljs-string">&quot;\n&quot;</span>);<br>*shmptr=<span class="hljs-string">&#x27;*&#x27;</span>;<span class="hljs-regexp">//</span>写入“*”到共享内存表示读完数据<br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h3><p>头文件</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*共享内存机制可以直接读取内存，所以其通信效率高于管道和消息队列*/</span><br><span class="hljs-comment">/*由于多个进程对同一块内存区域具有访问的权限，进程之间的同步就非常重要*/</span><br><span class="hljs-comment">/*使用信号量机制PV操作来同步的共享内存机制通信*/</span><br><span class="hljs-comment">/*在一个终端窗口中先运行semshm-write程序，然后在另外一个终端窗口运行semshm-read程序*/</span><br><br><span class="hljs-comment">/*semshm-.h */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;error.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SHM_SIZE     1024</span><br><br><span class="hljs-keyword">union</span> <span class="hljs-title class_">semun</span>&#123;<br>    <span class="hljs-type">int</span> val;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">semid_ds</span> *buf;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> *array;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">seminfo</span> *buf_info;<br>    <span class="hljs-type">void</span> *pad;<br>&#125;;<br><br><span class="hljs-comment">/* 创建信号量函数*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">creatsem</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> proj_id, <span class="hljs-type">int</span> members, <span class="hljs-type">int</span> init_val)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">key_t</span> msgkey;<br>    <span class="hljs-type">int</span> index, sid;<br>    <span class="hljs-keyword">union</span> <span class="hljs-title class_">semun</span> semopts;<br>    <br>    <span class="hljs-keyword">if</span>((msgkey = <span class="hljs-built_in">ftok</span>(pathname, proj_id)) == <span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//利用ftok函数生成键值，自行指定的键值可能会冲突</span><br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;ftok error!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((sid = <span class="hljs-built_in">semget</span>(msgkey, members, IPC_CREAT|<span class="hljs-number">0666</span>)) == <span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//打开键值为msgkey的信号量集，如不存在则创建之，返回信号量集标识符。members为信号量集中含信号量的数目。</span><br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;semget call failed.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    semopts.val = init_val;<br>    <span class="hljs-keyword">for</span>(index = <span class="hljs-number">0</span>; index &lt; members; index++)&#123;<br>        <span class="hljs-built_in">semctl</span>(sid, index, SETVAL, semopts);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> sid;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">opensem</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> proj_id)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">key_t</span> msgkey;<br>    <span class="hljs-type">int</span> sid;<br>    <br>    <span class="hljs-keyword">if</span>((msgkey = <span class="hljs-built_in">ftok</span>(pathname, proj_id)) == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;ftok error!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>((sid = <span class="hljs-built_in">semget</span>(msgkey, <span class="hljs-number">0</span>, <span class="hljs-number">0666</span>)) == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;open semget call failed.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sid;<br>&#125;<br><br><span class="hljs-comment">/* p操作, 获取信号量*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sem_p</span><span class="hljs-params">(<span class="hljs-type">int</span> semid, <span class="hljs-type">int</span> index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sembuf</span> sbuf = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, IPC_NOWAIT&#125;;<span class="hljs-comment">//每个sembuf结构描述了一个对信号量的操作</span><br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;index of array cannot equals a minus value!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    sbuf.sem_num = index;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">semop</span>(semid, &amp;sbuf, <span class="hljs-number">1</span>) == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;A wrong operation to semaphore occurred!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* V操作, 释放信号量*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sem_v</span><span class="hljs-params">(<span class="hljs-type">int</span> semid, <span class="hljs-type">int</span> index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">sembuf</span> sbuf = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, IPC_NOWAIT&#125;;<span class="hljs-comment">//每个sembuf结构描述了一个对信号量的操作</span><br>    <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;index of array cannot equals a minus value!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    sbuf.sem_num = index;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">semop</span>(semid, &amp;sbuf, <span class="hljs-number">1</span>) == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;A wrong operation to semaphore occurred!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 删除信号量*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sem_delete</span><span class="hljs-params">(<span class="hljs-type">int</span> semid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">semctl</span>(semid, <span class="hljs-number">0</span>, IPC_RMID));<br>&#125;<br><br><span class="hljs-comment">/* 等待信号量*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">wait_sem</span><span class="hljs-params">(<span class="hljs-type">int</span> semid, <span class="hljs-type">int</span> index)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">semctl</span>(semid, index, GETVAL, <span class="hljs-number">0</span>) == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">usleep</span>(<span class="hljs-number">500</span>);<br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>&#125;<br><br><span class="hljs-comment">/* 创建共享内存*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">creatshm</span><span class="hljs-params">(<span class="hljs-type">char</span> *pathname, <span class="hljs-type">int</span> proj_id, <span class="hljs-type">size_t</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">key_t</span> shmkey;<br>    <span class="hljs-type">int</span> sid;<br>    <br>    <span class="hljs-keyword">if</span>((shmkey = <span class="hljs-built_in">ftok</span>(pathname, proj_id)) == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;ftok error!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>((sid = <span class="hljs-built_in">shmget</span>(shmkey, size, IPC_CREAT|<span class="hljs-number">0666</span>)) == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;shm call failed!\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sid;<br>&#125;<br><br><span class="hljs-comment">/* 删除共享内存*/</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">deleteshm</span><span class="hljs-params">(<span class="hljs-type">int</span> sid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">void</span> *p = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">shmctl</span>(sid, IPC_RMID, p));<br>&#125;<br></code></pre></td></tr></table></figure><p>写入端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*共享内存机制可以直接读取内存，所以其通信效率高于管道和消息队列*/</span><br><span class="hljs-regexp">/*由于多个进程对同一块内存区域具有访问的权限，进程之间的同步就非常重要*/</span><br><span class="hljs-regexp">/*使用信号量机制PV操作来同步的共享内存机制通信*/</span><br><span class="hljs-regexp">/*在一个终端窗口中先运行semshm-write程序，然后在另外一个终端窗口运行semshm-read程序*/</span><br><br><span class="hljs-regexp">/*semshm-write.c */</span><br><br><span class="hljs-comment">#include &quot;2-4semshm-.h&quot;</span><br><br>int main(int argc, char** argv)<br>&#123;<br>    int semid, shmid;<br>    char *shmaddr;<br>    char write_str[SHM_SIZE];<br>    char *ret;<br>    <span class="hljs-keyword">if</span>((shmid = creatshm(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">57</span>, SHM_SIZE)) == -<span class="hljs-number">1</span>) <span class="hljs-regexp">//</span>创建或者获取共享内存<br>        return -<span class="hljs-number">1</span>;<br><span class="hljs-regexp">/*建立进程和共享内存连接*/</span><br>    <span class="hljs-keyword">if</span>((shmaddr = shmat(shmid, (char*)<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) == (char *)-<span class="hljs-number">1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;attch shared memory error!\n&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;    <br>    <span class="hljs-keyword">if</span>((semid = creatsem(<span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-number">39</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)) == -<span class="hljs-number">1</span>)<span class="hljs-regexp">//</span>创建信号量<br>        return -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        wait_sem(semid, <span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>等待信号量可以被获取<br>        sem_p(semid, <span class="hljs-number">0</span>);  <span class="hljs-regexp">//</span>获取信号量<br><span class="hljs-regexp">/***************写共享内存***************************************************/</span><br>        printf(<span class="hljs-string">&quot;write : &quot;</span>);<br>        ret = fgets(write_str, <span class="hljs-number">1024</span>, stdin);<br>        <span class="hljs-keyword">if</span>(write_str[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;#&#x27;</span>) <span class="hljs-regexp">//</span> <span class="hljs-string">&#x27;#&#x27;</span>结束读写进程<br>            <span class="hljs-keyword">break</span>;<br>        int len = strlen(write_str);<br>        write_str[len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        strcpy(shmaddr, write_str);<br><span class="hljs-regexp">/****************************************************************************/</span><br>        sem_v(semid, <span class="hljs-number">0</span>); <span class="hljs-regexp">//</span>释放信号量<br>        usleep(<span class="hljs-number">1000</span>);  <span class="hljs-regexp">//</span>本进程睡眠.<br>    &#125;<br>    sem_delete(semid); <span class="hljs-regexp">//</span>把semid指定的信号集从系统中删除<br>    deleteshm(shmid);   <span class="hljs-regexp">//</span>从系统中删除shmid标识的共享内存<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*共享内存机制可以直接读取内存，所以其通信效率高于管道和消息队列*/</span><br><span class="hljs-regexp">/*由于多个进程对同一块内存区域具有访问的权限，进程之间的同步就非常重要*/</span><br><span class="hljs-regexp">/*使用信号量机制PV操作来同步的共享内存机制通信*/</span><br><span class="hljs-regexp">/*在一个终端窗口中先运行semshm-write程序，然后在另外一个终端窗口运行semshm-read程序*/</span><br><br><span class="hljs-regexp">/*semshm-read.c */</span><br><br><span class="hljs-comment">#include &quot;2-4semshm-.h&quot;</span><br><br>int main(int argc, char** argv)<br>&#123;<br>    int semid, shmid;<br>    char *shmaddr;<br>    <span class="hljs-keyword">if</span>((shmid = creatshm(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">57</span>, SHM_SIZE)) == -<span class="hljs-number">1</span>)<br>        return -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>((shmaddr = shmat(shmid, (char*)<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) == (char *)-<span class="hljs-number">1</span>)&#123;<br>        perror(<span class="hljs-string">&quot;attch shared memory error!\n&quot;</span>);<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>((semid = opensem(<span class="hljs-string">&quot;./&quot;</span>, <span class="hljs-number">39</span>)) == -<span class="hljs-number">1</span>)<br>        return -<span class="hljs-number">1</span>;<br>    printf(<span class="hljs-string">&quot;read start....................\n&quot;</span>);        <br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        printf(<span class="hljs-string">&quot;read : &quot;</span>);<br>        wait_sem(semid, <span class="hljs-number">0</span>);  <span class="hljs-regexp">//</span>等待信号量可以获取<br>        <span class="hljs-keyword">if</span>(sem_p(semid, <span class="hljs-number">0</span>) == -<span class="hljs-number">1</span>) <span class="hljs-regexp">//</span>获取信号量失败退出。当server写入<span class="hljs-string">&#x27;#&#x27;</span>时引发<br>            <span class="hljs-keyword">break</span>;<br>        printf(<span class="hljs-string">&quot;%s&quot;</span>, shmaddr);<br><br>        sem_v(semid, <span class="hljs-number">0</span>);<br>        usleep(<span class="hljs-number">1000</span>);<br>    &#125;    <br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux C</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux进程管理</title>
    <link href="/2022/10/08/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2022/10/08/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、fork函数"><a href="#一、fork函数" class="headerlink" title="一、fork函数"></a>一、fork函数</h3><h4 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h4><p>一个进程，包括代码、数据和分配给进程的资源。fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，也就是两个进程可以做完全相同的事，但如果初始参数或者传入的变量不同，两个进程也可以做不同的事。<br>当程序执行到fork函数时会复制一份原来的进程（创建一个新的进程），旧进程（父进程）和新进程（子进程）会继续执行fork之后的代码,父子进程执行的顺序未知。</p><h4 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*简单了解fork函数的功能*/</span><br><span class="hljs-comment">/*父进程与子进程的执行顺序未知*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> flag;<span class="hljs-comment">//flag用于区别创建的子进程</span><br>flag = fork();<span class="hljs-comment">//创建子进程</span><br><span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">//子进程child_1</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is child_1 process %d\n&quot;</span>,flag);<br>flag++;<br><span class="hljs-keyword">if</span> (fork() == <span class="hljs-number">0</span>) <span class="hljs-comment">//在子进程下创建新的子进程child_2</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is child process of child_1\n&quot;</span>);<br><span class="hljs-comment">//进程 child_1</span><br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is child_1 process %d\n&quot;</span>,flag);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//父进程</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is parent process\n&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/img/Linux/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/fork%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><h3 id="二、exec函数族"><a href="#二、exec函数族" class="headerlink" title="二、exec函数族"></a>二、exec函数族</h3><h4 id="功能说明-1"><a href="#功能说明-1" class="headerlink" title="功能说明"></a>功能说明</h4><p>fork()函数通过系统调用创建一个与原来进程（父进程）几乎完全相同的进程（子进程是父进程的副本，它将获得父进程数据空间、堆、栈等资源的副本。注意，子进程持有的是上述存储空间的“副本”，这意味着父子进程不共享这些存储空间。linux将复制父进程的地址空间内容给子进程，因此，子进程由了独立的地址空间。），也就是这两个进程做完全相同的事。</p><p>正因为fork函数创建的子进程几乎等同于父进程的副本，所以我们更希望子进程可以执行不一样的操作，可以装入和运行其它程序（子进程替换原有进程，和父进程做不同的事）,使用exec函数就可以执行和父进程不一样的操作。</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><table>    <tr>        <td>头文件</td>        <td>#include &#60unistd&#62</td>      </tr>    <tr>        <td>函数说明</td>        <td>执行文件</td>    </tr>    <tr>        <td rowspan="6">函数原型</td>        <td>int execl(const char *pathname, const char *arg, ...)</td>    </tr>    <tr>        <td>int execv(const char *pathname, char *const argv[])</td>    </tr>    <tr>        <td>int execle(const char *pathname, const char *arg, ..., char *const envp[])</td>    </tr>    <tr>        <td>int execve(const char *pathname, char *const argv[], char *const envp[])</td>    </tr>    <tr><td>int execvp(const char *filename, char *const argv[])</td>    </tr>    <tr>        <td>int execlp(const char *filename, const char *arg, ...)</td>    </tr>    <tr>        <td rowspan="2">函数返回值</td>        <td>成功：函数不会返回</td>    </tr>    <tr>        <td>出错：返回-1，失败原因记录在error中</td>    </tr></table><h4 id="命名语法"><a href="#命名语法" class="headerlink" title="命名语法"></a>命名语法</h4><table>    <tr>        <td>前4位</td>        <td colspan="2">统一为：exec</td>    </tr>    <tr>        <td rowspan="2">第5位</td>        <td>l：参数传递为逐个列举方式</td>        <td>execl、execle、execlp</td>    </tr>    <tr>        <td>v：参数传递为构造指针数组方式</td>        <td>execv、execve、execvp</td>    </tr>    <tr>        <td rowspan="2">第6位</td>        <td>e：可传递新进程环境变量</td>        <td>execle、execve</td>    </tr>    <tr>        <td>p：可执行文件查找方式为文件名</td>        <td>execlp、execvp</td>    </tr></table><h5 id="简单例子-1"><a href="#简单例子-1" class="headerlink" title="简单例子"></a>简单例子</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/*程序执行execlp函数和execv函数*/</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;unistd.h&gt;</span><br><span class="hljs-comment">#include &lt;stdlib.h&gt;</span><br>int main()<br>&#123;<br>pid_t pid;<br><br><span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)<span class="hljs-regexp">//</span>创建子进程child_1<br>&#123;<br><span class="hljs-regexp">//</span>错误处理<br>perror(<span class="hljs-string">&quot;fork&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-regexp">//</span>子进程child_1<br>printf(<span class="hljs-string">&quot;\nThis is child_1 process\n&quot;</span>);<br><span class="hljs-keyword">if</span>(execlp(<span class="hljs-string">&quot;pwd&quot;</span>,<span class="hljs-string">&quot;pwd&quot;</span>,NULL) &lt; <span class="hljs-number">0</span>)<span class="hljs-regexp">//</span>转入执行pwd命令<br>&#123;<br>perror(<span class="hljs-string">&quot;execlp&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>printf(<span class="hljs-string">&quot;never be displayed&quot;</span>);<br>&#125;<br><br><span class="hljs-regexp">//</span>创建以NULL结尾的字符串数组指针以便execv函数使用<br>char *arg[] = &#123;<span class="hljs-string">&quot;ls&quot;</span>,NULL&#125;;<br><span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)<span class="hljs-regexp">//</span>创建子进程child_2<br>&#123;<br>perror(<span class="hljs-string">&quot;fork&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-regexp">//</span>子进程child_2<br>printf(<span class="hljs-string">&quot;\nThis is child_2 process\n&quot;</span>);<br><span class="hljs-keyword">if</span>(execv(<span class="hljs-string">&quot;/bin/ls&quot;</span>,arg) &lt; <span class="hljs-number">0</span>)<span class="hljs-regexp">//</span>转入执行ls命令<br>&#123;<br>perror(<span class="hljs-string">&quot;execv&quot;</span>);<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>printf(<span class="hljs-string">&quot;never be displayed&quot;</span>);<br>&#125;<br><br>return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/img/Linux/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/exec%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><h3 id="三、singal函数"><a href="#三、singal函数" class="headerlink" title="三、singal函数"></a>三、singal函数</h3><h4 id="功能说明-2"><a href="#功能说明-2" class="headerlink" title="功能说明"></a>功能说明</h4><p>通过signal函数可以设置系统对于某一信号的对应的操作<br>所在函数库：#include &lt;signal.h&gt;<br>使用原型：signal(int signum,sighandler_t handler)<br>参数说明：<br>signum：信号编号<br>handler的取值：<br>忽略该信号：SIG_IGN<br>执行系统默认动作：SIG_DFL<br>自定义信号处理函数：信号处理函数名</p><h4 id="简单例子-2"><a href="#简单例子-2" class="headerlink" title="简单例子"></a>简单例子</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-comment">//注册printsignum函数以便使用</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printsignum</span><span class="hljs-params">(<span class="hljs-type">int</span> SignNum)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The signal number is %d\n&quot;</span>,SignNum);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is a process\n&quot;</span>);<br><span class="hljs-built_in">signal</span>(SIGINT,printsignum);<span class="hljs-comment">//注册SIGINT信号,键接收到该信号后会执行printsignum函数</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<span class="hljs-comment">//键入ctrl+c 执行pirntsignum函数</span><br><span class="hljs-built_in">sleep</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Never be displayed\n&quot;</span>);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：<br><img src="/img/Linux/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/signal%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p><h3 id="四、make函数的使用"><a href="#四、make函数的使用" class="headerlink" title="四、make函数的使用"></a>四、make函数的使用</h3><h4 id="功能说明-3"><a href="#功能说明-3" class="headerlink" title="功能说明"></a>功能说明</h4><p>使用make命令，系统会在当前目录下寻找Makefile的文件，并对它进行解释，处理，并执行相关动作。</p><h4 id="简单例子-3"><a href="#简单例子-3" class="headerlink" title="简单例子"></a>简单例子</h4><p>主程序main通过调用函数function_A执行相关操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//主函数中调用函数function_A</span><br><span class="hljs-built_in">function_A</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数function_A在同一目录下的另一c文件function_A.c中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">function_A</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//输出相关文字</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is function_A\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在同一目录下的makefile文件内容如下</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">all:</span> main.<span class="hljs-keyword">c</span> function_A.<span class="hljs-keyword">c</span><br>gcc -o all main.<span class="hljs-keyword">c</span> function_A.<span class="hljs-keyword">c</span> #次行以tab开头<br></code></pre></td></tr></table></figure><p>在此目录下键入make命令，发现目录下生成了名为all的可执行文件，执行这个文件，观察到所需的操作已经执行，结果如下：<br><img src="/img/Linux/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/make%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png"></p>]]></content>
    
    
    <categories>
      
      <category>Linux C</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>初识原型设计</title>
    <link href="/2022/10/02/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/10/02/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="事先说明"><a href="#事先说明" class="headerlink" title="事先说明"></a>事先说明</h3><p>其实主要是设计方面，个人艺术细胞不太好，没有美观的界面，只是设计了一个模型出来，无法实现其功能，这次是两人结队完成的哦</p><h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><h4 id="1-Need-需求"><a href="#1-Need-需求" class="headerlink" title="1.Need 需求"></a>1.Need 需求</h4><ul><li>班级名单导入或生成，要方便易用</li><li>班级点名方式要方便易用</li><li>班级点名方式要尽可能防作弊</li><li>要支持多班级功能</li><li>要支持期末汇总统计导出</li><li>要支持请假功能</li><li>要符合小程序的规范的界面或功能要求</li></ul><h4 id="2-Approach-做法"><a href="#2-Approach-做法" class="headerlink" title="2.Approach 做法"></a>2.Approach 做法</h4><p>（1）使用原型设计工具墨刀设计基于微信小程序的课堂签到小程序；<br>（2）学生端实现学生的课堂签到、签到记录查询；<br>（3）教师端支持发布签到、管理班级、导出名单等功能。</p><h4 id="3-Benefit-好处"><a href="#3-Benefit-好处" class="headerlink" title="3.Benefit 好处"></a>3.Benefit 好处</h4><p>（1）采用分模块、分层次实现，UI简洁明了，方便用户使用；<br>（2）不同的身份定位提供不同的服务；<br>（3）采用扫码加定位签到方式，在一定程度上防止作弊.</p><h4 id="4-Competitors-竞争"><a href="#4-Competitors-竞争" class="headerlink" title="4.Competitors 竞争"></a>4.Competitors 竞争</h4><p>经调研，在本校内师生大多数使用“e点课堂”以及“雨课堂”两款小程序。其中e点并不支持教师导入导出班级成员名单，且仅采用扫码方式进行签到，缺乏有效防作弊手段；雨课堂虽然提供了共享课件以及课堂互动特色功能，但在签到功能需求上采用扫码或课堂码方式签到，也是缺乏有效防作弊手段，且两者都无请假功能。<br>本小程序集成扫码这一便利方式的同时采用自动获取定位来确保学生课堂到位情况真实性，增设请假功能模块，且轻便小巧。</p><h4 id="5-Delivery-推广"><a href="#5-Delivery-推广" class="headerlink" title="5.Delivery 推广"></a>5.Delivery 推广</h4><p>先于本课堂试行，在不断吸收用户反馈意见以及改进的基础上，再向学院、学校、地区、逐级推广。</p><h3 id="二、软件概述"><a href="#二、软件概述" class="headerlink" title="二、软件概述"></a>二、软件概述</h3><h4 id="1-系统功能框架"><a href="#1-系统功能框架" class="headerlink" title="1.系统功能框架"></a>1.系统功能框架</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/%E6%95%99%E5%B8%88%E7%AB%AF1.jpg"><br><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E7%94%9F%E7%AB%AF1.jpg"></p><h4 id="2-功能逻辑流程图"><a href="#2-功能逻辑流程图" class="headerlink" title="2.功能逻辑流程图"></a>2.功能逻辑流程图</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/%E6%95%99%E5%B8%88%E7%AB%AF2.jpg#pic_center"><br><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/%E5%AD%A6%E7%94%9F%E7%AB%AF2.jpg#pic_center"></p><h3 id="三、PSP表格"><a href="#三、PSP表格" class="headerlink" title="三、PSP表格"></a>三、PSP表格</h3><table><thead><tr><th>Personal Software Process Stages</th><th>预估耗时（分钟）</th><th>实际耗时（分钟）</th></tr></thead><tbody><tr><td>Planning（计划）</td><td>60</td><td>30</td></tr><tr><td>Estimate（估计时间）</td><td>10</td><td>5</td></tr><tr><td>Development（开发）</td><td>0</td><td>0</td></tr><tr><td>Analysis（需求分析（包括学习新技术））</td><td>60</td><td>90</td></tr><tr><td>Design Spec（生成设计文档）</td><td>30</td><td>60</td></tr><tr><td>Design Review（设计复审）</td><td>0</td><td>0</td></tr><tr><td>Coding Standard（代码规范 ）</td><td>0</td><td>0</td></tr><tr><td>Design（具体设计）</td><td>400</td><td>500</td></tr><tr><td>Coding（具体编码）</td><td>0</td><td>0</td></tr><tr><td>Code Review（代码复审）</td><td>0</td><td>0</td></tr><tr><td>Test（测试（自我测试，修改代码，提交修改））</td><td>0</td><td>0</td></tr><tr><td>Test Report（测试报告）</td><td>0</td><td>0</td></tr><tr><td>Size Measurement（计算工作量）</td><td>10</td><td>15</td></tr><tr><td>Postmortem &amp; Process Improvement Plan（事后总结, 并提出过程改进计划）</td><td>30</td><td>20</td></tr><tr><td>Total（合计）</td><td>600</td><td>720</td></tr></tbody></table><h3 id="四、纸画原型以及结对照片"><a href="#四、纸画原型以及结对照片" class="headerlink" title="四、纸画原型以及结对照片"></a>四、纸画原型以及结对照片</h3><h4 id="1-原型草图"><a href="#1-原型草图" class="headerlink" title="1. 原型草图"></a>1. 原型草图</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/%E8%8D%89%E5%9B%BE1.jpg"><br><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/%E8%8D%89%E5%9B%BE2.jpg"></p><h4 id="2-结对照片"><a href="#2-结对照片" class="headerlink" title="2.结对照片"></a>2.结对照片</h4><p><img src="/img/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/%E7%BB%93%E9%98%9F%E7%85%A7%E7%89%87.jpg"></p><h3 id="五、原型设计"><a href="#五、原型设计" class="headerlink" title="五、原型设计"></a>五、原型设计</h3><p><a href="https://modao.cc/app/aA3ugTpTriyahoqHlBZVTF%20#%E7%AD%BE%E5%88%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%88%86%E4%BA%AB">[原型链接]</a></p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><ul><li>032002603：本次结队作业我基本上学会了设计一个软件原型的基本流程，以及掌握了使用墨刀进行原型设计的简单操作，在功能设计上大致上满足了我们预先的想法，但是在界面美感上可能还需要进行一定的优化。</li><li>032002604：我之前有做过产品功能需求分析并以文档形式呈现的经历，但是本次作业是我首次针对用户需求进行产品设计，这和单纯的收集并分析用户需求是种截然不同的体验。要设计出一款好的产品需要先考虑基础框架，再决定细节实现。对我来说，这是一次对计算机工作者的认知提升。</li></ul>]]></content>
    
    
    <categories>
      
      <category>软件工程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自我介绍</title>
    <link href="/2022/09/16/introducemyself/"/>
    <url>/2022/09/16/introducemyself/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>我是2020级计算机类6班的一名学生，大学之中没有什么亮眼的表现，在班级和年级中几乎是小透明的存在。自己学业一般，虽然一直抱着得过且过的心态，但是自己确确实实有努力学习课程（毕竟自己的智商不允许我太随便了）。<br>我觉得自己么什么感兴趣的东西，真要说的话就是平时爱听歌吧（周董YYDS  (≧▽≦ )&#x2F; )，还有就是之前大一的时候没事就喜欢睡觉。</p><p><img src="/img/%E9%97%B2%E8%B0%88/introduce/Jay.jpg"></p><h2 id="自我能力评估"><a href="#自我能力评估" class="headerlink" title="自我能力评估"></a>自我能力评估</h2><p>自己代码能力不强，课外自学基本也都是心血来潮，很多时候都是东一点，西一点，到头来都是皮毛，不经常使用就忘掉了。自己基本上没参加过什么团队的开发项目，这也是我的硬伤。</p><ul><li><p>我掌握的</p><ul><li>c&#x2F;c++基础</li><li>数据结构的皮毛</li><li>web前端（目前只会一点html css）</li><li>java基础</li></ul></li><li><p>我缺少的</p><ul><li>实践经验</li><li>团队协作能力</li><li>一套完整的软件开发流程</li><li>后端开发的深入研究</li><li>课外自学能力</li></ul></li></ul><h2 id="未来期望"><a href="#未来期望" class="headerlink" title="未来期望"></a>未来期望</h2><p>自我感觉自己的学习效率不高，脑子也没有同龄的同学们这么灵光，而计算机这门学科又是如此的日新月异，想要跟上节奏还要加把劲，不断地学习。还有期待自己在实习工作能够尽量的积累经验，这方面的经验自己也是非常的缺少，先在福州工作一段时间，能够在家乡找到好的工作那当然更好。</p><p>ps:基本上是作业一里的内容</p>]]></content>
    
    
    <categories>
      
      <category>闲谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>破站上线</title>
    <link href="/2022/09/15/firstblog/"/>
    <url>/2022/09/15/firstblog/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简单说一说"><a href="#简单说一说" class="headerlink" title="简单说一说"></a>简单说一说</h2><p>这个网站是自己瞎捣鼓了好几天，终于稍微有点雏形了的，小白搭建网站没有那么花里胡哨。希望以后继续努力吧，加油鸭！！！</p><p><img src="/img/%E9%97%B2%E8%B0%88/firstblog/fighting.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>闲谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
